<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Iván Rodríguez]]></title>
  <link href="http://viktorivan.github.io/atom.xml" rel="self"/>
  <link href="http://viktorivan.github.io/"/>
  <updated>2016-03-15T13:00:58-06:00</updated>
  <id>http://viktorivan.github.io/</id>
  <author>
    <name><![CDATA[Iván Rodríguez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Instalación de GNU Radio embedded en tarjetas ZedBoard]]></title>
    <link href="http://viktorivan.github.io/blog/2015/11/28/instalacion-de-gnu-radio-embedded-en-tarjetas-zedboard/"/>
    <updated>2015-11-28T13:21:27-06:00</updated>
    <id>http://viktorivan.github.io/blog/2015/11/28/instalacion-de-gnu-radio-embedded-en-tarjetas-zedboard</id>
    <content type="html"><![CDATA[<p><em>Introducción.</em></p>

<p>El uso de sistemas embebidos se ha popularizado y beneficiado por las nuevas tecnologías, ya que ahora permiten implementar sistemas que no solo controlen de un modo básico y simple un dispositivo, sino que pueden formar parte de un ecosistema que incluya conectividad a Internet y por lo tanto monitoreo y control remoto. Adicionalmente, tendencias como el radio definido por software (SDR) han integrado a sus desarrollos la implementación en sistemas embebidos lo que permite el desarrollo de un sistema de comunicación completo en un ambiente embebido, disminuyendo costos y proporcionando portatibilidad.
<!-- more --></p>

<p><em>Instalación.</em></p>

<p>A diferencia de los sistemas operativos convencionales, el instalar un sistema embebido puede verse limitado por la arquitectura de hardware del sistema embebido, por lo que su instalación puede llegar a ocupar varias horas o incluso interrumpirse por la falta de recursos. Una alternativa es la compilación cruzada, donde en una computadora con mejores prestaciones que el hardware de un sistema embebido compila todo el software necesario para el desarrollo del sistema operativo embebido, pero con las librerías que le corresponden al sistema embebido, esto es, se realizará la compilación de una arquitectura de un sistema embebido en una arquitectura de hardware diferente.</p>

<p>Existen varios proyectos para el desarrollo de sistemas embebidos, tales como <a href="http://www.openembedded.org">openembbeded</a>  o <a href="https://www.yoctoproject.org">yocto project</a>. <a href="http://gnuradio.org">GNU Radio</a> por su parte, proporciona un procedimiento para generar un sistema operativo embebido con <a href="https://gnuradio.org/redmine/projects/gnuradio/wiki/Embedded">GNU Radio</a>integrado al momento de realizar la compilación cruzada.</p>

<p>En una primera parte se descarga el proyecto de repo.</p>

<pre><code>$ curl http://commondatastorage.googleapis.com/git-repo-downloads/repo &gt; repo
$ chmod a+x repo
$ sudo mv repo /usr/local/bin/
</code></pre>

<p>Se crea el directorio de trabajo del proyecto.</p>

<pre><code>$ mkdir oe-repo
$ cd oe-repo
</code></pre>

<p>Se indica que el sistema embebido incluye GNU Radio.</p>

<pre><code>$ repo init -u git://github.com/balister/oe-gnuradio-manifest.git -b fido
</code></pre>

<p>Se actualiza el proyecto e indica el modelo de plataforma a utilizar.     </p>

<pre><code>$ repo sync
$ TEMPLATECONF=`pwd`/meta-sdr/conf source ./oe-core/oe-init-build-env ./build ./bitbake
</code></pre>

<p>Al momento de ejecutar el proyecto puede generar diversos tipos de errores, tal como este, donde no se indicó la plataforma</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">You had no conf/local.conf file. This configuration file has therefore been
</span><span class="line">created for you with some default values. You may wish to edit it to use a 
</span><span class="line">different MACHINE (target hardware) or enable parallel build options to take 
</span><span class="line">advantage of multiple cores for example. See the file for more information as 
</span><span class="line">common configuration options are commented.
</span><span class="line">
</span><span class="line">You had no conf/bblayers.conf file. The configuration file has been created for
</span><span class="line">you with some default values. To add additional metadata layers into your
</span><span class="line">configuration please add entries to this file.
</span><span class="line">
</span><span class="line">The Yocto Project has extensive documentation about OE including a reference
</span><span class="line">manual which can be found at:
</span><span class="line">    http://yoctoproject.org/documentation
</span><span class="line">
</span><span class="line">For more information about OpenEmbedded see their website:
</span><span class="line">    http://www.openembedded.org/
</span><span class="line">
</span><span class="line">
</span><span class="line">### Shell environment set up for builds. ###
</span><span class="line">
</span><span class="line">You can now run 'bitbake &lt;target&gt;'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Se indica la plataforma de hardware del sistema embebido, en este caso es una tarjeta <code>Zedboard</code> y con el comando <code>bitbake</code> se inicia la creación del sistema embebido, debido a la descarga de software esta operación llega a consumir hasta 50 GB de disco duro, igualmente puede tardar mucho tiempo por la velocidad del enlace de Internet. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ export MACHINE="zedboard-zynq7"
</span><span class="line">$ bitbake gnuradio-dev-image
</span><span class="line">
</span><span class="line">Parsing recipes: 100% |#######################################| Time: 00:00:30
</span><span class="line">Parsing of 1939 .bb files complete (0 cached, 1939 parsed). 2455 targets, 247 skipped, 0 masked, 0 errors.
</span><span class="line">ERROR: No recipes available for:
</span><span class="line">  /home/cidte/oe-repo/oe-core/../meta-fsl-arm/openembedded-layer/recipes-support/opencv/opencv_3.0.bbappend
</span><span class="line">  /home/cidte/oe-repo/oe-core/../meta-fsl-arm-extra/recipes-kernel/linux/linux-timesys_3.0.15.bbappend
</span><span class="line">
</span><span class="line">Summary: There was 1 ERROR message shown, returning a non-zero exit code.</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>En caso de que alguna receta no este disponible para su descarga será necesario eliminarla de la lista de recetas.</p>

<pre><code>$ gedit conf/bblayers.conf
</code></pre>

<p>Dentro del archivo de configuración se busca los paquetes no disponibles y se borran.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/home/cidte/oe-repo/oe-core/../meta-fsl-arm \
</span><span class="line">/home/cidte/oe-repo/oe-core/../meta-fsl-arm-extra \</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Una vez hecha la modificación, se ejecuta nuevamente el comando <code>bitbake</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bitbake gnuradio-dev-image
</span><span class="line">
</span><span class="line">Parsing recipes: 100% |#######################################| Time: 00:00:14
</span><span class="line">Parsing of 1871 .bb files complete (0 cached, 1871 parsed). 2377 targets, 194 skipped, 0 masked, 0 errors.
</span><span class="line">WARNING: No bb files matched BBFILE_PATTERN_ettus-e100 '^/home/cidte/oe-repo/oe-core/../meta-ettus/e100-bsp/'
</span><span class="line">NOTE: Resolving any missing task queue dependencies
</span><span class="line">NOTE: multiple providers are available for jpeg (jpeg, libjpeg-turbo)
</span><span class="line">NOTE: consider defining a PREFERRED_PROVIDER entry to match jpeg
</span><span class="line">NOTE: multiple providers are available for jpeg-native (jpeg-native, libjpeg-turbo-native)
</span><span class="line">NOTE: consider defining a PREFERRED_PROVIDER entry to match jpeg-native
</span><span class="line">
</span><span class="line">Build Configuration:
</span><span class="line">BB_VERSION        = "1.26.0"
</span><span class="line">BUILD_SYS         = "x86_64-linux"
</span><span class="line">NATIVELSBSTRING   = "elementary-OS-0.3.1"
</span><span class="line">TARGET_SYS        = "arm-oe-linux-gnueabi"
</span><span class="line">MACHINE           = "zedboard-zynq7"
</span><span class="line">DISTRO            = "nodistro"
</span><span class="line">DISTRO_VERSION    = "nodistro.0"
</span><span class="line">TUNE_FEATURES     = "arm armv7a vfp neon callconvention-hard"
</span><span class="line">TARGET_FPU        = "vfp-neon"
</span><span class="line">meta              = "(nobranch):f0873b83d693af4a103999160d67fcf25c7eedc1"
</span><span class="line">e100-bsp          
</span><span class="line">e300-bsp          
</span><span class="line">common            = "(nobranch):eed1cc7bd61aaefc711237f5952faa23f859454d"
</span><span class="line">meta-xilinx       = "(nobranch):13779b9254bab450875a60ed8f21edd0e8876a71"
</span><span class="line">meta-oe           
</span><span class="line">meta-networking   
</span><span class="line">meta-filesystems  
</span><span class="line">meta-python       = "(nobranch):df2f700d66bace65f5d802225232d01cf511fe81"
</span><span class="line">meta-sdr          = "(nobranch):033049a3fa7c97dbe57eaaa54b84b05cbdd6484f"
</span><span class="line">meta-ti           = "(nobranch):2210ae2cdacc22105b76c5fa45957ebec104f1c6"
</span><span class="line">
</span><span class="line">NOTE: Preparing RunQueue
</span><span class="line">NOTE: Executing SetScene Tasks
</span><span class="line">NOTE: Executing RunQueue Tasks</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Copia a memoria SD.</em></p>

<p>Una vez terminado el proceso de compilación cruzada, el proyecto entrega una serie de archivos que son el sistema operativo embebido en la siguiente ubicación.</p>

<pre><code>$ cd /home/cidte/oe-repo/build/tmp-glibc/deploy/images
</code></pre>

<p>Estos archivos deben ser copiados a una memoria SD, para ello es necesario que la memoria tenga dos particiones: una llamada BOOT, fat32, de 40 MB y que sea bootable y la segunda llamada rootfs, ext4 y de tamaño del resto de la memoria. Los archivos que se requieren en la memoria SD en la partición de BOOT son:</p>

<pre><code>$ cp boot.bin /&lt;ruta-a-memoria-SD&gt;/BOOT
$ cp u-boot.elf /&lt;ruta-a-memoria-SD&gt;/BOOT
$ cp u-boot-dtb.img /&lt;ruta-a-memoria-SD&gt;/BOOT
$ cp uEnv.txt /&lt;ruta-a-memoria-SD&gt;/BOOT
$ cp uImage /&lt;ruta-a-memoria-SD&gt;/BOOT
$ cp zedboard-zynq7.dtb /&lt;ruta-a-memoria-SD&gt;/BOOT
</code></pre>

<p>Los archivos para la partición de rootfs estan en un comprimido, no es necesario que el archivo comprimido sea copiado a la memoria, por lo que se puede extraer directamente</p>

<pre><code>$ sudo tar -C /&lt;ruta-a-memoria-SD&gt;/rootfs/ -xzpf gnuradio-dev-image-zedboard-zynq7.tar.gz
</code></pre>

<p>Adicionalmente, el proyecto permite obtener el SDK del sistema embebido.</p>

<pre><code>$ export MACHINE="zedboard-zynq7"
$ bitbake -c populate_sdk gnuradio-dev-image

$ ls tmp-glibc/deploy/sdk/
$ sudo sh tmp-glibc/deploy/sdk/oecore-x86_64-armv7ahf-vfp-neon-toolchain-nodistro.0.sh 
$ . /usr/local/oecore-x86_64/environment-setup-armv7ahf-vfp-neon-oe-linux-gnueabi 
</code></pre>

<p>Finalmente, se procede a encender la tarjeta Zedboard, en caso de que no arranque, desde el puerto serial se ejecuta:</p>

<pre><code>&gt; env default -a
&gt; env save
&gt; reset
</code></pre>

<p><em>Acceso SSH con X11Forwarding.</em>    </p>

<p>Para habilitar la conexión SSH con X11Forwarding, desde el puerto serial hay que modificar el archivo:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/etc/ssh/sshd_config</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Descomentar <code>X11Forwarding no</code> y poner <code>X11Forwarding yes</code>.</p>

<p>Reiniciar el servicio con el comando</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/etc/init.d/sshd restart</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>De este modo, queda habilitado <code>X11Forwarding</code> en los enlaces SSH, sin embargo es necesario indicar <code>-X</code> en la configuración de la conexión.</p>

<p><em>Conclusión.</em></p>

<p>El desarrollo de un sistema embebido a través de compilación cruzada puede resultar bastante complejo, pero la ventaja principal es que solo se requiere realizar una vez y los archivos generados pueden ser distribuidos libremente para la tarjeta para la cual fue diseñada. Así también, debido a que el proyecto de GNU Radio se basa en yocto y openembedded, es viable agregar otros proyectos a través de bblayers.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalación de Xillinux en tarjetas ZedBoard]]></title>
    <link href="http://viktorivan.github.io/blog/2015/11/28/instalacion-de-xillinux-en-tarjetas-zedboard/"/>
    <updated>2015-11-28T13:21:01-06:00</updated>
    <id>http://viktorivan.github.io/blog/2015/11/28/instalacion-de-xillinux-en-tarjetas-zedboard</id>
    <content type="html"><![CDATA[<p><em>Introducción.</em></p>

<p>En fechas recientes se ha vuelto popular el uso de sistemas reducidos que permiten instalar sistemas operativos en modo embebido, un ejemplo es <a href="https://www.raspberrypi.org">raspberry pi</a>, el cuál es un ecosistema que presenta varios <a href="https://www.raspberrypi.org/downloads/">sistemas operativos embebidos</a>  de libre distribución. Así mismo existen otros ecosistemas orientados a propósitos mas específicos, tales como <a href="http://zedboard.org">Zedboard</a>, donde presentan varias alternativas de hardware de acuerdo a los requerimientos del usuario. Estas plataformas son basadas en Linux, por lo que proyectos como <a href="http://xillybus.com/xillinux">Xillinux</a> aprovechan al máximo las características del hardware y en conjunto con <a href="http://www.xilinx.com/products/design-tools/vivado.html">VIVADO</a> incluyen una plataforma de hardware adaptable a la tarjeta seleccionada.</p>

<!-- more -->

<p><em>Instalación.</em></p>

<p>En la página de <a href="http://xillybus.com/xillinux">Xillinux</a> se indica donde descargar el sistema operativo, a diferencia de raspberry, es necesario realizar unos pasos antes de copiar los archivos a una memoria SD, ya que es necesario crear el archivo .bit que representa la plataforma de hardware de Zedboard.</p>

<p>De acuerdo al <a href="http://xillybus.com/downloads/doc/xillybus_getting_started_zynq.pdf">manual</a>, es necesario crear antes el procesador <code>netlist</code> y generar los IP cores de Xilinx con ayuda de VIVADO.</p>

<p><em>Copia a SD.</em>
Una vez teniendo el archivo generado se procede a la copia del sistema operativo a la memoria SD.</p>

<ol>
  <li>Para instalar Xillinux en la memoria SD, primero localizar en donde esta montada.</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ lsblk</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Copiar la imagen de Xillinux en memoria SD.</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo dd if=xillinux-1.3.img of=/dev/sdX bs=512</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Comprobar que la copia quedo correcta y esperar como respuesta EOF.</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo cmp xillinux-1.3.img /dev/sdX</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>
    <p>Desmontar o expulsar la memoria y volver a insertar para ver las particiones nuevas.</p>
  </li>
  <li>
    <p>Copiar los archivos de bootfiles en la particion uno, por lo general es la menor.</p>
  </li>
  <li>
    <p>Con gparted ajustar la segunda particion al tamaño de la memoria.</p>
  </li>
  <li>
    <p>Insertar memoria en Zedboard, en caso de no arrancar presionar el micro switch PS-RST.</p>
  </li>
  <li>
    <p>Para comunicarse con la Zedboard a traves del puerto serial.</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo screen /dev/ttyACM0 115200</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>En caso de no tener el programa screen.</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo apt-get install screen</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En caso de que el sistema operativo de la Zedboard no cargue, desde una terminal con puerto serial se reinicia la tarjeta para entrar al u-boot presionando PS-RST y cuando indique presiobar cualquier tecla para evitar arranque. Una vez en u-boot se teclean los siguientes comandos:</p>

<pre><code>&gt; env default -a
&gt; env save
&gt; reset
</code></pre>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bloques de procesamiento de señal de GNU Radio en Python]]></title>
    <link href="http://viktorivan.github.io/blog/2015/11/02/bloques-de-procesamiento-de-senal-de-gnu-radio-en-python/"/>
    <updated>2015-11-02T09:10:09-06:00</updated>
    <id>http://viktorivan.github.io/blog/2015/11/02/bloques-de-procesamiento-de-senal-de-gnu-radio-en-python</id>
    <content type="html"><![CDATA[<p><em>Introducción.</em></p>

<p>Debido a la popularidad de <a href="https://www.python.org">Python</a> para el procesamiento digital de señales en el ámbito científico a través de <a href="http://www.scipy.org/">SciPy</a>, el proyecto de <a href="http://www.gnuradio.org">GNU Radio</a> permite el desarrollo de bloques de procesamiento de señales que pueden ser escritos en lenguaje de programación Python y usar estas librerías sin ningún problema. Este tipo de módulos son conocidos como <code>out-of-tree</code>, ya que, aunque los módulos serán integrados dentro del catálogo de bloques de GNU Radio no se van a integrar al proyecto para su distribución conjunta, sino individual.</p>

<!-- more -->

<p><em>Procedimiento.</em></p>

<p>Para crear un módulo <code>out-of-tree</code> se ejecuta desde una terminal de linux el siguiente comando</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gr_modtool create
</span><span class="line">Name of the new module:Tu_modulo
</span><span class="line">Creating out-of-tree module in ./gr-Tu_modulo... Done. 
</span><span class="line">Use 'gr_modtool add' to add a new block to this currently empty module. </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>El nombre que se indique para el módulo es con el que va a aparecer en el catálogo de GNU Radio, en este caso Tu_modulo.</p>

<p>Para crear los bloques que integrarán el módulo se utiliza la herramienta <code>gr_modtool</code> en la carpeta raíz del proyecto. En este caso se creará un bloque que realizará la función de un convertidor binario a decimal para los tipos de datos float basado en Python.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd gr-Tu_modulo
</span><span class="line">$ gr_modtool add
</span><span class="line">GNU Radio module name identified: Tu_modulo 
</span><span class="line">('sink', 'source', 'sync', 'decimator', 'interpolator', 'general', 'tagged_stream', 'hier', 'noblock')
</span><span class="line">Enter block type: decimator 
</span><span class="line">Language (python/cpp): python
</span><span class="line">Language: Python
</span><span class="line">Enter name of block/code (without module name prefix): bin2dec_py_ff
</span><span class="line">Block/code identifier: bin2dec_py_ff
</span><span class="line">Enter valid argument list, including default arguments: vec_size
</span><span class="line">Add Python QA code? [Y/n] 
</span><span class="line">Adding file 'python/bin2dec_py_ff.py'...
</span><span class="line">Adding file 'python/qa_bin2dec_py_ff.py'...
</span><span class="line">Editing python/CMakeLists.txt...
</span><span class="line">Adding file 'grc/prueba_bin2dec_py_ff.xml'...
</span><span class="line">Editing grc/CMakeLists.txt...</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>y a su vez, se desarrollará un bloque que realice la operación inversa, esto es, un convertidor decimal a binario.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gr_modtool add 
</span><span class="line">GNU Radio module name identified: Tu_modulo 
</span><span class="line">('sink', 'source', 'sync', 'decimator', 'interpolator', 'general', 'tagged_stream', 'hier', 'noblock')
</span><span class="line">Enter block type: interpolator
</span><span class="line">Language (python/cpp): python
</span><span class="line">Language: Python
</span><span class="line">Enter name of block/code (without module name prefix): dec2bin_py_ff
</span><span class="line">Block/code identifier: dec2bin_py_ff
</span><span class="line">Enter valid argument list, including default arguments: vec_size
</span><span class="line">Add Python QA code? [Y/n] 
</span><span class="line">Adding file 'python/dec2bin_py_ff.py'...
</span><span class="line">Adding file 'python/qa_dec2bin_py_ff.py'...
</span><span class="line">Editing python/CMakeLists.txt...
</span><span class="line">Adding file 'grc/prueba_dec2bin_py_ff.xml'...
</span><span class="line">Editing grc/CMakeLists.txt...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>de esta manera se han creado dos bloques que serán escritos en Python, un decimador para el convertidor binario a decimal y un interpolador para el decimal a binario.</p>

<p>Los archivos donde se realizará la programación en código Python se ubican en <code>~/gr-Tu_modulo/python</code> y se llama <code>dec2bin_py_ff.py</code> para el convertidor decimal a binario y <code>bin2dec_py_ff.py</code> para el convertidor binario a decimal.</p>

<p><em>Convertidor binario a decimal</em></p>

<p>Dentro del archivo <code>bin2dec_py_ff.py</code> se puede observar que la librería de Scipy con Numpy ha sido declarada, en caso de que se requiera alguna librería en particular sólo se agrega con la instrucción <code>include</code>.</p>

<p>En la parte de <code>class bin2dec_py_ff(gr.decim_block)</code> está la seccción donde se definen los parámetros iniciales del bloque, <code>def __init__(self, vec_size):</code>, en ella se define el tipo de datos de entrada y salida del bloque, así como el factor de decimación del bloque <code>decim=vec_size</code>. Para poder utilizar la variable <code>vec_size</code> fuera de la clase se puede utilizar <code>self.vec_size</code>, es importante notar que esta variable pertenece a la clase pero no a la función <code>__init__</code>, la variable <code>vec_size</code> representa la cantidad de bits que se requieren para convertir el número a decimal.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class bin2dec_py_ff(gr.decim_block):
</span><span class="line">    """
</span><span class="line">    docstring for block bin2dec_py_ff
</span><span class="line">    """
</span><span class="line">    def __init__(self, vec_size):
</span><span class="line">        gr.decim_block.__init__(self,
</span><span class="line">            name="bin2dec_py_ff",
</span><span class="line">            in_sig=[numpy.float32],
</span><span class="line">            out_sig=[numpy.float32], decim=vec_size)
</span><span class="line">    self.vec_size=vec_size </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En la parte correspondiente a <code>// Do &lt;+signal processing+&gt;</code> es donde se realiza el procesamiento de datos que manipulará el bloque, para la conversión de binario a decimal se desarrolla el código de programación en Python, quedando de la siguiente manera:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def work(self, input_items, output_items):
</span><span class="line">	in0 = numpy.int_(input_items[0])
</span><span class="line">	out = output_items[0]
</span><span class="line">	j=0
</span><span class="line">	for i in range(self.vec_size,len(in0)+1,self.vec_size):
</span><span class="line">		out[j]= int(str("".join(str(x) for x in in0[i-self.vec_size:i])),2)
</span><span class="line">		j += 1
</span><span class="line">	return len(output_items[0])</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>El archivo quedaría de la siguiente forma, ya con todas las modificaciones incluidas:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (bin2dec_py_ff.py)</span> <a href="http://viktorivan.github.io/downloads/code/bin2dec_py_ff.py">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="c"># </span>
</span><span class="line"><span class="c"># Copyright 2015 IVAN RODRIGUEZ.</span>
</span><span class="line"><span class="c"># </span>
</span><span class="line"><span class="c"># This is free software; you can redistribute it and/or modify</span>
</span><span class="line"><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class="line"><span class="c"># the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class="line"><span class="c"># any later version.</span>
</span><span class="line"><span class="c"># </span>
</span><span class="line"><span class="c"># This software is distributed in the hope that it will be useful,</span>
</span><span class="line"><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class="line"><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class="line"><span class="c"># GNU General Public License for more details.</span>
</span><span class="line"><span class="c"># </span>
</span><span class="line"><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class="line"><span class="c"># along with this software; see the file COPYING.  If not, write to</span>
</span><span class="line"><span class="c"># the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class="line"><span class="c"># Boston, MA 02110-1301, USA.</span>
</span><span class="line"><span class="c"># </span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">gnuradio</span> <span class="kn">import</span> <span class="n">gr</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">bin2dec_py_ff</span><span class="p">(</span><span class="n">gr</span><span class="o">.</span><span class="n">decim_block</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    docstring for block bin2dec_py_ff</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">vec_size</span><span class="p">):</span>
</span><span class="line">        <span class="n">gr</span><span class="o">.</span><span class="n">decim_block</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span>
</span><span class="line">            <span class="n">name</span><span class="o">=</span><span class="s">&quot;bin2dec_py_ff&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="n">in_sig</span><span class="o">=</span><span class="p">[</span><span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">],</span>
</span><span class="line">            <span class="n">out_sig</span><span class="o">=</span><span class="p">[</span><span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">],</span> <span class="n">decim</span><span class="o">=</span><span class="n">vec_size</span><span class="p">)</span>
</span><span class="line">	<span class="bp">self</span><span class="o">.</span><span class="n">vec_size</span><span class="o">=</span><span class="n">vec_size</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_items</span><span class="p">,</span> <span class="n">output_items</span><span class="p">):</span>
</span><span class="line">        <span class="n">in0</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">int_</span><span class="p">(</span><span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">        <span class="n">out</span> <span class="o">=</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">        <span class="n">j</span><span class="o">=</span><span class="mi">0</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">vec_size</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">in0</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">vec_size</span><span class="p">):</span>
</span><span class="line">			<span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">in0</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="bp">self</span><span class="o">.</span><span class="n">vec_size</span><span class="p">:</span><span class="n">i</span><span class="p">])),</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">			<span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Convertidor decimal a binario</em></p>

<p>Para corroborar el correcto funcionamiento del bloque de convertidor binario a decimal se propone realizar un convertidor decimal a binario que realizará la operación inversa del bloque anterior.</p>

<p>El archivo donde se realiza la programación es <code>dec2bin_py_ff.py</code>. Nuevamente, en la sección de <code>class dec2bin_py_ff(gr.interp_block):</code> se indica los tipos de datos de entrada y salida que manejará el bloque de procesamiento, así también el factor de interpolación definido por la variable <code>vec_size</code> y por último la variable <code>self.vec_size</code>, quedando como sigue:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class dec2bin_py_ff(gr.interp_block):
</span><span class="line">    """
</span><span class="line">    docstring for block dec2bin_py_ff
</span><span class="line">    """
</span><span class="line">    def __init__(self, vec_size):
</span><span class="line">        gr.interp_block.__init__(self,
</span><span class="line">            name="dec2bin_py_ff",
</span><span class="line">            in_sig=[numpy.float32],
</span><span class="line">            out_sig=[numpy.float32], interp=vec_size)
</span><span class="line">    self.vec_size=vec_size</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En la sección de <code>// Do &lt;+signal processing+&gt;</code> se escribe el código que realizará la conversión decimal a binario.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def work(self, input_items, output_items):
</span><span class="line">    in0 = input_items[0]
</span><span class="line">    out = output_items[0]
</span><span class="line">    f=numpy.zeros([len(in0),self.vec_size])
</span><span class="line">    for i in range(0,len(in0)):
</span><span class="line">        f[i,:] = numpy.int_([str(x) for x in numpy.binary_repr(in0[i], width = self.vec_size)])*1.0
</span><span class="line">    out[:] = numpy.hstack(f)
</span><span class="line">    return len(output_items[0])</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>El archivo completo queda de la siguiente manera:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (dec2bin_py_ff.py)</span> <a href="http://viktorivan.github.io/downloads/code/dec2bin_py_ff.py">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="c"># </span>
</span><span class="line"><span class="c"># Copyright 2015 IVAN RODRIGUEZ.</span>
</span><span class="line"><span class="c"># </span>
</span><span class="line"><span class="c"># This is free software; you can redistribute it and/or modify</span>
</span><span class="line"><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class="line"><span class="c"># the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class="line"><span class="c"># any later version.</span>
</span><span class="line"><span class="c"># </span>
</span><span class="line"><span class="c"># This software is distributed in the hope that it will be useful,</span>
</span><span class="line"><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class="line"><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class="line"><span class="c"># GNU General Public License for more details.</span>
</span><span class="line"><span class="c"># </span>
</span><span class="line"><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class="line"><span class="c"># along with this software; see the file COPYING.  If not, write to</span>
</span><span class="line"><span class="c"># the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class="line"><span class="c"># Boston, MA 02110-1301, USA.</span>
</span><span class="line"><span class="c"># </span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">gnuradio</span> <span class="kn">import</span> <span class="n">gr</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">dec2bin_py_ff</span><span class="p">(</span><span class="n">gr</span><span class="o">.</span><span class="n">interp_block</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    docstring for block dec2bin_py_ff</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">vec_size</span><span class="p">):</span>
</span><span class="line">        <span class="n">gr</span><span class="o">.</span><span class="n">interp_block</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span>
</span><span class="line">            <span class="n">name</span><span class="o">=</span><span class="s">&quot;dec2bin_py_ff&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="n">in_sig</span><span class="o">=</span><span class="p">[</span><span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">],</span>
</span><span class="line">            <span class="n">out_sig</span><span class="o">=</span><span class="p">[</span><span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">],</span> <span class="n">interp</span><span class="o">=</span><span class="n">vec_size</span><span class="p">)</span>
</span><span class="line">	<span class="bp">self</span><span class="o">.</span><span class="n">vec_size</span><span class="o">=</span><span class="n">vec_size</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_items</span><span class="p">,</span> <span class="n">output_items</span><span class="p">):</span>
</span><span class="line">		<span class="n">in0</span> <span class="o">=</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">		<span class="n">out</span> <span class="o">=</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">		<span class="n">f</span><span class="o">=</span><span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="nb">len</span><span class="p">(</span><span class="n">in0</span><span class="p">),</span><span class="bp">self</span><span class="o">.</span><span class="n">vec_size</span><span class="p">])</span>
</span><span class="line">		<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">in0</span><span class="p">)):</span>
</span><span class="line">			<span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">,:]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">int_</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">numpy</span><span class="o">.</span><span class="n">binary_repr</span><span class="p">(</span><span class="n">in0</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">width</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">vec_size</span><span class="p">)])</span><span class="o">*</span><span class="mf">1.0</span>
</span><span class="line">		<span class="n">out</span><span class="p">[:]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">hstack</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">		<span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Interfaz GNU Radio Companion</em></p>

<p>Los bloques dentro de GNU Radio Companion (GRC) son archivos xml que se ubican en <code>~/gr-Tu_modulo/grc</code>, para el convertidor binario a decimal se llama <code>Tu_modulo_bin2dec_py_ff.xml</code> y para el convertidor decimal a binario <code>Tu_modulo_dec2bin_py_ff.xml</code>.</p>

<p>Dentro del archivo xml hay varios parámetros que pueden ser personalizados, tal como el nombre del bloque, este parámetro se define en la línea correspondiente a <code>&lt;name&gt;</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;name&gt;Binary To Decimal Python&lt;/name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>En la parte de <code>&lt;param&gt;</code> se indica la variable de entrada del bloque</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  &lt;param&gt;
</span><span class="line">    &lt;name&gt;Vector size&lt;/name&gt;
</span><span class="line">    &lt;key&gt;vec_size&lt;/key&gt;
</span><span class="line">    &lt;type&gt;int&lt;/type&gt;
</span><span class="line">  &lt;/param&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>El conector de entrada del bloque de procesamiento se define en <code>&lt;sink&gt;</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  &lt;sink&gt;
</span><span class="line">    &lt;name&gt;in&lt;/name&gt;
</span><span class="line">    &lt;type&gt;float&lt;/type&gt;
</span><span class="line">  &lt;/sink&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>El conector de salida en <code>source</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  &lt;source&gt;
</span><span class="line">    &lt;name&gt;out&lt;/name&gt;
</span><span class="line">    &lt;type&gt;float&lt;/type&gt;
</span><span class="line">  &lt;/source&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>De igual manera se modifican las secciones de <code>&lt;name&gt;</code>, <code>&lt;param&gt;</code>, <code>&lt;sink&gt;</code> y <code>&lt;source&gt;</code> en el archivo <code>Tu_modulo_dec2bin_py_ff.xml</code> para el bloque de procesamiento del convertidor decimal a binario.</p>

<p>El archivo quedaría finalmente de la siguiente forma:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (Tu_modulo_bin2dec_py_ff.xml)</span> <a href="http://viktorivan.github.io/downloads/code/Tu_modulo_bin2dec_py_ff.xml">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;block&gt;</span>
</span><span class="line">  <span class="nt">&lt;name&gt;</span>binary to decimal Python<span class="nt">&lt;/name&gt;</span>
</span><span class="line">  <span class="nt">&lt;key&gt;</span>Tu_modulo_bin2dec_py_ff<span class="nt">&lt;/key&gt;</span>
</span><span class="line">  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class="line">  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class="line">  <span class="nt">&lt;make&gt;</span>Tu_modulo.bin2dec_py_ff($vec_size)<span class="nt">&lt;/make&gt;</span>
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class="line"><span class="c">       Sub-nodes:</span>
</span><span class="line"><span class="c">       * name</span>
</span><span class="line"><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class="line"><span class="c">       * type --&gt;</span>
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Vector size<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>vec_size<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">  <span class="nt">&lt;sink&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/sink&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">  <span class="nt">&lt;source&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/source&gt;</span>
</span><span class="line"><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>El archivo XML del convertidor decimal a binario quedaría de la siguiente forma:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (Tu_modulo_dec2bin_py_ff.xml)</span> <a href="http://viktorivan.github.io/downloads/code/Tu_modulo_dec2bin_py_ff.xml">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;block&gt;</span>
</span><span class="line">  <span class="nt">&lt;name&gt;</span>Decimal to binary Python<span class="nt">&lt;/name&gt;</span>
</span><span class="line">  <span class="nt">&lt;key&gt;</span>Tu_modulo_dec2bin_py_ff<span class="nt">&lt;/key&gt;</span>
</span><span class="line">  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class="line">  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class="line">  <span class="nt">&lt;make&gt;</span>Tu_modulo.dec2bin_py_ff($vec_size)<span class="nt">&lt;/make&gt;</span>
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class="line"><span class="c">       Sub-nodes:</span>
</span><span class="line"><span class="c">       * name</span>
</span><span class="line"><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class="line"><span class="c">       * type --&gt;</span>
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Vector size<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>vec_size<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">  <span class="nt">&lt;sink&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/sink&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">  <span class="nt">&lt;source&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/source&gt;</span>
</span><span class="line"><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Compilación de los bloques</em></p>

<p>Una vez ya realizado todos los procesos referentes al código de programación de los bloques de procesamiento se procede a integrarlos en el proyecto de GNU Radio. Esto se realiza por medio de una serie de comandos desde una terminal de linux en la raíz del proyecto. En caso de no tener una carpeta de build, se crea por medio de comandos de linux</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdir build
</span><span class="line">$ cd build</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Una vez dentro de la carpeta de build, se procede a compilar el proyecto</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cmake ../
</span><span class="line">$ make
</span><span class="line">$ sudo make install
</span><span class="line">$ sudo ldconfig</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>De esa manera queda integrado el módulo out-of-tree dentro de GNU Radio.</p>

<p><em>Archivos de prueba QA</em></p>

<p>Un modo para corroborar el correcto funcionamiento del bloque de procesamiento es a través de los archivos QA que se ubican en <code>~/gr-Tu_modulo/python</code>. Estos archivos permiten hacer una comparación de los datos de salida y los datos esperados de salida de acuerdo a una secuencia de datos de entrada previamente definida. Un ejemplo para probar el convertidor binario a decimal sería:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def test_001_t (self):
</span><span class="line">    # set up fg
</span><span class="line">    src_data = [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0]
</span><span class="line">    expected_result = [5.0, 7.0, 0.0, 1.0, 2.0]
</span><span class="line">    src = blocks.vector_source_f (src_data)
</span><span class="line">    conv = bin2dec_py_ff (3)
</span><span class="line">    snk = blocks.vector_sink_f ()
</span><span class="line">    self.tb.connect (src, conv)
</span><span class="line">    self.tb.connect (conv, snk)
</span><span class="line">    self.tb.run ()
</span><span class="line">    # check data
</span><span class="line">    result_data = snk.data ()
</span><span class="line">    self.assertFloatTuplesAlmostEqual (expected_result, result_data,2)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Una vez modificado el archivo QA, se procede a ejecutarlo desde una terminal de Linux con el comando de <code>python</code>, cabe recordar que la terminal debe abrirse en <code>~/gr-Tu_modulo/python</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ python qa_dec2bin_py_ff.py 
</span><span class="line">.
</span><span class="line">----------------------------------------------------------------------
</span><span class="line">Ran 1 test in 0.002s
</span><span class="line">
</span><span class="line">OK</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Si el código funciona correctamente, se nos mostrará que no hubo error al momento de ejecutar.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jupyter, una aplicacion web para cómputo científico]]></title>
    <link href="http://viktorivan.github.io/blog/2015/10/22/jupyter-una-aplicacion-web-para-computo-cientifico/"/>
    <updated>2015-10-22T17:32:15-05:00</updated>
    <id>http://viktorivan.github.io/blog/2015/10/22/jupyter-una-aplicacion-web-para-computo-cientifico</id>
    <content type="html"><![CDATA[<p><em>Resumen.</em></p>

<p>Hoy en día, la enseñanza interactiva por medio de plataformas web de diversos lenguajes de programación es muy común, ya que esto permite que desde cualquier plataforma se puedan desarrollar prácticas y así mismo evaluarlas en tiempo real.</p>

<p>Una opción es <a href="http://www.jupyter.org">Jupyter Notebook</a>, esta plataforma web de código abierto permite trabajar con múltiples lenguajes de programación a través de libretas, permitiendo su fácil distribución entre los usuarios.</p>

<!-- more -->

<p><em>Introducción.</em></p>

<p><a href="http://www.jupyter.org">Jupyter Notebook</a> es una aplicación web para datos interactivos de ciencia y cómputo científico, que permite al autor crear documentos que combinen live-code con texto narrativo, ecuaciones, imágenes, video y visualizaciones. Estos documentos pueden compartirse por medio de <a href="http://www.github.com">GitHub</a>, <a href="http://www.dropbox.com">Dropbox</a> y el visor de Jupyter Notebook <a href="http://nbviewer.ipython.org/">nbviewer</a>. </p>

<p><em>Instalación.</em></p>

<p>Jupyter Notebook es una aplicación que requiere de python3 y se instala a través de pip3, para ello, desde una terminal se instalan los paquetes necesarios para su funcionamiento.</p>

<pre><code>$ sudo apt-get install build-essential python3-dev python3-pip
</code></pre>

<p>Una vez instalados los prerequisitos se procede a la instalación de Jupyter por medio de pip3</p>

<pre><code>$ sudo pip3 install jupyter
</code></pre>

<p>Para corroborar la correcta instalación de Jupyter Notebook, desde una terminal ejecutamos</p>

<pre><code>$ ipython notebook
</code></pre>

<p>Este comando abrirá una ventana del navegador de internet y se mostrará los archivos y folder de la raíz donde fue ejecutado el comando.</p>

<p><img src="http://viktorivan.github.io/downloads/images/jupyter.png" /></p>

<p>Una libreta disponible de Jupyter es <a href="https://github.com/unpingco/Python-for-Signal-Processing">Python for Signal Processing</a>, en ella se puede aprender procesamiento de señales en Python. La descarga de la libreta se realiza con los siguientes comandos</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git clone https://github.com/unpingco/Python-for-Signal-Processing.git
</span><span class="line">$ cd Python-for-Signal-Processing/
</span><span class="line">$ ipython notebook</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://viktorivan.github.io/downloads/images/pythonDSP.png" /></p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AX.25 en GNU Radio]]></title>
    <link href="http://viktorivan.github.io/blog/2015/10/21/ax-dot-25-en-gnu-radio/"/>
    <updated>2015-10-21T12:35:32-05:00</updated>
    <id>http://viktorivan.github.io/blog/2015/10/21/ax-dot-25-en-gnu-radio</id>
    <content type="html"><![CDATA[<p><em>Resumen.</em></p>

<p>Debido a la versatilidad que ofrece <a href="http://www.gnuradio.org">GNU Radio</a> para adaptarse a la mayoría de los protocolos de radio, es factible desarrollar proyectos independientes que puedan trabajar sobre estos protocolos usándolo como base. Un ejemplo de ello es el proyecto <a href="https://github.com/dl1ksv/gr-ax25">gr-ax25</a> para GNU Radio, donde a través de <a href="http://www.python.org">Python</a> desarrollan una interfaz gráfica que captura los paquetes transmitidos por este protocolo, entre ellos la ISS y APRS.</p>

<!-- more -->

<p><em>Introducción.</em></p>

<p>De acuerdo con <a href="http://www.ax25.net">AX25 Layer 2</a>, la comunidad de radio amateur expresó su necesidad y deseo de definir un protocolo que pueda aceptar y entregar datos de manera fiable sobre diversos enlaces de comunicación entre dos terminales de señalización. El protocolo de capa 2 AX.25 versión 2.2 ofrece este servicio, independientemente de la existencia de capas superiores.</p>

<p>Este protocolo trabaja suficientemente bien tanto en ambientes de radio amateur half-duplex o full-duplex. Así mismo también trabaja sobre conexiones directas entre estaciones de radio amateur portátiles o punto-multipunto.  </p>

<p><em>Instalación</em></p>

<p><em>Prerequisitos</em></p>

<p>gr-ax25 utiliza los proyectos <a href="https://github.com/dl1ksv/gr-display">gr-display</a> y <a href="https://github.com/dl1ksv/gr-fcdproplus">gr-fcdproplus</a> para el ejemplo que incluye en su distribución.</p>

<p><em>Instalación de gr-display</em></p>

<p>gr-display es una herramienta que permite desplegar texto en la interfaz gráfica de GRC.</p>

<p>Desde una terminal de linux se clona el repositorio de <a href="http://www.github.com">github</a> con git y se instala de acuerdo al procedimiento definido por GNU Radio para módulos out-of-tree.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git clone https://github.com/dl1ksv/gr-display.git
</span><span class="line">$ cd gr-display
</span><span class="line">$ mkdir build
</span><span class="line">$ cd build
</span><span class="line">$ cmake ../
</span><span class="line">$ make
</span><span class="line">$ sudo make install
</span><span class="line">$ sudo ldconfig</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Instalación de gr-fcdproplus</em></p>

<p>Esta herramienta permite utilizar los dispositivos de <a href="http://www.funcubedongle.com/">FUNcube Dongle</a> dentro del ambiente de GNU Radio.</p>

<p>Para instalar se  requiere de instalar algunos prerequisitos antes de descargar el repositorio desde github y proceder con a la instalación.</p>

<p>Instalando <a href="https://github.com/signal11/hidapi">HIDAPI</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo apt-get install libudev-dev libusb-1.0-0-dev libfox-1.6-dev autotools-dev autoconf automake libtool
</span><span class="line">$ git clone https://github.com/signal11/hidapi.git
</span><span class="line">$ cd hidapi
</span><span class="line">$ ./bootstrap
</span><span class="line">$ ./configure
</span><span class="line">$ make
</span><span class="line">$ sudo make install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Instalando gr-fcdproplus</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git clone https://github.com/dl1ksv/gr-fcdproplus.git
</span><span class="line">$ cd gr-fcdproplus
</span><span class="line">$ mkdir build
</span><span class="line">$ cmake ../
</span><span class="line">$ make
</span><span class="line">$ sudo make install
</span><span class="line">$ sudo ldconfig</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Instalación de gr-ax25</em></p>

<p>Una vez instalados los prerequisitos, se procede a instalar gr-ax25 desde una terminal.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git clone https://github.com/dl1ksv/gr-ax25.git
</span><span class="line">$ cd gr-ax25
</span><span class="line">$ mkdir build
</span><span class="line">$ cd build
</span><span class="line">$ cmake ../
</span><span class="line">$ make
</span><span class="line">$ sudo make install
</span><span class="line">$ sudo ldconfig</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Para la demostración, gr-ax25 incluye en <code>gr-ax25/apps</code> un archivo llamado <code>APRS.grc</code>, este diagrama de flujo de GRC contiene un bloque jerárquico llamado <code>detectmarkspace.grc</code>, para que <code>APRS.grc</code> detecte el bloque jerárqico, es necesario que dentro de <code>detectmarkspace.grc</code> se presione el botón que genera los archivos .py, una vez hecho esto se procede a correr el archivo <code>APRS.grc</code> con el dispositivo de FUNcube Dongle instalado.</p>

<p>Así mismo, se puede remplazar el bloque de FUNcube por uno de UHD para las tarjetas USRP, tal como se muestra a continuación.</p>

<p><img src="http://viktorivan.github.io/downloads/images/APRS.png" /></p>

<p>De esta forma queda instalado el protocolo AX.25 en una plataforma de GNU Radio. Una vez funcionando el archivo <code>APRS.grc</code>, se mostrará una interfaz gráfica que desplegará en una pestaña el espectro recibido y en otra el mensaje recibido por AX.25 de la ISS o por APRS, tal como se muestra a continuación.</p>

<p><img src="http://viktorivan.github.io/downloads/images/APRSspectral.png" />
<img src="http://viktorivan.github.io/downloads/images/APRSax25.png" /></p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cálculo de SNR ciego para OFDM]]></title>
    <link href="http://viktorivan.github.io/blog/2014/11/12/calculo-snr-ciego-para-ofdm/"/>
    <updated>2014-11-12T19:10:05-06:00</updated>
    <id>http://viktorivan.github.io/blog/2014/11/12/calculo-snr-ciego-para-ofdm</id>
    <content type="html"><![CDATA[<p><em>Resumen.</em></p>

<p>La relación señal a ruido (SNR) es la proporción existente entre la potencia de la señal recibida y la potencia de ruido en el receptor. De este modo, se realiza la medición de la tasa de bit erróneo (BER) de un sistema de comunicación digital ante la presencia de ruido y sin tener en cuenta el ancho de banda. Para el cálculo de SNR normalmente involucra el conocimiento previo en el receptor de la palabra transmitida y el canal. Por lo general se expresa en dB y es adimensional. </p>

<p>En un sistema convencional de Multiplexión por División de Frecuencias Ortogonales (OFDM), el cálculo de SNR se realiza utilizando símbolos de entrenamiento o subportadoras pilotos. Uno de los métodos para el cálculo de SNR involucra que la secuencia transmitida es conocida previamente por el receptor. Cuando el receptor no conoce esta secuencia de entrenamiento, el método de estimación es conocido como estimación ciega.</p>

<!-- more -->
<p><em>I. Introducción.</em></p>

<p>La estimación del SNR para un sistema de comunicación es importante, ya que con ello se valida el desempeño de un sistema para ciertas condiciones de canal. De este modo se puede interpretar que un sistema es eficiente a altas SNR o un deficiente a bajos SNR. Así mismo se puede utlizar para comparar el sistema con otros esquemas, dando a entender que tiene un mejor BER, tasa de símbolo erróneo (SER) o tasa de paquete erróneo (PER) que otros sistemas.</p>

<p>De acuerdo con la literatura, la estimación de SNR en el contexto de portadora única es un tema muy investigado, y muchos de estas técnicas se han adaptado a la modulación OFDM en forma directa. De acuerdo a algunos autores, es posible realizar la estimación ciega de SNR en un símbolo OFDM directamente en la carga util, sin necesidad de conocer los pilotos, cabecera o secuencias de entrenamiento<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. </p>

<p>A continuación se mostrará una técnica de estimación de SNR ciego, así mismo se propondrá un algoritmo donde se muestra los valores de estimación y reales de SNR de un sistema OFDM.</p>

<p><em>II. Modelo de sistema.</em></p>

<p>En el dominio de la frecuencia, el símbolo OFDM recibido $Y(j,k)$ en el tiempo $j$ y subportadora $k$ puede ser representado por:</p>

<p>$
\begin{equation}
Y(j,k)=X(j,k)H(j,k)+N(j,k),
\end{equation}
$ </p>

<p>donde $X(j,k)$ es el símbolo transmitido, $H(j,k)$ es el canal y $N(j,k)$ es el ruido. El SRN instantáneo $\Psi$ en el intervalo de tiempo $J$ en el grupo de subportadoras $K$ está definido por la variable aleatoria</p>

<p>$
\begin{equation}
\Psi = \dfrac{\sum_J\sum_K{\left| X(j,k)H(j,k) \right|^2}}{\sum_J\sum_K{\left| N(j,k) \right|^2}}
\end{equation}
$ </p>

<p>donde $N(j,k)$ se puede calcular por medio de la siguiente ecuación:</p>

<p>$
\begin{equation}
{\sum_J\sum_K{\left| N(j,k) \right|^2}}= {\sum_J\sum_K{\left| Y(j,k)-X(j,k)H(j,k) \right|^2}}
\end{equation}
$</p>

<p>Considerando que prácticamente todos los sistemas OFDM definen un conjunto de subportadoras $Q$ donde no se transmite señal alguna, por lo general al principio y final del símbolo, es posible suponer que los valores presentes en $Q$ después de la equalización de la carga util sea ruido.</p>

<p>$
\begin{equation}
Y(j,q)= N(j,q)
\end{equation}
$  </p>

<p>Asumiendo que </p>

<p>$
\begin{equation}
\sum_J\sum_Q{\left| N(j,q) \right|^2} &gt; 0
\end{equation}
$ </p>

<p>se puede definir la relación ruido a ruido (NNR) $\eta$ como sigue:</p>

<p>$
\begin{equation}
{\sum_J\sum_Q{\left| N(j,q) \right|^2}}= {\sum_J\sum_K{\left| N(j,k)\right|^2}}
\end{equation}
$</p>

<p>Si el ruido es blanco aditivo gausiano (AWGN), el cálculo de $\eta$ puede realizarse como:</p>

<p>$
\begin{equation}
\eta = Q / K
\end{equation}
$</p>

<p>De este modo, la estimación del SNR $\Psi$ se define por:</p>

<p>$
\begin{equation}
\Psi = \dfrac{\sum_J\sum_K{\left| Y(j,k) \right|^2}}{\sum_J\sum_Q{\left| Y(j,q) \right|^2}} \eta -1
\end{equation}
$ </p>

<p><em>II. Algoritmo de estimación de SNR ciego.</em></p>

<p>A continuación se muestra una simulación de un sistema DFTS-OFDM desarrollado en Python. El tamaño del símbolo es de 2048 subportadoras, de las cuales sólo 192 tienen datos y el resto son nulos. La estimación de SNR se realiza en el dominio de la frecuencia, por lo que al algoritmo se agrega después de la etapa de OFDM pero antes de DFTS. Así mismo en la gráfica se puede observar el valor de SNR estimado junto con el valor de SNR real. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (DFTSOFDMSNR.py)</span> <a href="http://viktorivan.github.io/downloads/code/DFTSOFDMSNR.py">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c">#Programa DFTS-OFDM</span>
</span><span class="line">
</span><span class="line"><span class="c">#Para ejecutar se requiere de scipy y matplotlib</span>
</span><span class="line"><span class="c">#Desde una terminal ejecute: </span>
</span><span class="line"><span class="c"># sudo apt-get install python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose python-tk</span>
</span><span class="line"><span class="c">#La simulacion la puede correr desde una terminal</span>
</span><span class="line"><span class="c"># python DFTSOFDM.py</span>
</span><span class="line">
</span><span class="line"><span class="c">#Carga de bibliotecas</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">scipy</span> <span class="kn">as</span> <span class="nn">sp</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">matplotlib</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class="line">
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">set_printoptions</span><span class="p">(</span><span class="n">precision</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span><span class="n">suppress</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">threshold</span><span class="o">=</span><span class="s">&#39;nan&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#Datos de inicializacion</span>
</span><span class="line"><span class="c">#print &quot;Inicializando parametros de simulacion&quot;</span>
</span><span class="line"><span class="n">ebno</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="n">taps</span> <span class="o">=</span> <span class="mf">1.</span>
</span><span class="line"><span class="n">paqsnr</span> <span class="o">=</span> <span class="mf">1000.</span>
</span><span class="line"><span class="n">paq</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">ebno</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">paqsnr</span>
</span><span class="line"><span class="n">datasize</span> <span class="o">=</span> <span class="mi">768</span>
</span><span class="line"><span class="n">gx</span> <span class="o">=</span> <span class="s">&quot;04C11DB7&quot;</span>
</span><span class="line"><span class="n">polsize</span> <span class="o">=</span> <span class="mi">32</span>
</span><span class="line"><span class="n">dfts</span> <span class="o">=</span> <span class="mi">192</span>
</span><span class="line"><span class="n">ofdm</span> <span class="o">=</span> <span class="mi">2048</span>
</span><span class="line"><span class="n">cp</span> <span class="o">=</span> <span class="n">ofdm</span><span class="o">/</span><span class="mi">4</span>
</span><span class="line"><span class="n">pilot</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class="line"><span class="n">pilot_carriers</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">61</span><span class="p">,</span><span class="o">-</span><span class="mi">31</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">61</span><span class="p">]</span>
</span><span class="line"><span class="n">dfts_carriers</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="p">((</span><span class="n">dfts</span><span class="o">+</span><span class="n">pilot</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,(</span><span class="n">dfts</span><span class="o">+</span><span class="n">pilot</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="k">if</span> <span class="n">x</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pilot_carriers</span><span class="p">]</span>
</span><span class="line"><span class="n">zero_carriers</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">range</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1950</span><span class="p">))</span> <span class="k">if</span> <span class="n">x</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">99</span><span class="p">)])</span>
</span><span class="line">
</span><span class="line"><span class="c">### TRANSMISOR ###</span>
</span><span class="line">
</span><span class="line"><span class="c">#Generacion de datos aleatorios</span>
</span><span class="line"><span class="c">#print &quot;Generando bits de datos aleatorios&quot;</span>
</span><span class="line"><span class="n">datab</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">datasize</span><span class="o">-</span><span class="n">polsize</span><span class="p">)</span><span class="o">*</span><span class="n">paq</span><span class="p">)</span>
</span><span class="line"><span class="n">datab</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datab</span><span class="p">,(</span><span class="n">paq</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c">#Etapa CRC</span>
</span><span class="line"><span class="c">#print &quot;Calculando CRC&quot;</span>
</span><span class="line"><span class="n">pol</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">bin</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">gx</span><span class="p">),</span> <span class="mi">16</span><span class="p">))[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="n">polsize</span><span class="p">)</span><span class="o">.</span><span class="n">rjust</span><span class="p">(</span><span class="n">polsize</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="s">&#39;1&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">x</span><span class="p">])</span>
</span><span class="line"><span class="n">datazeros</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">datab</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">polsize</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">int</span><span class="p">)),</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="n">datacrc</span> <span class="o">=</span> <span class="n">datazeros</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">#Calculo CRC</span>
</span><span class="line"><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datazeros</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datazeros</span><span class="p">)[</span><span class="mi">1</span><span class="p">]):</span>
</span><span class="line">		<span class="k">if</span> <span class="n">datazeros</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">i</span><span class="o">+</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datazeros</span><span class="p">)[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class="line">			<span class="n">datazeros</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">datazeros</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">pol</span>
</span><span class="line">
</span><span class="line"><span class="c">#Datos con CRC</span>
</span><span class="line"><span class="n">datacrc</span> <span class="o">=</span> <span class="n">datacrc</span><span class="o">|</span><span class="n">datazeros</span>
</span><span class="line">
</span><span class="line"><span class="c">#Modulador 16-QAM</span>
</span><span class="line"><span class="c">#print &quot;Datos en el modulador digital&quot;</span>
</span><span class="line"><span class="n">dataqam</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datacrc</span><span class="p">,(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</span><span class="line"><span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line"><span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">datam</span> <span class="o">=</span> <span class="p">(</span><span class="n">dataqam</span><span class="p">[:,</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">dataqam</span><span class="p">[:,</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataqam</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">dataqam</span><span class="p">[:,</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="mi">1j</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#DFTS</span>
</span><span class="line"><span class="c">#print &quot;Aplicando DFTS&quot;</span>
</span><span class="line"><span class="n">datadfts</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datam</span><span class="p">,(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">dfts</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datadfts</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">datadfts</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datadfts</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">datadfts</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datadfts</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class="line">	
</span><span class="line"><span class="c">#OFDM</span>
</span><span class="line"><span class="c">#print &quot;En el transmisor OFDM&quot;</span>
</span><span class="line"><span class="c">#Generacion de ceros y pilotos</span>
</span><span class="line"><span class="n">datapilot</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="n">paq</span><span class="o">*</span><span class="n">pilot</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">,(</span><span class="n">paq</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line"><span class="n">dataofdm</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">ofdm</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">complex</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#Asignacion de portadoras</span>
</span><span class="line"><span class="n">dataofdm</span><span class="p">[:,</span><span class="n">pilot_carriers</span><span class="p">]</span> <span class="o">=</span> <span class="n">datapilot</span>
</span><span class="line"><span class="n">dataofdm</span><span class="p">[:,</span><span class="n">dfts_carriers</span><span class="p">]</span> <span class="o">=</span> <span class="n">datadfts</span>
</span><span class="line">
</span><span class="line"><span class="c">#IFFT</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">dataofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="c">#Prefijo ciclico</span>
</span><span class="line"><span class="n">dataofdm</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">dataofdm</span><span class="p">[:,</span><span class="n">ofdm</span><span class="o">-</span><span class="n">cp</span><span class="p">:</span><span class="n">ofdm</span><span class="p">],</span><span class="n">dataofdm</span><span class="p">),</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">### CANAL ###</span>
</span><span class="line"><span class="c">#Multitrayectoria</span>
</span><span class="line"><span class="c">#print &quot;Agregando multitrayectorias del canal&quot;</span>
</span><span class="line"><span class="n">h</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">taps</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">taps</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">taps</span><span class="p">)</span><span class="o">*</span><span class="mi">1j</span><span class="p">)</span>
</span><span class="line"><span class="n">h</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="n">np</span><span class="o">.</span><span class="n">tile</span><span class="p">(</span><span class="mf">1.</span><span class="o">/</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">taps</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">])),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">taps</span><span class="p">))</span><span class="o">*</span><span class="n">h</span>
</span><span class="line"><span class="n">H</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">complex</span><span class="p">)</span>
</span><span class="line"><span class="n">datacanal</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">complex</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">H</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">)</span>
</span><span class="line">	<span class="n">datacanal</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">datacanal</span> <span class="o">=</span> <span class="n">datacanal</span><span class="o">*</span><span class="n">H</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">datacanal</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">datacanal</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="c">#AWGN</span>
</span><span class="line"><span class="c">#print &quot;Sumando AWGN a los datos&quot;</span>
</span><span class="line"><span class="n">snr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="p">(</span><span class="n">ebno</span><span class="o">/</span><span class="mf">10.</span><span class="p">),</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">ebno</span><span class="p">)[</span><span class="mi">0</span><span class="p">]),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">])))</span>
</span><span class="line"><span class="n">awgn</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="mi">1j</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="n">snr</span><span class="p">)</span>
</span><span class="line"><span class="n">datacanal</span> <span class="o">=</span> <span class="n">datacanal</span> <span class="o">+</span> <span class="n">awgn</span>
</span><span class="line">
</span><span class="line"><span class="c">### RECEPTOR ###</span>
</span><span class="line"><span class="c">#print &quot;En el receptor OFDM&quot;</span>
</span><span class="line"><span class="c">#Remueve el prefijo ciclico</span>
</span><span class="line"><span class="n">dataiofdm</span> <span class="o">=</span> <span class="n">datacanal</span><span class="p">[:,</span><span class="n">cp</span><span class="p">:</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">#FFT</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="c">#Ecualizador</span>
</span><span class="line"><span class="c">#print &quot;Ecualizando los datos recibidos&quot;</span>
</span><span class="line"><span class="n">dataiofdm</span> <span class="o">=</span> <span class="n">dataiofdm</span><span class="o">/</span><span class="n">H</span><span class="p">[:,</span><span class="n">cp</span><span class="p">:</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c">#Calculo de SNR estimado</span>
</span><span class="line">
</span><span class="line"><span class="n">snrest</span> <span class="o">=</span> <span class="mi">10</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">log10</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">square</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">dataiofdm</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">paqsnr</span><span class="p">,</span><span class="n">ofdm</span><span class="p">)))),</span><span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">square</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">[:][:,</span><span class="n">zero_carriers</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">paqsnr</span><span class="p">,</span><span class="n">ofdm</span><span class="o">-</span><span class="n">dfts</span><span class="o">-</span><span class="n">pilot</span><span class="p">)))),</span><span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">((</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">ofdm</span><span class="o">-</span><span class="n">dfts</span><span class="o">-</span><span class="n">pilot</span><span class="p">)</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">ofdm</span><span class="p">)))</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">dataiofdm</span> <span class="o">=</span> <span class="n">dataiofdm</span><span class="p">[:,</span><span class="n">dfts_carriers</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">#IDFTS</span>
</span><span class="line"><span class="c">#print &quot;Calculando IDFTS&quot;</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="c">#Demodulador 16-QAM</span>
</span><span class="line"><span class="c">#print &quot;Demodulador digital&quot;</span>
</span><span class="line"><span class="n">datadem</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">,(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="n">datadem</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">np</span><span class="o">.</span><span class="n">real</span><span class="p">(</span><span class="n">datadem</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">imag</span><span class="p">(</span><span class="n">datadem</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">real</span><span class="p">(</span><span class="n">datadem</span><span class="p">))</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">imag</span><span class="p">(</span><span class="n">datadem</span><span class="p">))</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#Recepcion para calculo de CRC</span>
</span><span class="line"><span class="c">#print &quot;Calculo de CRC Check&quot;</span>
</span><span class="line"><span class="n">datarcrc</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datadem</span><span class="p">,(</span><span class="n">paq</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line"><span class="n">datarx</span> <span class="o">=</span> <span class="n">datarcrc</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">#Calculo de CRC</span>
</span><span class="line"><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">)[</span><span class="mi">1</span><span class="p">]):</span>
</span><span class="line">		<span class="k">if</span> <span class="n">datarcrc</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">i</span><span class="o">+</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">)[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class="line">			<span class="n">datarcrc</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">datarcrc</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">sp</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">pol</span>
</span><span class="line">
</span><span class="line"><span class="c">#Eliminacion del CRC y paquetes incorrectos</span>
</span><span class="line"><span class="n">datar</span> <span class="o">=</span> <span class="n">datarx</span><span class="p">[:,</span><span class="mi">0</span><span class="p">:</span><span class="n">datasize</span><span class="o">-</span><span class="n">polsize</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">#Contador de paquetes correctos de acuerdo al CRC</span>
</span><span class="line"><span class="c">#print &quot;Calculando PER&quot;</span>
</span><span class="line"><span class="n">per</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(((</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">1</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">paqsnr</span><span class="p">)),</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">paqsnr</span>
</span><span class="line">
</span><span class="line"><span class="c">#Comparacion entre datab y datar y promedia errores de acuerdo a iteraciones</span>
</span><span class="line"><span class="c">#print &quot;Calculando BER&quot;</span>
</span><span class="line"><span class="n">ber</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">((</span><span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">datar</span><span class="o">-</span><span class="n">datab</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">paqsnr</span><span class="p">))),</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">paqsnr</span><span class="o">*</span><span class="p">(</span><span class="n">datasize</span><span class="o">-</span><span class="n">polsize</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;SNR %BER %PER SNRest&quot;</span>
</span><span class="line"><span class="k">print</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">([</span><span class="n">ebno</span><span class="p">,</span><span class="n">ber</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="n">per</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="n">snrest</span><span class="p">])</span><span class="o">.</span><span class="n">T</span>
</span><span class="line">
</span><span class="line"><span class="n">leg1</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;BER&quot;</span><span class="p">,</span> <span class="s">&quot;PER&quot;</span><span class="p">]</span>
</span><span class="line"><span class="n">leg2</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;SNR est&quot;</span><span class="p">,</span> <span class="s">&quot;SNR real&quot;</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">fig</span><span class="p">,</span> <span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
</span><span class="line"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&#39;Bit Error Rate For A DFTS-OFDM System&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">ax1</span><span class="o">.</span><span class="n">set_color_cycle</span><span class="p">([</span><span class="s">&#39;r&#39;</span><span class="p">,</span> <span class="s">&#39;m&#39;</span><span class="p">])</span>
</span><span class="line"><span class="n">ax1</span><span class="o">.</span><span class="n">semilogy</span><span class="p">(</span><span class="n">ebno</span><span class="p">,</span><span class="n">ber</span><span class="p">,</span><span class="s">&#39;-*&#39;</span><span class="p">,</span><span class="n">ebno</span><span class="p">,</span><span class="n">per</span><span class="p">,</span><span class="s">&#39;-+&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">ax1</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">&#39;SNR&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">ax1</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">leg1</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">ax2</span> <span class="o">=</span> <span class="n">ax1</span><span class="o">.</span><span class="n">twinx</span><span class="p">()</span>
</span><span class="line"><span class="n">ax2</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ebno</span><span class="p">,</span><span class="n">snrest</span><span class="p">,</span><span class="s">&#39;v&#39;</span><span class="p">,</span><span class="n">ebno</span><span class="p">,</span><span class="n">ebno</span><span class="p">,</span><span class="s">&#39;--&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">ax2</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">leg2</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://viktorivan.github.io/downloads/images/dftsofdmsnr.png" /></p>

<p>Referencias</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>LI, Yunxin. Blind SNR estimation of OFDM signals. En 2010 International Conference on Microwave and Millimeter Wave Technology. 2010. p. 1792-1796.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SciPy como alternativa a Matlab]]></title>
    <link href="http://viktorivan.github.io/blog/2014/06/13/scipy-como-alternativa-a-matlab/"/>
    <updated>2014-06-13T09:38:58-05:00</updated>
    <id>http://viktorivan.github.io/blog/2014/06/13/scipy-como-alternativa-a-matlab</id>
    <content type="html"><![CDATA[<p><em>Resumen</em></p>

<p>El uso de herramientas de programación como <a href="http://www.mathworks.com/">Matlab</a> permiten que el desarrollo de simulaciones se realice de una manera muy práctica, dejando que el programador sólo se enfoque a solucionar el problema y no batalle en la implementación del algoritmo. Matlab es un lenguaje de alto nivel que permite que usuarios con conocimientos básicos de programación, puedan implementar cualquier algoritmo de una manera simple y rápida, así mismo, cuenta con múltiples herramientas gráficas que ayudan en la interpretación de los resultados. Una alternativa para el uso de herramientas enfocadas a la investigación es <a href="http://www.scipy.org">SciPy</a> o <code>Python Científico</code>. SciPy es una biblioteca de <a href="http://www.python.org">Python</a> que permite realizar operaciones especializadas en un lenguaje de programación convencional, facilitando así el desarrollo de algoritmos y optimizando los tiempos de ejecución, de manera similar a Matlab. </p>

<!-- more -->

<p><em>Justificación</em></p>

<p>Una de las características principales de Matlab es el manejo de Matrices, de hecho, su nombre se deriva de la palabra <code>Laboratorio de Matrices</code>. El uso de matrices y vectores permite manejar estructuras de datos mas complejas y realizar operaciones matemáticas que en un lenguaje de programación convencional requeriría varias líneas de código, por ejemplo, una simple multiplicación de matrices, donde en Matlab se realiza por un comando A*B, en otro lenguaje tendríamos que realizar (a groso modo) un ciclo For que recorra cada renglón de la matriz A y la multiplique por la columna de la matriz B y la suma de cada multiplicación colocarla en un nuevo arreglo en la posición que le corresponde.</p>

<p>Aunque Matlab es una herramienta poderosa y popular, esta no es de libre distribución debido a que su código es propietario; por lo que es limitado a la disponibilidad y tipo de licencias con que se disponga en el centro de trabajo. Una alternativa viable puede ser el uso de herramientas de código abierto, existen diversos proyectos que son compatibles incluso a nivel de código y manejo de archivos y datos, tal es el caso de <a href="http://www.octave.org">Octave</a>, que es un proyecto donde los archivos desarrollados en Matlab funcionan sin tener que cambiar el lenguaje en que fue programado, aunque existen algunas funciones especializadas no estan implementadas en Octave. </p>

<p>Aún así, la tendencia en algunos lenguajes de programación de libre distribución es ser multipropósitos, esto se logra con la ayuda de bibliotecas especializadas; Por ejemplo, Python, a través de SciPy, puede manipular datos en forma vectorial o matricial permitiendo una implementación sencilla del algoritmo y el cálculo de las operaciones matemáticas, ya que esta incluye funciones que van desde matemáticas básica hasta avanzada.</p>

<p>SciPy o <code>Scientific Python</code> es una biblioteca de Python, que junto a Numpy y <a href="http://www.matplotlib.org">MatPlotLib</a>, proporcionan las herramientas necesarias para trabajar en el ambiente de la investigación y educación e incluso en el de desarrollo. En el caso de las telecomunicaciones, permite hacer transmisores OFDM con la ayuda de la función de transformadas de Fourier (<code>fft</code>, <code>ifft</code>), manejos de datos complejos y operaciones entre ellos (<code>absolute</code>, <code>norm</code>, <code>sum</code>) y generación de datos aleatorios con una distribución específica (<code>randn</code> para una distribución normal) o matrices de unos y ceros (<code>ones</code>, <code>zeros</code>). SciPy ofrece una <a href="http://wiki.scipy.org/NumPy_for_Matlab_Users">wiki</a> con una lista de comandos básicos de Matlab y su equivalente en SciPy.</p>

<p>MatPlotLib es una herramienta visual que permite mostrar los datos calculados en las simulaciones en diferentes tipos de gráficas, una muy utilizada en telecomunicaciones para el cálculo de BER es <code>semilogy</code>.</p>

<p>La instalación de SciPy en una distribución Linux basada en Debian/Ubuntu se realiza a través de la terminal de comandos. </p>

<pre><code>sudo apt-get install python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose python-tk 
</code></pre>

<p>Un Ejemplo de un código desarrollado en Python con SciPy se muestra a continuación:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (DFTSOFDM.py)</span> <a href="http://viktorivan.github.io/downloads/code/DFTSOFDM.py">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c">#Programa DFTS-OFDM</span>
</span><span class="line">
</span><span class="line"><span class="c">#Para ejecutar se requiere de scipy y matplotlib</span>
</span><span class="line"><span class="c">#Desde una terminal ejecute: </span>
</span><span class="line"><span class="c"># sudo apt-get install python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose python-tk</span>
</span><span class="line"><span class="c">#La simulacion la puede correr desde una terminal</span>
</span><span class="line"><span class="c"># python DFTSOFDM.py</span>
</span><span class="line">
</span><span class="line"><span class="c">#Carga de bibliotecas</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">scipy</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span>
</span><span class="line">
</span><span class="line"><span class="n">numpy</span><span class="o">.</span><span class="n">set_printoptions</span><span class="p">(</span><span class="n">precision</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span><span class="n">suppress</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#Datos de inicializacion</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Inicializando parametros de simulacion&quot;</span>
</span><span class="line"><span class="n">snr</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
</span><span class="line"><span class="n">taps</span> <span class="o">=</span> <span class="mf">1.</span>
</span><span class="line"><span class="n">itera</span> <span class="o">=</span> <span class="mf">1000.</span>
</span><span class="line"><span class="n">paq</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">snr</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">itera</span>
</span><span class="line"><span class="n">datasize</span> <span class="o">=</span> <span class="mi">768</span>
</span><span class="line"><span class="n">gx</span> <span class="o">=</span> <span class="s">&quot;04C11DB7&quot;</span>
</span><span class="line"><span class="n">polsize</span> <span class="o">=</span> <span class="mi">32</span>
</span><span class="line"><span class="n">dfts</span> <span class="o">=</span> <span class="mi">192</span>
</span><span class="line"><span class="n">ofdm</span> <span class="o">=</span> <span class="mi">2048</span>
</span><span class="line"><span class="n">cp</span> <span class="o">=</span> <span class="n">ofdm</span><span class="o">/</span><span class="mi">4</span>
</span><span class="line"><span class="n">pilot</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class="line"><span class="n">pilot_carriers</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">61</span><span class="p">,</span><span class="o">-</span><span class="mi">31</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">61</span><span class="p">]</span>
</span><span class="line"><span class="n">dfts_carriers</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="p">((</span><span class="n">dfts</span><span class="o">+</span><span class="n">pilot</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,(</span><span class="n">dfts</span><span class="o">+</span><span class="n">pilot</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="k">if</span> <span class="n">x</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pilot_carriers</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c">### TRANSMISOR ###</span>
</span><span class="line">
</span><span class="line"><span class="c">#Generacion de datos aleatorios</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Generando bits de datos aleatorios&quot;</span>
</span><span class="line"><span class="n">datab</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">datasize</span><span class="o">-</span><span class="n">polsize</span><span class="p">)</span><span class="o">*</span><span class="n">paq</span><span class="p">)</span>
</span><span class="line"><span class="n">datab</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datab</span><span class="p">,(</span><span class="n">paq</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c">#Etapa CRC</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Calculando CRC&quot;</span>
</span><span class="line"><span class="n">pol</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">bin</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">gx</span><span class="p">),</span> <span class="mi">16</span><span class="p">))[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="n">polsize</span><span class="p">)</span><span class="o">.</span><span class="n">rjust</span><span class="p">(</span><span class="n">polsize</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="s">&#39;1&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">x</span><span class="p">])</span>
</span><span class="line"><span class="n">datazeros</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">datab</span><span class="p">,</span><span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">polsize</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">numpy</span><span class="o">.</span><span class="n">int</span><span class="p">)),</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="n">datacrc</span> <span class="o">=</span> <span class="n">datazeros</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">#Calculo CRC</span>
</span><span class="line"><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datazeros</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datazeros</span><span class="p">)[</span><span class="mi">1</span><span class="p">]):</span>
</span><span class="line">		<span class="k">if</span> <span class="n">datazeros</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">i</span><span class="o">+</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datazeros</span><span class="p">)[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class="line">			<span class="n">datazeros</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">datazeros</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">pol</span>
</span><span class="line">
</span><span class="line"><span class="c">#Datos con CRC</span>
</span><span class="line"><span class="n">datacrc</span> <span class="o">=</span> <span class="n">datacrc</span><span class="o">|</span><span class="n">datazeros</span>
</span><span class="line">
</span><span class="line"><span class="c">#Modulador 16-QAM</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Datos en el modulador digital&quot;</span>
</span><span class="line"><span class="n">dataqam</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datacrc</span><span class="p">,(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</span><span class="line"><span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line"><span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">datam</span> <span class="o">=</span> <span class="n">dataqam</span><span class="p">[:,</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">dataqam</span><span class="p">[:,</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataqam</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">dataqam</span><span class="p">[:,</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="mi">1j</span>
</span><span class="line">
</span><span class="line"><span class="c">#DFTS</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Aplicando DFTS&quot;</span>
</span><span class="line"><span class="n">datadfts</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datam</span><span class="p">,(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">dfts</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datadfts</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">datadfts</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datadfts</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">datadfts</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datadfts</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="c">#OFDM</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;En el transmisor OFDM&quot;</span>
</span><span class="line"><span class="c">#Generacion de ceros y pilotos</span>
</span><span class="line"><span class="n">datapilot</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="n">paq</span><span class="o">*</span><span class="n">pilot</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">,(</span><span class="n">paq</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line"><span class="n">dataofdm</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">ofdm</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">numpy</span><span class="o">.</span><span class="n">complex</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#Asignacion de portadoras</span>
</span><span class="line"><span class="n">dataofdm</span><span class="p">[:,</span><span class="n">pilot_carriers</span><span class="p">]</span> <span class="o">=</span> <span class="n">datapilot</span>
</span><span class="line"><span class="n">dataofdm</span><span class="p">[:,</span><span class="n">dfts_carriers</span><span class="p">]</span> <span class="o">=</span> <span class="n">datadfts</span>
</span><span class="line">
</span><span class="line"><span class="c">#IFFT</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">dataofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="c">#Prefijo ciclico</span>
</span><span class="line"><span class="n">dataofdm</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">dataofdm</span><span class="p">[:,</span><span class="n">ofdm</span><span class="o">-</span><span class="n">cp</span><span class="p">:</span><span class="n">ofdm</span><span class="p">],</span><span class="n">dataofdm</span><span class="p">),</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">### CANAL ###</span>
</span><span class="line"><span class="c">#Multitrayectoria</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Agregando multitrayectorias del canal&quot;</span>
</span><span class="line"><span class="n">h</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="n">numpy</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">taps</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">taps</span><span class="p">)</span> <span class="o">+</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">taps</span><span class="p">)</span><span class="o">*</span><span class="mi">1j</span><span class="p">)</span>
</span><span class="line"><span class="n">h</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="n">numpy</span><span class="o">.</span><span class="n">tile</span><span class="p">(</span><span class="mf">1.</span><span class="o">/</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">taps</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">])),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">taps</span><span class="p">))</span><span class="o">*</span><span class="n">h</span>
</span><span class="line"><span class="n">H</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">numpy</span><span class="o">.</span><span class="n">complex</span><span class="p">)</span>
</span><span class="line"><span class="n">datacanal</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">numpy</span><span class="o">.</span><span class="n">complex</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">H</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="n">numpy</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">)</span>
</span><span class="line">	<span class="n">datacanal</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">datacanal</span> <span class="o">=</span> <span class="n">datacanal</span><span class="o">*</span><span class="n">H</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">datacanal</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">datacanal</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="c">#AWGN</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Sumando AWGN a los datos&quot;</span>
</span><span class="line"><span class="n">ebno</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="p">(</span><span class="n">snr</span><span class="o">/</span><span class="mf">10.</span><span class="p">),</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">snr</span><span class="p">)[</span><span class="mi">0</span><span class="p">]),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">])))</span>
</span><span class="line"><span class="n">awgn</span> <span class="o">=</span> <span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="mi">1j</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="n">ebno</span><span class="p">)</span>
</span><span class="line"><span class="n">datacanal</span> <span class="o">=</span> <span class="n">datacanal</span> <span class="o">+</span> <span class="n">awgn</span>
</span><span class="line">
</span><span class="line"><span class="c">### RECEPTOR ###</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;En el receptor OFDM&quot;</span>
</span><span class="line"><span class="c">#Remueve el prefijo ciclico</span>
</span><span class="line"><span class="n">dataiofdm</span> <span class="o">=</span> <span class="n">datacanal</span><span class="p">[:,</span><span class="n">cp</span><span class="p">:</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">#FFT</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="c">#Ecualizador</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Ecualizando los datos recibidos&quot;</span>
</span><span class="line"><span class="n">dataiofdm</span> <span class="o">=</span> <span class="n">dataiofdm</span><span class="p">[:,</span><span class="n">dfts_carriers</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span><span class="o">/</span><span class="n">H</span><span class="p">[:,</span><span class="n">dfts_carriers</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c">#IDFTS</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Calculando IDFTS&quot;</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="c">#Demodulador 16-QAM</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Demodulador digital&quot;</span>
</span><span class="line"><span class="n">datadem</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">,(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line"><span class="n">datadem</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">numpy</span><span class="o">.</span><span class="n">real</span><span class="p">(</span><span class="n">datadem</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">,</span><span class="n">numpy</span><span class="o">.</span><span class="n">imag</span><span class="p">(</span><span class="n">datadem</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">,</span><span class="n">numpy</span><span class="o">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">real</span><span class="p">(</span><span class="n">datadem</span><span class="p">))</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">,</span><span class="n">numpy</span><span class="o">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">imag</span><span class="p">(</span><span class="n">datadem</span><span class="p">))</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#Recepcion para calculo de CRC</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Calculo de CRC Check&quot;</span>
</span><span class="line"><span class="n">datarcrc</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datadem</span><span class="p">,(</span><span class="n">paq</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line"><span class="n">datarx</span> <span class="o">=</span> <span class="n">datarcrc</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">#Calculo de CRC</span>
</span><span class="line"><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">)[</span><span class="mi">1</span><span class="p">]):</span>
</span><span class="line">		<span class="k">if</span> <span class="n">datarcrc</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">i</span><span class="o">+</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">)[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class="line">			<span class="n">datarcrc</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">datarcrc</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">pol</span>
</span><span class="line">
</span><span class="line"><span class="c">#Eliminacion del CRC y paquetes incorrectos</span>
</span><span class="line"><span class="n">datar</span> <span class="o">=</span> <span class="n">datarx</span><span class="p">[:,</span><span class="mi">0</span><span class="p">:</span><span class="n">datasize</span><span class="o">-</span><span class="n">polsize</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">#Contador de paquetes correctos de acuerdo al CRC</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Calculando PER&quot;</span>
</span><span class="line"><span class="n">per</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(((</span><span class="n">numpy</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">1</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">itera</span><span class="p">)),</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">itera</span>
</span><span class="line">
</span><span class="line"><span class="c">#Comparacion entre datab y datar y promedia errores de acuerdo a iteraciones</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Calculando BER&quot;</span>
</span><span class="line"><span class="n">ber</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">sum</span><span class="p">((</span><span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">datar</span><span class="o">-</span><span class="n">datab</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">itera</span><span class="p">))),</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">itera</span><span class="o">*</span><span class="p">(</span><span class="n">datasize</span><span class="o">-</span><span class="n">polsize</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;SNR %BER %PER&quot;</span>
</span><span class="line"><span class="k">print</span> <span class="n">numpy</span><span class="o">.</span><span class="n">vstack</span><span class="p">([</span><span class="n">snr</span><span class="p">,</span><span class="n">ber</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="n">per</span><span class="o">*</span><span class="mi">100</span><span class="p">])</span><span class="o">.</span><span class="n">T</span>
</span><span class="line"><span class="n">matplotlib</span><span class="o">.</span><span class="n">pyplot</span><span class="o">.</span><span class="n">semilogy</span><span class="p">(</span><span class="n">snr</span><span class="p">,</span><span class="n">per</span><span class="p">,</span><span class="n">snr</span><span class="p">,</span><span class="n">ber</span><span class="p">)</span>
</span><span class="line"><span class="n">matplotlib</span><span class="o">.</span><span class="n">pyplot</span><span class="o">.</span><span class="n">legend</span><span class="p">([</span><span class="s">&quot;PER&quot;</span><span class="p">,</span><span class="s">&quot;BER&quot;</span><span class="p">])</span>
</span><span class="line"><span class="n">matplotlib</span><span class="o">.</span><span class="n">pyplot</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redes cooperativas DFTS-OFDM con GNU Radio]]></title>
    <link href="http://viktorivan.github.io/blog/2014/05/19/redes-cooperativas-dfts-ofdm-con-gnu-radio/"/>
    <updated>2014-05-19T16:44:59-05:00</updated>
    <id>http://viktorivan.github.io/blog/2014/05/19/redes-cooperativas-dfts-ofdm-con-gnu-radio</id>
    <content type="html"><![CDATA[<p><em>Resumen.</em></p>

<p>El desarrollo de nuevos sistemas de comunicación, en el ambiente académico, normalmente queda en proyectos de software, limitados a resultados de simulación sin poder dar el paso a la implementación del mismo. Es muy bien sabido que los problemas de software no son lo mismos que los problemas que pueden presentarse en las plataformas de hardware, por lo que el uso de herramientas de SDR (Software Defined Radio) como <a href="http://www.gnuradio.org">GNU Radio</a> en combinación con las tarjetas <a href="http://www.ettus.com">USRP</a> (Universal Software Radio Peripheral) facilitan el dar ese paso de la simulación en plataformas de software a la emulación en plataformas de hardware de una forma transparente.</p>

<p>A continuación se muestra el desarrollo de una plataforma de comunicación inalámbrica basada en DFTS-OFDM (Direct Fourier Transform Spread - Orthogonal Frequency Division Modulation) en combinación con protocolos de relay en una implementación de una antena y dos saltos.</p>

<!-- more -->

<p><em>Introducción.</em></p>

<p><em>Comunicaciones cooperativas</em></p>

<p>Las comunicaciones cooperativas consiste en una técnica donde los dispositivos de comunicación presentes en un área pueden ayudarse entre ellos. La implementación de redes de relays permite a los dispositivos sin capacidad MIMO (Multiple-Input Multiple-Output) aprovechar las ventajas de una transmisión en un canal MIMO a través de tecnologías como MIMO virtual, distribuido o cooperativo, ya que estos dispositivos sólo cuentan con una antena. En este tipo de tecnologías permite que nodos de relay fijos o móviles formen parte de un arreglo de antenas mayor, donde en conjunto presentarán una ganancia de diversidad, aunque ésta no será mayor a la ganancia de diversidad de un enlace MIMO punto a punto.</p>

<p>La forma como es procesada la señal recibida en el nodo relay, ya sea sólo amplificando y reenviando la señal recibida o incluso decodificando o ecualizando y reenviando la señal recibida, define el protocol de relay que es utilizado en la comunicación cooperativa.</p>

<p><em>Protocolos de Relay.</em></p>

<p>Las comunicaciones cooperativas generan trayectorias independientes entre el usuario y la estación base introduciendo un canal relay. El canal relay puede considerarse como un canal auxiliar del canal directo entre la fuente y el destino. El nodo relay se ubica a varias longitudes de onda de distancia de la fuente, lo que garantiza que el canal relay tenga un desvanecimiento independiente del canal directo, lo que eventualmente permitirá tener un canal MIMO de rango completo.</p>

<p>El esquema de transmisión de un protocolo de cooperación se divide en dos fases para evitar interferencias.</p>

<p>Fase 1: Una fuente envía su información al destino y la información también es recibida por el relay al mismo tiempo.
Fase 2: El relay envía su información al destino. </p>

<p>Adicionalmente puede considerarse que en la Fase 1 el destino no recibe información, solo el relay.</p>

<p><em>Amplifica y envía.</em></p>

<p>En este protocolo, el relay amplifica la señal de la fuente y envía esta a su destino de una forma ideal para ecualizar el efecto del canal entre la fuente y el relay. El relay hace esto simplemente escalando la señal recibida por un factor que es inversamente proporcional a la potencia recibida.   </p>

<p><em>Decodifica y envía.</em></p>

<p>Este protocolo consiste en que el nodo relay decodifique la señal recibida, la vuelva a codificar y entonces retransmita esta nueva señal al destino. Si la señal en el relay es incorrecta, esta puede ser reenviada al destino y su decodificación no tendría sentido. </p>

<p><em>Ecualiza y envía.</em></p>

<p>En este protocolo, el relay recibe el símbolo de la fuente, estima el canal y elimina los efectos del canal de la Fase 1. Una vez hecho esto, el símbolo sin efectos del canal es transmitido a su destino.</p>

<p><em>DFTS-OFDM</em></p>

<p>Para disminuir el PAPR, 3GPP LTE-Advanced propone usar en el enlace de subida una tecnología conocida como SC-FDMA (Single Carrier - Frequency Division Medium Access) o DFTS-OFDM, esta técnica consiste en precodificar el símbolo de datos con una transformada discreta de Fourier y las muestras obtenidas de la etapa de precodificación son transmitidas en paralelo en un grupo de subportadoras. La forma de onda resultante en el dominio del tiempo tiene las características de una forma de onda de una señal de portadora única, esto es, tiene un PAPR bajo aunque la forma de onda no es de una señal de portadora única. </p>

<p>El transmisor DFTS-OFDM maneja bloques de tamaño N, los cuales contienen las muestras (valores complejos) de los símbolos modulados digitalmente, la etapa de DFT de N-puntos genera una representación de los símbolos de entrada en el dominio del tiempo. Las muestras son proyectadas en algunas de las M subportadoras disponibles de la etapa de IFFT de M-puntos, transformando la amplitud de las subportadoras en una señal compleja en el dominio del tiempo.</p>

<p><em>GNU Radio.</em></p>

<p><a href="http://www.gnuradio.org">GNU Radio</a> es una plataforma de SDR de software libre que permite el desarrollo de proyectos a través de una interfaz gráfica llamada GRC. Además, ofrece diversos bloques de procesamiento orientados a las telecomunicaciones, por lo que el desarrollo de sistemas de comunicación modernos es una taréa relativamente sencilla de implementar.</p>

<p><em>Plataforma DFTS-OFDM</em></p>

<p>Para el desarrollo de una plataforma DFTS-OFDM en GNU Radio se consideraron las siguientes etapas en la transmisión y recepción del sistema.</p>

<ol>
  <li>CRC de 32 bits.</li>
  <li>Modulador digital 16-QAM.</li>
  <li>Esparcimiento DFT de 192 puntos.</li>
  <li>Modulador OFDM de 2048 puntos.</li>
</ol>

<p>Así mismo la secuencia para la transmisión de datos es la siguiente:</p>

<ol>
  <li>Envío de encabezado (3 Símbolos).</li>
  <li>Envío de palabras de sincronía (2 palabras).</li>
  <li>Envío de carga (&gt;1 símbolo).</li>
</ol>

<p>La etapa de recepción  de datos se implementa de la siguiente manera:</p>

<ol>
  <li>Detección de símbolo OFDM en el canal.</li>
  <li>Detección de cabecera y carga.</li>
  <li>Detección de palabras de sincronía para estimación de canal.</li>
  <li>Detección de carga.</li>
</ol>

<p>Tanto las etapas de detección de cabecera y carga en el receptor incluyen etapas de DFTS, OFDM y demodulación digital 16-QAM, adicionalmente a la carga se le realiza una verificación de CRC.</p>

<p><img src="http://viktorivan.github.io/downloads/images/ofdm2048dfts192.png" /></p>

<p><em>DFTS-OFDM en modo relay con protocolo AF</em></p>

<p>El protocolo de AF indica que los símbolos recibidos en el nodo relay serán enviados a su destino sólo amplificando la señal recibida, esta amplificación depende del SNR recibido, quedando de la siguiente manera:</p>

<p><img src="http://viktorivan.github.io/downloads/images/ofdm2048dfts192AF.png" /></p>

<p><em>DFTS-OFDM en modo relay con protocolo DF</em></p>

<p>El protocolo DF es de los mas complejos de implementar, el nodo relay debe obtener los datos hasta la etapa de CRC y volver a generar el símbolo para retransmitirlo al destino. </p>

<p>La implementación del protocolo DF en GNU Radio queda de la siguiente manera:</p>

<p><img src="http://viktorivan.github.io/downloads/images/ofdm2048dfts192DF.png" /></p>

<p><em>DFTS-OFDM en modo relay con protocolo EF</em></p>

<p>El protocolo EF realiza una ecualización a los símbolos recibidos y los reenvía a su destino, al momento de implementar es necesario volver a generar los símbolos de cabecera y enviar nuevas palabras de sincronía para la estimación del canal en la fase 2 de la transmisión.</p>

<p>El diagrama a bloques del protocolo EF queda de la siguiente manera:</p>

<p><img src="http://viktorivan.github.io/downloads/images/ofdm2048dfts192EF.png" /></p>

<p><em>Conclusión</em></p>

<p>Las herramientas de SDR propician el desarrollo e implementación de nuevas tecnologías de radio, ya que no se requiere de una infraestructura cara y compleja para su utilización, se puede resumir en el uso de una computadora con linux. Para la emulación el paso es muy sencillo, solo se requiere conectar las tarjetas <a href="http://www.ettus.com/">USRP</a> en el puerto USB o de red y se tendrá un sistema de radio funcionando.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Librerías externas en GNU Radio]]></title>
    <link href="http://viktorivan.github.io/blog/2014/03/19/librerias-externas-en-gnu-radio/"/>
    <updated>2014-03-19T20:04:12-06:00</updated>
    <id>http://viktorivan.github.io/blog/2014/03/19/librerias-externas-en-gnu-radio</id>
    <content type="html"><![CDATA[<p>Introducción.</p>

<p>Aunque <a href="http://www.gnuradio.org">GNU Radio</a> es un proyecto versátil conformado con una gran cantidad de herramientas que permiten realizar múltiples procesos en Software Radio, muchas veces se requiere de operaciones específicas que difícilmente serán integradas en el proyecto original. La integración de estas funciones especiales pueden ser desarrolladas por el usuario por medio de herramientas como <code>gr_modtool</code>, donde a través de código en C++ o Python se puede desarrollar cualquier función para el procesamiento digital de la señal que no este considerado dentro del proyecto de GNU Radio. </p>

<!-- more -->

<p>Lenguajes de programación como C++ y Python gozan de una popularidad entre los programadores de tal manera que se desarrollan proyectos independientes especializados que facilitan el desarrollo de programas orientados a analizar o solucionar áreas muy específicas, un caso es <a href="http://itpp.sourceforge.net">IT++</a> que es una biblioteca de clases y funciones para álgebra lineal, optimización numérica, procesamiento de señales, comunicaciones y estadística. Utilizada ampliamente tanto en la industria como en la investigación.</p>

<p><em>Integración de IT++ en módulos out-of-tree</em></p>

<p>Los módulos out-of-tree de GNU Radio utilizan la herramienta <a href="http://www.cmake.org">CMAKE</a> que es una familia de herramientas diseñadas para compilar y probar software, de esta manera se puede indicar a GNU Radio la incorporación de bibliotecas externas al proyecto out-of-tree por medio de archivos CMAKE. Estos archivos generan variables globales con la ubicación de los archivos de la biblioteca a instalar.</p>

<p>En el caso de IT++, el archivo se llama <code>FindITPP.cmake</code> y se tiene que guardar en <code>~/gr-Tu_modulo/cmake/modules</code>, quedando el archivo cmake como sigue.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (FindITPP.cmake)</span> <a href="http://viktorivan.github.io/downloads/code/FindITPP.cmake">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="cmake"><span class="line"><span class="nb">INCLUDE</span><span class="p">(</span><span class="s">FindPkgConfig</span><span class="p">)</span>
</span><span class="line"><span class="nb">PKG_CHECK_MODULES</span><span class="p">(</span><span class="s">PC_ITPP</span> <span class="s">QUIET</span> <span class="s">gnuradio-core</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nb">FIND_PATH</span><span class="p">(</span>
</span><span class="line">    <span class="s">ITPP_INCLUDE_DIRS</span>
</span><span class="line">    <span class="s">NAMES</span> <span class="s">itpp/itbase.h</span>
</span><span class="line">    <span class="s">HINTS</span> <span class="err">$</span><span class="s">ENV{ITPP_DIR}/include</span>
</span><span class="line">        <span class="o">${</span><span class="nv">PC_ITPP_INCLUDE_DIR</span><span class="o">}</span>
</span><span class="line">    <span class="s">PATHS</span> <span class="s">/usr/local/include</span>
</span><span class="line">          <span class="s">/usr/include</span>
</span><span class="line">	  <span class="s">/usr/pkgs64/include</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nb">FIND_LIBRARY</span><span class="p">(</span>
</span><span class="line">    <span class="s">ITPP_LIBRARIES</span>
</span><span class="line">    <span class="s">NAMES</span> <span class="s">itpp</span>
</span><span class="line">    <span class="s">HINTS</span> <span class="err">$</span><span class="s">ENV{ITPP_DIR}/lib</span>
</span><span class="line">        <span class="o">${</span><span class="nv">PC_ITPP_LIBDIR</span><span class="o">}</span>
</span><span class="line">    <span class="s">PATHS</span> <span class="s">/usr/local/lib</span>
</span><span class="line">          <span class="s">/usr/local/lib64</span>
</span><span class="line">          <span class="s">/usr/lib</span>
</span><span class="line">          <span class="s">/usr/lib64</span>
</span><span class="line">	  <span class="s">/usr/pkgs64/lib</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nb">INCLUDE</span><span class="p">(</span><span class="s">FindPackageHandleStandardArgs</span><span class="p">)</span>
</span><span class="line"><span class="nb">FIND_PACKAGE_HANDLE_STANDARD_ARGS</span><span class="p">(</span><span class="s">ITPP</span> <span class="s">DEFAULT_MSG</span> <span class="s">ITPP_LIBRARIES</span> <span class="s">ITPP_INCLUDE_DIRS</span><span class="p">)</span>
</span><span class="line"><span class="nb">MARK_AS_ADVANCED</span><span class="p">(</span><span class="s">ITPP_LIBRARIES</span> <span class="s">ITPP_INCLUDE_DIRS</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Así mismo hay que indicar a CMAKE que tiene que utilizar el nuevo archivo cmake, para ello se modifica el archivo <code>CmakeLists.txt</code> ubicado en la raíz del proyecto.</p>

<p>En la sección <code># Find gnuradio build dependencies</code> se agrega la línea</p>

<pre><code>find_package(ITPP)
</code></pre>

<p>En la parte final de la sección permite agregar un mensaje de error en caso de que la biblioteca no este instalada en el sistema.</p>

<pre><code>if(NOT ITPP_FOUND)
    message(FATAL_ERROR "IT++ Core required to compile Tu_Modulo")
endif()
</code></pre>

<p>En la sección de <code># Setup the include and linker paths</code> se agrega la línea <code>${ITPP_INCLUDE_DIRS}</code> para <code>include_directories</code> y la línea <code>${ITPP_LIBRARY_DIRS}</code> para <code>link_directories</code>, quedando como sigue:</p>

<pre><code>include_directories(
    ${CMAKE_SOURCE_DIR}/lib
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_BINARY_DIR}/lib
    ${CMAKE_BINARY_DIR}/include
    ${Boost_INCLUDE_DIRS}
    ${CPPUNIT_INCLUDE_DIRS}
    ${ITPP_INCLUDE_DIRS}
    ${GNURADIO_ALL_INCLUDE_DIRS}
)

link_directories(
    ${Boost_LIBRARY_DIRS}
    ${CPPUNIT_LIBRARY_DIRS}
    ${ITPP_LIBRARY_DIRS}
    ${GNURADIO_RUNTIME_LIBRARY_DIRS}
)
</code></pre>

<p>Finalmente el archivo <code>CMakeLists.txt</code>, con sus modificaciones incluidas, quedaría:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>CMakeLists.txt (CMakeLists.cmake)</span> <a href="http://viktorivan.github.io/downloads/code/CMakeLists.cmake">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
</pre></td><td class="code"><pre><code class="cmake"><span class="line"><span class="c"># Copyright 2011,2012 Free Software Foundation, Inc.</span>
</span><span class="line"><span class="err">#</span>
</span><span class="line"><span class="c"># This file is part of GNU Radio</span>
</span><span class="line"><span class="err">#</span>
</span><span class="line"><span class="c"># GNU Radio is free software; you can redistribute it and/or modify</span>
</span><span class="line"><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class="line"><span class="c"># the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class="line"><span class="c"># any later version.</span>
</span><span class="line"><span class="err">#</span>
</span><span class="line"><span class="c"># GNU Radio is distributed in the hope that it will be useful,</span>
</span><span class="line"><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class="line"><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class="line"><span class="c"># GNU General Public License for more details.</span>
</span><span class="line"><span class="err">#</span>
</span><span class="line"><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class="line"><span class="c"># along with GNU Radio; see the file COPYING.  If not, write to</span>
</span><span class="line"><span class="c"># the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class="line"><span class="c"># Boston, MA 02110-1301, USA.</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="c"># Project setup</span>
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">2.6</span><span class="p">)</span>
</span><span class="line"><span class="nb">project</span><span class="p">(</span><span class="s">gr-Tu_modulo</span> <span class="s">CXX</span> <span class="s">C</span><span class="p">)</span>
</span><span class="line"><span class="nb">enable_testing</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">#select the release build type by default to get optimization flags</span>
</span><span class="line"><span class="nb">if</span><span class="p">(</span><span class="s">NOT</span> <span class="s">CMAKE_BUILD_TYPE</span><span class="p">)</span>
</span><span class="line">   <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_BUILD_TYPE</span> <span class="s2">&quot;Release&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="nb">message</span><span class="p">(</span><span class="s">STATUS</span> <span class="s2">&quot;Build type not specified: defaulting to release.&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nb">endif</span><span class="p">(</span><span class="s">NOT</span> <span class="s">CMAKE_BUILD_TYPE</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_BUILD_TYPE</span> <span class="o">${</span><span class="nv">CMAKE_BUILD_TYPE</span><span class="o">}</span> <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nb">list</span><span class="p">(</span><span class="s">APPEND</span> <span class="s">CMAKE_MODULE_PATH</span> <span class="o">${</span><span class="nv">CMAKE_SOURCE_DIR</span><span class="o">}</span><span class="s">/cmake/Modules</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="c"># Compiler specific setup</span>
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="nb">if</span><span class="p">(</span><span class="s">CMAKE_COMPILER_IS_GNUCXX</span> <span class="s">AND</span> <span class="s">NOT</span> <span class="s">WIN32</span><span class="p">)</span>
</span><span class="line">    <span class="c">#http://gcc.gnu.org/wiki/Visibility</span>
</span><span class="line">    <span class="nb">add_definitions</span><span class="p">(</span><span class="s">-fvisibility=hidden</span><span class="p">)</span>
</span><span class="line"><span class="nb">endif</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="c"># Find boost</span>
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="nb">if</span><span class="p">(</span><span class="s">UNIX</span> <span class="s">AND</span> <span class="s">EXISTS</span> <span class="s2">&quot;/usr/lib64&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="nb">list</span><span class="p">(</span><span class="s">APPEND</span> <span class="s">BOOST_LIBRARYDIR</span> <span class="s2">&quot;/usr/lib64&quot;</span><span class="p">)</span> <span class="c">#fedora 64-bit fix</span>
</span><span class="line"><span class="nb">endif</span><span class="p">(</span><span class="s">UNIX</span> <span class="s">AND</span> <span class="s">EXISTS</span> <span class="s2">&quot;/usr/lib64&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">Boost_ADDITIONAL_VERSIONS</span>
</span><span class="line">    <span class="s2">&quot;1.35.0&quot;</span> <span class="s2">&quot;1.35&quot;</span> <span class="s2">&quot;1.36.0&quot;</span> <span class="s2">&quot;1.36&quot;</span> <span class="s2">&quot;1.37.0&quot;</span> <span class="s2">&quot;1.37&quot;</span> <span class="s2">&quot;1.38.0&quot;</span> <span class="s2">&quot;1.38&quot;</span> <span class="s2">&quot;1.39.0&quot;</span> <span class="s2">&quot;1.39&quot;</span>
</span><span class="line">    <span class="s2">&quot;1.40.0&quot;</span> <span class="s2">&quot;1.40&quot;</span> <span class="s2">&quot;1.41.0&quot;</span> <span class="s2">&quot;1.41&quot;</span> <span class="s2">&quot;1.42.0&quot;</span> <span class="s2">&quot;1.42&quot;</span> <span class="s2">&quot;1.43.0&quot;</span> <span class="s2">&quot;1.43&quot;</span> <span class="s2">&quot;1.44.0&quot;</span> <span class="s2">&quot;1.44&quot;</span>
</span><span class="line">    <span class="s2">&quot;1.45.0&quot;</span> <span class="s2">&quot;1.45&quot;</span> <span class="s2">&quot;1.46.0&quot;</span> <span class="s2">&quot;1.46&quot;</span> <span class="s2">&quot;1.47.0&quot;</span> <span class="s2">&quot;1.47&quot;</span> <span class="s2">&quot;1.48.0&quot;</span> <span class="s2">&quot;1.48&quot;</span> <span class="s2">&quot;1.49.0&quot;</span> <span class="s2">&quot;1.49&quot;</span>
</span><span class="line">    <span class="s2">&quot;1.50.0&quot;</span> <span class="s2">&quot;1.50&quot;</span> <span class="s2">&quot;1.51.0&quot;</span> <span class="s2">&quot;1.51&quot;</span> <span class="s2">&quot;1.52.0&quot;</span> <span class="s2">&quot;1.52&quot;</span> <span class="s2">&quot;1.53.0&quot;</span> <span class="s2">&quot;1.53&quot;</span> <span class="s2">&quot;1.54.0&quot;</span> <span class="s2">&quot;1.54&quot;</span>
</span><span class="line">    <span class="s2">&quot;1.55.0&quot;</span> <span class="s2">&quot;1.55&quot;</span> <span class="s2">&quot;1.56.0&quot;</span> <span class="s2">&quot;1.56&quot;</span> <span class="s2">&quot;1.57.0&quot;</span> <span class="s2">&quot;1.57&quot;</span> <span class="s2">&quot;1.58.0&quot;</span> <span class="s2">&quot;1.58&quot;</span> <span class="s2">&quot;1.59.0&quot;</span> <span class="s2">&quot;1.59&quot;</span>
</span><span class="line">    <span class="s2">&quot;1.60.0&quot;</span> <span class="s2">&quot;1.60&quot;</span> <span class="s2">&quot;1.61.0&quot;</span> <span class="s2">&quot;1.61&quot;</span> <span class="s2">&quot;1.62.0&quot;</span> <span class="s2">&quot;1.62&quot;</span> <span class="s2">&quot;1.63.0&quot;</span> <span class="s2">&quot;1.63&quot;</span> <span class="s2">&quot;1.64.0&quot;</span> <span class="s2">&quot;1.64&quot;</span>
</span><span class="line">    <span class="s2">&quot;1.65.0&quot;</span> <span class="s2">&quot;1.65&quot;</span> <span class="s2">&quot;1.66.0&quot;</span> <span class="s2">&quot;1.66&quot;</span> <span class="s2">&quot;1.67.0&quot;</span> <span class="s2">&quot;1.67&quot;</span> <span class="s2">&quot;1.68.0&quot;</span> <span class="s2">&quot;1.68&quot;</span> <span class="s2">&quot;1.69.0&quot;</span> <span class="s2">&quot;1.69&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line"><span class="nb">find_package</span><span class="p">(</span><span class="s">Boost</span> <span class="s2">&quot;1.35&quot;</span> <span class="s">COMPONENTS</span> <span class="s">filesystem</span> <span class="s">system</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nb">if</span><span class="p">(</span><span class="s">NOT</span> <span class="s">Boost_FOUND</span><span class="p">)</span>
</span><span class="line">    <span class="nb">message</span><span class="p">(</span><span class="s">FATAL_ERROR</span> <span class="s2">&quot;Boost required to compile Tu_modulo&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nb">endif</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="c"># Install directories</span>
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="nb">include</span><span class="p">(</span><span class="s">GrPlatform</span><span class="p">)</span> <span class="c">#define LIB_SUFFIX</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_RUNTIME_DIR</span>      <span class="s">bin</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_LIBRARY_DIR</span>      <span class="s">lib</span><span class="o">${</span><span class="nv">LIB_SUFFIX</span><span class="o">}</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_INCLUDE_DIR</span>      <span class="s">include/Tu_modulo</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_DATA_DIR</span>         <span class="s">share</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_PKG_DATA_DIR</span>     <span class="o">${</span><span class="nv">GR_DATA_DIR</span><span class="o">}</span><span class="s">/</span><span class="o">${</span><span class="nv">CMAKE_PROJECT_NAME</span><span class="o">}</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_DOC_DIR</span>          <span class="o">${</span><span class="nv">GR_DATA_DIR</span><span class="o">}</span><span class="s">/doc</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_PKG_DOC_DIR</span>      <span class="o">${</span><span class="nv">GR_DOC_DIR</span><span class="o">}</span><span class="s">/</span><span class="o">${</span><span class="nv">CMAKE_PROJECT_NAME</span><span class="o">}</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_CONF_DIR</span>         <span class="s">etc</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_PKG_CONF_DIR</span>     <span class="o">${</span><span class="nv">GR_CONF_DIR</span><span class="o">}</span><span class="s">/</span><span class="o">${</span><span class="nv">CMAKE_PROJECT_NAME</span><span class="o">}</span><span class="s">/conf.d</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_LIBEXEC_DIR</span>      <span class="s">libexec</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_PKG_LIBEXEC_DIR</span>  <span class="o">${</span><span class="nv">GR_LIBEXEC_DIR</span><span class="o">}</span><span class="s">/</span><span class="o">${</span><span class="nv">CMAKE_PROJECT_NAME</span><span class="o">}</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GRC_BLOCKS_DIR</span>      <span class="o">${</span><span class="nv">GR_PKG_DATA_DIR</span><span class="o">}</span><span class="s">/grc/blocks</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="c"># Find gnuradio build dependencies</span>
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="nb">find_package</span><span class="p">(</span><span class="s">CppUnit</span><span class="p">)</span>
</span><span class="line"><span class="nb">find_package</span><span class="p">(</span><span class="s">ITPP</span><span class="p">)</span>
</span><span class="line"><span class="c"># Search for GNU Radio and its components and versions. Add any</span>
</span><span class="line"><span class="c"># components required to the list of GR_REQUIRED_COMPONENTS (in all</span>
</span><span class="line"><span class="c"># caps such as FILTER or FFT) and change the version to the minimum</span>
</span><span class="line"><span class="c"># API compatible version required.</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_REQUIRED_COMPONENTS</span> <span class="s">RUNTIME</span><span class="p">)</span>
</span><span class="line"><span class="nb">find_package</span><span class="p">(</span><span class="s">Gnuradio</span> <span class="s2">&quot;3.7.2&quot;</span> <span class="s">REQUIRED</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nb">if</span><span class="p">(</span><span class="s">NOT</span> <span class="s">CPPUNIT_FOUND</span><span class="p">)</span>
</span><span class="line">    <span class="nb">message</span><span class="p">(</span><span class="s">FATAL_ERROR</span> <span class="s2">&quot;CppUnit required to compile Tu_modulo&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nb">endif</span><span class="p">()</span>
</span><span class="line"><span class="nb">if</span><span class="p">(</span><span class="s">NOT</span> <span class="s">ITPP_FOUND</span><span class="p">)</span>
</span><span class="line">    <span class="nb">message</span><span class="p">(</span><span class="s">FATAL_ERROR</span> <span class="s2">&quot;IT++ Core required to compile Tu_modulo&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nb">endif</span><span class="p">()</span>
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="c"># Setup the include and linker paths</span>
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="nb">include_directories</span><span class="p">(</span>
</span><span class="line">    <span class="o">${</span><span class="nv">CMAKE_SOURCE_DIR</span><span class="o">}</span><span class="s">/lib</span>
</span><span class="line">    <span class="o">${</span><span class="nv">CMAKE_SOURCE_DIR</span><span class="o">}</span><span class="s">/include</span>
</span><span class="line">    <span class="o">${</span><span class="nv">CMAKE_BINARY_DIR</span><span class="o">}</span><span class="s">/lib</span>
</span><span class="line">    <span class="o">${</span><span class="nv">CMAKE_BINARY_DIR</span><span class="o">}</span><span class="s">/include</span>
</span><span class="line">    <span class="o">${</span><span class="nv">Boost_INCLUDE_DIRS</span><span class="o">}</span>
</span><span class="line">    <span class="o">${</span><span class="nv">CPPUNIT_INCLUDE_DIRS</span><span class="o">}</span>
</span><span class="line">    <span class="o">${</span><span class="nv">ITPP_INCLUDE_DIRS</span><span class="o">}</span>
</span><span class="line">    <span class="o">${</span><span class="nv">GNURADIO_ALL_INCLUDE_DIRS</span><span class="o">}</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nb">link_directories</span><span class="p">(</span>
</span><span class="line">    <span class="o">${</span><span class="nv">Boost_LIBRARY_DIRS</span><span class="o">}</span>
</span><span class="line">    <span class="o">${</span><span class="nv">CPPUNIT_LIBRARY_DIRS</span><span class="o">}</span>
</span><span class="line">    <span class="o">${</span><span class="nv">ITPP_LIBRARY_DIRS</span><span class="o">}</span>
</span><span class="line">    <span class="o">${</span><span class="nv">GNURADIO_RUNTIME_LIBRARY_DIRS</span><span class="o">}</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Set component parameters</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_TU_MODULO_INCLUDE_DIRS</span> <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/include</span> <span class="s">CACHE</span> <span class="s">INTERNAL</span> <span class="s2">&quot;&quot;</span> <span class="s">FORCE</span><span class="p">)</span>
</span><span class="line"><span class="nb">set</span><span class="p">(</span><span class="s">GR_TU_MODULO_SWIG_INCLUDE_DIRS</span> <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/swig</span> <span class="s">CACHE</span> <span class="s">INTERNAL</span> <span class="s2">&quot;&quot;</span> <span class="s">FORCE</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="c"># Create uninstall target</span>
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="nb">configure_file</span><span class="p">(</span>
</span><span class="line">    <span class="o">${</span><span class="nv">CMAKE_SOURCE_DIR</span><span class="o">}</span><span class="s">/cmake/cmake_uninstall.cmake.in</span>
</span><span class="line">    <span class="o">${</span><span class="nv">CMAKE_CURRENT_BINARY_DIR</span><span class="o">}</span><span class="s">/cmake_uninstall.cmake</span>
</span><span class="line"><span class="s">@ONLY</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nb">add_custom_target</span><span class="p">(</span><span class="s">uninstall</span>
</span><span class="line">    <span class="o">${</span><span class="nv">CMAKE_COMMAND</span><span class="o">}</span> <span class="s">-P</span> <span class="o">${</span><span class="nv">CMAKE_CURRENT_BINARY_DIR</span><span class="o">}</span><span class="s">/cmake_uninstall.cmake</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="c"># Add subdirectories</span>
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">include/Tu_modulo</span><span class="p">)</span>
</span><span class="line"><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">lib</span><span class="p">)</span>
</span><span class="line"><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">swig</span><span class="p">)</span>
</span><span class="line"><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">python</span><span class="p">)</span>
</span><span class="line"><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">grc</span><span class="p">)</span>
</span><span class="line"><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">apps</span><span class="p">)</span>
</span><span class="line"><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">docs</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="c"># Install cmake search helper for this library</span>
</span><span class="line"><span class="c">########################################################################</span>
</span><span class="line"><span class="nb">install</span><span class="p">(</span><span class="s">FILES</span> <span class="s">cmake/Modules/Tu_moduloConfig.cmake</span>
</span><span class="line">    <span class="s">DESTINATION</span> <span class="s">lib/cmake/Tu_modulo</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Desarrollo de bloques con IT++</em></p>

<p>En este caso se desarrollarán dos bloques con funciones de IT++, el codificador y decodificador convolucional. Para ello, por medio de <code>gr_modtool</code> se requiere crear dos bloques con tres valores de entrada, uno para el polinomio, otro para la tasa de codificación y uno último para indicar la cantidad de registros que tiene el codificador.</p>

<p>Desde una terminal de linux, se ejecuta <code>gr_modtool</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gr_modtool add
</span><span class="line">GNU Radio module name identified: Tu_modulo
</span><span class="line">Enter code type: sync
</span><span class="line">Language: C++
</span><span class="line">Enter name of block/code (without module name prefix): encodconv_vff
</span><span class="line">Block/code identifier: encodconv_vff
</span><span class="line">Enter valid argument list, including default arguments: int val1, int val2, int val3
</span><span class="line">Add Python QA code? [Y/n] 
</span><span class="line">Add C++ QA code? [y/N] 
</span><span class="line">Adding file 'lib/encodconv_vff_impl.h'...
</span><span class="line">Adding file 'lib/encodconv_vff_impl.cc'...
</span><span class="line">Adding file 'include/Tu_modulo/encodconv_vff.h'...
</span><span class="line">Editing swig/Tu_modulo_swig.i...
</span><span class="line">Adding file 'python/qa_encodconv_vff.py'...
</span><span class="line">Editing python/CMakeLists.txt...
</span><span class="line">Adding file 'grc/Tu_modulo_encodconv_vff.xml'...
</span><span class="line">Editing grc/CMakeLists.txt...
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Para el decodificador, se crea un bloque con las mismas características</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gr_modtool add
</span><span class="line">GNU Radio module name identified: Tu_modulo
</span><span class="line">Enter code type: sync
</span><span class="line">Language: C++
</span><span class="line">Enter name of block/code (without module name prefix): decodconv_vff
</span><span class="line">Block/code identifier: decodconv_vff
</span><span class="line">Enter valid argument list, including default arguments: int val1, int val2, int val3
</span><span class="line">Add Python QA code? [Y/n] 
</span><span class="line">Add C++ QA code? [y/N] 
</span><span class="line">Adding file 'lib/decodconv_vff_impl.h'...
</span><span class="line">Adding file 'lib/decodconv_vff_impl.cc'...
</span><span class="line">Adding file 'include/Tu_modulo/decodconv_vff.h'...
</span><span class="line">Editing swig/Tu_modulo_swig.i...
</span><span class="line">Adding file 'python/qa_decodconv_vff.py'...
</span><span class="line">Editing python/CMakeLists.txt...
</span><span class="line">Adding file 'grc/Tu_modulo_decodconv_vff.xml'...
</span><span class="line">Editing grc/CmakeLists.txt...
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><em>Codificador convolucional</em></p>

<p>Dentro del archivo <code>encodconv_vff_impl.cc</code> que se ubica en <code>~/gr-Tu_modulo/lib</code> se indica que se utilizará la biblioteca de IT++ </p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>En la sección de <code>encodconv_vff_impl::encodconv_vff_impl(int val1, int val2, int val3)</code> se indican los parámetros del bloque tales como la cantidad de flujos de datos, tamaño de los paquetes de entrada y salida, así como asignar a las variables internas las variables públicas que se capturaron en el bloque de GRC. </p>

<pre><code>encodconv_vff_impl::encodconv_vff_impl(int val1, int val2, int val3)
  : gr::sync_block("encodconv_vff",
          gr::io_signature::make(1, 1, sizeof(float) * val3),
          gr::io_signature::make(1, 1, sizeof(float) * val3 * sizeof(val1)))
{
	polsize = sizeof(val1);
	cl = val2;
	pz = val3;
  
	for (int i = 0; i &lt; 0x100; i++){
		polynom[i] = i;
	}
	
	memcpy(polynom, (char*)&amp;val1, sizeof(val1));
	
	// -- Channel code parameters --

	itpp::ivec generator(polsize);

	for (int i = 0; i &lt; polsize; i++){
		generator[i] = polynom[i];
	}

	code.set_generator_polynomials(generator, cl);	
}
</code></pre>

<p>Como se puede observar, varias funciones de IT++ se han utilizado como parte del código del bloque de procesamiento, para llamar cualquier otra función solo se indica con el formato <code>itpp::función</code>, de esta manera, el compilador reconocerá que la función forma parte de la biblioteca de IT++.</p>

<p>En la sección de procesamiento de la señal <code>// Do &lt;+signal processing+&gt;</code> se realizará la codificación convolucional de los paquetes de entrada de acuerdo a los parámetros previamente definidos, por lo que el código final queda como sigue:</p>

<pre><code>int
encodconv_vff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    itpp::bvec tempin(pz * sizeof(float));
	itpp::bvec tempout(pz * polsize * sizeof(float));
  
	for (int j = 0; j &lt; (pz * sizeof(float)); j++){
		tempin[j] = in[j];
	}	

	code.encode_tailbite(tempin, tempout);

	for (int k = 0; k &lt; (pz * polsize * sizeof(float)); k++){
		out[k] = tempout[k];
	}

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>La operación de codificación es realizada por el comando <code>code.encode_tailbite(tempin, tempout);
</code>, disminuyendo así la cantidad de líneas para desarrollar un codificador convolucional.</p>

<p>La versión final del código es</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>encodconv_vff_impl.cc (encodconv_vff_impl.cpp)</span> <a href="http://viktorivan.github.io/downloads/code/encodconv_vff_impl.cpp">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cm">/* -*- c++ -*- */</span>
</span><span class="line"><span class="cm">/* </span>
</span><span class="line"><span class="cm"> * Copyright 2014 IVAN RODRIGUEZ.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class="line"><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class="line"><span class="cm"> * any later version.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class="line"><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class="line"><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class="line"><span class="cm"> * GNU General Public License for more details.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class="line"><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class="line"><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifdef HAVE_CONFIG_H</span>
</span><span class="line"><span class="cp">#include &quot;config.h&quot;</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;gnuradio/io_signature.h&gt;</span>
</span><span class="line"><span class="cp">#include &quot;encodconv_vff_impl.h&quot;</span>
</span><span class="line"><span class="cp">#include &lt;itpp/itcomm.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class="line">  <span class="k">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">encodconv_vff</span><span class="o">::</span><span class="n">sptr</span>
</span><span class="line">    <span class="n">encodconv_vff</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="n">gnuradio</span><span class="o">::</span><span class="n">get_initial_sptr</span>
</span><span class="line">        <span class="p">(</span><span class="k">new</span> <span class="n">encodconv_vff_impl</span><span class="p">(</span><span class="n">val1</span><span class="p">,</span> <span class="n">val2</span><span class="p">,</span> <span class="n">val3</span><span class="p">));</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * The private constructor</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">encodconv_vff_impl</span><span class="o">::</span><span class="n">encodconv_vff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">)</span>
</span><span class="line">      <span class="o">:</span> <span class="n">gr</span><span class="o">::</span><span class="n">sync_block</span><span class="p">(</span><span class="s">&quot;encodconv_vff&quot;</span><span class="p">,</span>
</span><span class="line">              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">val3</span><span class="p">),</span>
</span><span class="line">              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">val3</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">)))</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">    	<span class="n">polsize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">);</span>
</span><span class="line">		<span class="n">cl</span> <span class="o">=</span> <span class="n">val2</span><span class="p">;</span>
</span><span class="line">		<span class="n">pz</span> <span class="o">=</span> <span class="n">val3</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">			<span class="n">polynom</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		
</span><span class="line">		<span class="n">memcpy</span><span class="p">(</span><span class="n">polynom</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">val1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">));</span>
</span><span class="line">		
</span><span class="line">		<span class="c1">// -- Channel code parameters --</span>
</span><span class="line">
</span><span class="line">		<span class="n">itpp</span><span class="o">::</span><span class="n">ivec</span> <span class="n">generator</span><span class="p">(</span><span class="n">polsize</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">polsize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">			<span class="n">generator</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">polynom</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="n">code</span><span class="p">.</span><span class="n">set_generator_polynomials</span><span class="p">(</span><span class="n">generator</span><span class="p">,</span> <span class="n">cl</span><span class="p">);</span>	
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * Our virtual destructor.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">encodconv_vff_impl</span><span class="o">::~</span><span class="n">encodconv_vff_impl</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span>
</span><span class="line">    <span class="n">encodconv_vff_impl</span><span class="o">::</span><span class="n">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class="line">			  <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class="line">			  <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="n">in</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">        <span class="kt">float</span> <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">        <span class="n">itpp</span><span class="o">::</span><span class="n">bvec</span> <span class="n">tempin</span><span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span><span class="line">		<span class="n">itpp</span><span class="o">::</span><span class="n">bvec</span> <span class="n">tempout</span><span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="n">polsize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">			<span class="n">tempin</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">		<span class="p">}</span>	
</span><span class="line">
</span><span class="line">		<span class="n">code</span><span class="p">.</span><span class="n">encode_tailbite</span><span class="p">(</span><span class="n">tempin</span><span class="p">,</span> <span class="n">tempout</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="n">polsize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">			<span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempout</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// Tell runtime system how many output items we produced.</span>
</span><span class="line">        <span class="k">return</span> <span class="n">noutput_items</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="p">}</span> <span class="cm">/* namespace Tu_modulo */</span>
</span><span class="line"><span class="p">}</span> <span class="cm">/* namespace gr */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Decodificador convolucional</em></p>

<p>De manera similar al codificador convolucional, es necesario modificar el archivo <code>decodconv_vff_impl.cc</code>, en una primera instancia se agrega la línea donde se indica que se utilizará la biblioteca de IT++.</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>En la sección de <code>decodconv_vff_impl::decodconv_vff_impl(int val1, int val2, int val3)</code> se indican los parámetros del bloque,</p>

<pre><code>decodconv_vff_impl::decodconv_vff_impl(int val1, int val2, int val3)
  : gr::sync_block("decodconv_vff",
          gr::io_signature::make(1, 1, sizeof(float) * val3 * sizeof(val1)),
          gr::io_signature::make(1, 1, sizeof(float) * val3))
{
	polsize = sizeof(val1);
	cl = val2;
	pz = val3;
  
	for (int i = 0; i &lt; 0x100; i++){
		polynom[i] = i;
	}

	memcpy(polynom, (char*)&amp;val1, sizeof(val1));
	
	// -- Channel code parameters --

	itpp::ivec generator(polsize);

	for (int i = 0; i &lt; polsize; i++){
		generator[i] = polynom[i];
	}

	code.set_generator_polynomials(generator, cl);
}
</code></pre>

<p>De igual manera, en la sección de procesamiento de la señal del bloque de procesamiento <code>// Do &lt;+signal processing+&gt;</code> se realizará la decodificación de los paquetes de entrada de acuerdo a los parámetros previamente definidos utilizando la biblioteca de IT++, </p>

<pre><code>int
decodconv_vff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

itpp::bvec tempbin(pz * polsize * sizeof(float));
itpp::bvec tempout(pz * sizeof(float));
itpp::vec tempin(pz * polsize * sizeof(float));

	for (int j = 0; j &lt; (pz  * polsize * sizeof(float)); j++){
		tempbin[j] = in[j];
	}

	tempin = to_vec(tempbin);
	tempin = -(tempin * 2 - 1);

	code.decode_tailbite(tempin, tempout);

	for (int k = 0; k &lt; (pz * sizeof(float)); k++){
		out[k] = tempout[k];
	}

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>En este bloque la operación de decodificación es realizada por el comando <code>code.decode_tailbite(tempin, tempout);</code> </p>

<p>El código final del bloque de procesamiento es</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>decodconv_vff_impl.cc (decodconv_vff_impl.cpp)</span> <a href="http://viktorivan.github.io/downloads/code/decodconv_vff_impl.cpp">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cm">/* -*- c++ -*- */</span>
</span><span class="line"><span class="cm">/* </span>
</span><span class="line"><span class="cm"> * Copyright 2014 IVAN RODRIGUEZ.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class="line"><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class="line"><span class="cm"> * any later version.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class="line"><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class="line"><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class="line"><span class="cm"> * GNU General Public License for more details.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class="line"><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class="line"><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifdef HAVE_CONFIG_H</span>
</span><span class="line"><span class="cp">#include &quot;config.h&quot;</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;gnuradio/io_signature.h&gt;</span>
</span><span class="line"><span class="cp">#include &quot;decodconv_vff_impl.h&quot;</span>
</span><span class="line"><span class="cp">#include &lt;itpp/itcomm.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class="line">  <span class="k">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">decodconv_vff</span><span class="o">::</span><span class="n">sptr</span>
</span><span class="line">    <span class="n">decodconv_vff</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="n">gnuradio</span><span class="o">::</span><span class="n">get_initial_sptr</span>
</span><span class="line">        <span class="p">(</span><span class="k">new</span> <span class="n">decodconv_vff_impl</span><span class="p">(</span><span class="n">val1</span><span class="p">,</span> <span class="n">val2</span><span class="p">,</span> <span class="n">val3</span><span class="p">));</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * The private constructor</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">decodconv_vff_impl</span><span class="o">::</span><span class="n">decodconv_vff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">)</span>
</span><span class="line">      <span class="o">:</span> <span class="n">gr</span><span class="o">::</span><span class="n">sync_block</span><span class="p">(</span><span class="s">&quot;decodconv_vff&quot;</span><span class="p">,</span>
</span><span class="line">              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">val3</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">)),</span>
</span><span class="line">              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">val3</span><span class="p">))</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">    	<span class="n">polsize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">);</span>
</span><span class="line">		<span class="n">cl</span> <span class="o">=</span> <span class="n">val2</span><span class="p">;</span>
</span><span class="line">		<span class="n">pz</span> <span class="o">=</span> <span class="n">val3</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">			<span class="n">polynom</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="n">memcpy</span><span class="p">(</span><span class="n">polynom</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">val1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">));</span>
</span><span class="line">		
</span><span class="line">		<span class="c1">// -- Channel code parameters --</span>
</span><span class="line">
</span><span class="line">		<span class="n">itpp</span><span class="o">::</span><span class="n">ivec</span> <span class="n">generator</span><span class="p">(</span><span class="n">polsize</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">polsize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">			<span class="n">generator</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">polynom</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="n">code</span><span class="p">.</span><span class="n">set_generator_polynomials</span><span class="p">(</span><span class="n">generator</span><span class="p">,</span> <span class="n">cl</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * Our virtual destructor.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">decodconv_vff_impl</span><span class="o">::~</span><span class="n">decodconv_vff_impl</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span>
</span><span class="line">    <span class="n">decodconv_vff_impl</span><span class="o">::</span><span class="n">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class="line">			  <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class="line">			  <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="n">in</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">        <span class="kt">float</span> <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">	<span class="n">itpp</span><span class="o">::</span><span class="n">bvec</span> <span class="n">tempbin</span><span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="n">polsize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span><span class="line">	<span class="n">itpp</span><span class="o">::</span><span class="n">bvec</span> <span class="n">tempout</span><span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span><span class="line">	<span class="n">itpp</span><span class="o">::</span><span class="n">vec</span> <span class="n">tempin</span><span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="n">polsize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">pz</span>  <span class="o">*</span> <span class="n">polsize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">			<span class="n">tempbin</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="n">tempin</span> <span class="o">=</span> <span class="n">to_vec</span><span class="p">(</span><span class="n">tempbin</span><span class="p">);</span>
</span><span class="line">		<span class="n">tempin</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">tempin</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">		<span class="n">code</span><span class="p">.</span><span class="n">decode_tailbite</span><span class="p">(</span><span class="n">tempin</span><span class="p">,</span> <span class="n">tempout</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">			<span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempout</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// Tell runtime system how many output items we produced.</span>
</span><span class="line">        <span class="k">return</span> <span class="n">noutput_items</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="p">}</span> <span class="cm">/* namespace Tu_modulo */</span>
</span><span class="line"><span class="p">}</span> <span class="cm">/* namespace gr */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Definiendo las variables públicas en los archivos de cabecera</em></p>

<p>Para poder utilizar libremente las clases y variables de IT++ dentro de los archivos cc de GNU Radio se requiere modificar los archivos de cabecera h de los bloques de procesamiento. Para el codificador convolucional el archivo es <code>encodconv_vff_impl.h</code> y para el decodificador es <code>decodconv_vff_impl.h</code>. </p>

<p>Dentro del archivo <code>encodconv_vff_impl.h</code> se indica la biblioteca de IT++</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>en la sección de <code>public</code> se indican las variables a utilizar</p>

<pre><code> public:
  encodconv_vff_impl(int val1, int val2, int val3);
  unsigned char polynom [0x100];
  int polsize;
  int cl;
  int pz;
  itpp::Convolutional_Code code;
  
  ~encodconv_vff_impl();
</code></pre>

<p>El archivo h del bloque de procesamiento del codificador convolucional queda como sigue</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>encodconv_vff_impl.h (encodconv_vff_impl.c)</span> <a href="http://viktorivan.github.io/downloads/code/encodconv_vff_impl.c">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* -*- c++ -*- */</span>
</span><span class="line"><span class="cm">/* </span>
</span><span class="line"><span class="cm"> * Copyright 2014 IVAN RODRIGUEZ.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class="line"><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class="line"><span class="cm"> * any later version.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class="line"><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class="line"><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class="line"><span class="cm"> * GNU General Public License for more details.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class="line"><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class="line"><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifndef INCLUDED_TU_MODULO_ENCODCONV_VFF_IMPL_H</span>
</span><span class="line"><span class="cp">#define INCLUDED_TU_MODULO_ENCODCONV_VFF_IMPL_H</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;Tu_modulo/encodconv_vff.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;itpp/itcomm.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class="line">  <span class="n">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">class</span> <span class="n">encodconv_vff_impl</span> <span class="o">:</span> <span class="n">public</span> <span class="n">encodconv_vff</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">     <span class="nl">private:</span>
</span><span class="line">      <span class="c1">// Nothing to declare in this block.</span>
</span><span class="line">
</span><span class="line">     <span class="nl">public:</span>
</span><span class="line">      <span class="n">encodconv_vff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">);</span>
</span><span class="line">      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">polynom</span> <span class="p">[</span><span class="mh">0x100</span><span class="p">];</span>
</span><span class="line">      <span class="kt">int</span> <span class="n">polsize</span><span class="p">;</span>
</span><span class="line">      <span class="kt">int</span> <span class="n">cl</span><span class="p">;</span>
</span><span class="line">      <span class="kt">int</span> <span class="n">pz</span><span class="p">;</span>
</span><span class="line">      <span class="n">itpp</span><span class="o">::</span><span class="n">Convolutional_Code</span> <span class="n">code</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="o">~</span><span class="n">encodconv_vff_impl</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Where all the action really happens</span>
</span><span class="line">      <span class="kt">int</span> <span class="nf">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class="line">	       <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class="line">	       <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="p">}</span> <span class="c1">// namespace Tu_modulo</span>
</span><span class="line"><span class="p">}</span> <span class="c1">// namespace gr</span>
</span><span class="line">
</span><span class="line"><span class="cp">#endif </span><span class="cm">/* INCLUDED_TU_MODULO_ENCODCONV_VFF_IMPL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>De igual manera en el archivo de cabecera del decodificador <code>decodconv_vff_impl.h</code> se indica la biblioteca de IT++</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>y en la sección de <code>public</code> las variables requeridas para el procesamiento de la señal,
     public:
      decodconv_vff_impl(int val1, int val2, int val3);
      unsigned char polynom [0x100];
      int polsize;
      int cl;
      int pz;
      itpp::Convolutional_Code code;</p>

<pre><code>  ~decodconv_vff_impl();
</code></pre>

<p>El archivo de cabecera, en su versión final queda,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>decodconv_vff_impl.h (decodconv_vff_impl.c)</span> <a href="http://viktorivan.github.io/downloads/code/decodconv_vff_impl.c">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* -*- c++ -*- */</span>
</span><span class="line"><span class="cm">/* </span>
</span><span class="line"><span class="cm"> * Copyright 2014 IVAN RODRIGUEZ.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class="line"><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class="line"><span class="cm"> * any later version.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class="line"><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class="line"><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class="line"><span class="cm"> * GNU General Public License for more details.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class="line"><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class="line"><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifndef INCLUDED_TU_MODULO_DECODCONV_VFF_IMPL_H</span>
</span><span class="line"><span class="cp">#define INCLUDED_TU_MODULO_DECODCONV_VFF_IMPL_H</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;Tu_modulo/decodconv_vff.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;itpp/itcomm.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class="line">  <span class="n">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">class</span> <span class="n">decodconv_vff_impl</span> <span class="o">:</span> <span class="n">public</span> <span class="n">decodconv_vff</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">     <span class="nl">private:</span>
</span><span class="line">      <span class="c1">// Nothing to declare in this block.</span>
</span><span class="line">
</span><span class="line">     <span class="nl">public:</span>
</span><span class="line">      <span class="n">decodconv_vff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">);</span>
</span><span class="line">      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">polynom</span> <span class="p">[</span><span class="mh">0x100</span><span class="p">];</span>
</span><span class="line">      <span class="kt">int</span> <span class="n">polsize</span><span class="p">;</span>
</span><span class="line">      <span class="kt">int</span> <span class="n">cl</span><span class="p">;</span>
</span><span class="line">      <span class="kt">int</span> <span class="n">pz</span><span class="p">;</span>
</span><span class="line">      <span class="n">itpp</span><span class="o">::</span><span class="n">Convolutional_Code</span> <span class="n">code</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="o">~</span><span class="n">decodconv_vff_impl</span><span class="p">();</span>
</span><span class="line">      <span class="c1">// Where all the action really happens</span>
</span><span class="line">      <span class="kt">int</span> <span class="nf">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class="line">	       <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class="line">	       <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="p">}</span> <span class="c1">// namespace Tu_modulo</span>
</span><span class="line"><span class="p">}</span> <span class="c1">// namespace gr</span>
</span><span class="line">
</span><span class="line"><span class="cp">#endif </span><span class="cm">/* INCLUDED_TU_MODULO_DECODCONV_VFF_IMPL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Interfaz gráfica de GRC</em></p>

<p>Los bloques de procesamiento mostrados en GNU Radio Companion son archivos xml que se ubican en <code>~/gr-Tu_modulo/grc</code>, para el codificador convolucional es <code>Tu_modulo_encodconv_vff.xml</code> y para el decodificador <code>Tu_modulo_decodconv_vff.xml</code>.</p>

<p>Los parámetros a modificar son <code>&lt;name&gt;</code>, <code>&lt;param&gt;</code>, <code>&lt;sink&gt;</code> y <code>&lt;source&gt;</code>, los bloques del decodificador y codificador convolucional quedan como sigue,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (Tu_modulo_encodconv_vff.xml)</span> <a href="http://viktorivan.github.io/downloads/code/Tu_modulo_encodconv_vff.xml">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;block&gt;</span>
</span><span class="line">  <span class="nt">&lt;name&gt;</span>Convolutional Encoder<span class="nt">&lt;/name&gt;</span>
</span><span class="line">  <span class="nt">&lt;key&gt;</span>Tu_modulo_encodconv_vff<span class="nt">&lt;/key&gt;</span>
</span><span class="line">  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class="line">  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class="line">  <span class="nt">&lt;make&gt;</span>Tu_modulo.encodconv_vff($val1, $val2, $val3)<span class="nt">&lt;/make&gt;</span>
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class="line"><span class="c">       Sub-nodes:</span>
</span><span class="line"><span class="c">       * name</span>
</span><span class="line"><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class="line"><span class="c">       * type --&gt;</span>
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Generator Polynomial<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>val1<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int_vector<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Constraint Length<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>val2<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Packet Size<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>val3<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Rate (1/N)<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>val4<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">  <span class="nt">&lt;sink&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">    <span class="nt">&lt;vlen&gt;</span>$val3<span class="nt">&lt;/vlen&gt;</span>
</span><span class="line">  <span class="nt">&lt;/sink&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">  <span class="nt">&lt;source&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">    <span class="nt">&lt;vlen&gt;</span>$val3 * $val4<span class="nt">&lt;/vlen&gt;</span>
</span><span class="line">  <span class="nt">&lt;/source&gt;</span>
</span><span class="line"><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (Tu_modulo_decodconv_vff.xml)</span> <a href="http://viktorivan.github.io/downloads/code/Tu_modulo_decodconv_vff.xml">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;block&gt;</span>
</span><span class="line">  <span class="nt">&lt;name&gt;</span>Convolutional Decoder<span class="nt">&lt;/name&gt;</span>
</span><span class="line">  <span class="nt">&lt;key&gt;</span>Tu_modulo_decodconv_vff<span class="nt">&lt;/key&gt;</span>
</span><span class="line">  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class="line">  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class="line">  <span class="nt">&lt;make&gt;</span>Tu_modulo.decodconv_vff($val1, $val2, $val3)<span class="nt">&lt;/make&gt;</span>
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class="line"><span class="c">       Sub-nodes:</span>
</span><span class="line"><span class="c">       * name</span>
</span><span class="line"><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class="line"><span class="c">       * type --&gt;</span>
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Generator Polynomial<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>val1<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int_vector<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Constraint Length<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>val2<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Packet Size<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>val3<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Rate (1/N)<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>val4<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">    <span class="nt">&lt;vlen&gt;</span>$val3 * $val4<span class="nt">&lt;/vlen&gt;</span>
</span><span class="line">  <span class="nt">&lt;/sink&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">  <span class="nt">&lt;source&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">    <span class="nt">&lt;vlen&gt;</span>$val3<span class="nt">&lt;/vlen&gt;</span>
</span><span class="line">  <span class="nt">&lt;/source&gt;</span>
</span><span class="line"><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Compilación de los bloques</em></p>

<p>Una vez ya realizado todos los procesos referentes al código de programación de los bloques de procesamiento se procede a integrarlos en el proyecto de GNU Radio. Esto se realiza por medio de una serie de comandos desde una terminal de linux en la raíz del proyecto. En caso de no tener una carpeta de build, se crea por medio de comandos de linux</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdir build
</span><span class="line">$ cd build</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Una vez dentro de la carpeta de build, se procede a compilar el proyecto</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cmake ../
</span><span class="line">$ make
</span><span class="line">$ sudo make install
</span><span class="line">$ sudo ldconfig</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>De esa manera queda integrado el módulo out-of-tree dentro de GNU Radio.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bloques de procesamiento de señales en GNU Radio]]></title>
    <link href="http://viktorivan.github.io/blog/2014/03/19/bloques-de-procesamiento-de-senales-en-gnu-radio/"/>
    <updated>2014-03-19T13:06:58-06:00</updated>
    <id>http://viktorivan.github.io/blog/2014/03/19/bloques-de-procesamiento-de-senales-en-gnu-radio</id>
    <content type="html"><![CDATA[<p>Introducción.</p>

<p>El proyecto de <a href="http://www.gnuradio.org">GNU Radio</a> permite el desarrollo de bloques de procesamiento de señales que pueden ser escritos tanto en lenguaje de programación Python o C++. Este tipo de módulos son conocidos como <code>out-of-tree</code>, ya que, aunque los módulos serán integrados dentro del catálogo de bloques de GNU Radio no se van a integrar al proyecto para su distribución.</p>

<!-- more -->

<p>Procedimiento.</p>

<p>Para crear un módulo out-of-tree se ejecuta desde una terminal de linux el siguiente comando</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gr_modtool create
</span><span class="line">Name of the new module:Tu_modulo
</span><span class="line">Creating out-of-tree module in ./gr-Tu_modulo... Done. 
</span><span class="line">Use 'gr_modtool add' to add a new block to this currently empty module. 
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>El nombre que se indique para el módulo es con el que va a aparecer en el catálogo de GNU Radio.</p>

<p>Para crear los bloques que integrarán el módulo se utiliza la herramienta <code>gr_modtool</code> en la carpeta raíz del proyecto. En este caso se creará un bloque que realizará la función de un convertidor binario a decimal para los tipos de datos float.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd gr-Tu_modulo
</span><span class="line">$ gr_modtool add
</span><span class="line">GNU Radio module name identified: Tu_modulo 
</span><span class="line">Enter code type: decimator 
</span><span class="line">Language: C++ 
</span><span class="line">Enter name of block/code (without module name prefix): bin2dec_ff 
</span><span class="line">Block/code identifier: bin2dec_ff 
</span><span class="line">Enter valid argument list, including default arguments: int vec_size 
</span><span class="line">Add Python QA code? [Y/n] 
</span><span class="line">Add C++ QA code? [y/N] 
</span><span class="line">Adding file 'lib/bin2dec_ff_impl.h'... 
</span><span class="line">Adding file 'lib/bin2dec_ff_impl.cc'... 
</span><span class="line">Adding file 'include/Tu_modulo/bin2dec_ff.h'... 
</span><span class="line">Editing swig/Tu_modulo_swig.i... 
</span><span class="line">Adding file 'python/qa_bin2dec_ff.py'... 
</span><span class="line">Editing python/CMakeLists.txt... 
</span><span class="line">Adding file 'grc/Tu_modulo_bin2dec_ff.xml'... 
</span><span class="line">Editing grc/CMakeLists.txt...
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>y a su vez, se desarrollará un bloque que realice la operación inversa, esto es, un convertidor decimal a binario.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gr_modtool add 
</span><span class="line">GNU Radio module name identified: Tu_modulo 
</span><span class="line">Enter code type: interpolator 
</span><span class="line">Language: C++ 
</span><span class="line">Enter name of block/code (without module name prefix): dec2bin_ff 
</span><span class="line">Block/code identifier: dec2bin_ff 
</span><span class="line">Enter valid argument list, including default arguments: int vec_size 
</span><span class="line">Add Python QA code? [Y/n] 
</span><span class="line">Add C++ QA code? [y/N] 
</span><span class="line">Adding file 'lib/dec2bin_ff_impl.h'... 
</span><span class="line">Adding file 'lib/dec2bin_ff_impl.cc'... 
</span><span class="line">Adding file 'include/Tu_modulo/dec2bin_ff.h'... 
</span><span class="line">Editing swig/Tu_modulo_swig.i... 
</span><span class="line">Adding file 'python/qa_dec2bin_ff.py'... 
</span><span class="line">Editing python/CMakeLists.txt... 
</span><span class="line">Adding file 'grc/Tu_modulo_dec2bin_ff.xml'... 
</span><span class="line">Editing grc/CmakeLists.txt...
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>de esta manera se han creado dos bloques, un decimador para el convertidor binario a decimal y un interpolador para el decimal a binario.</p>

<p>Los archivos donde se realizará la programación en código c++ se ubican en <code>~/gr-Tu_modulo/lib</code> y se llama <code>dec2bin_ff_impl.cc</code> para el convertidor decimal a binario y <code>bin2dec_ff_impl.cc</code> para el convertidor binario a decimal.</p>

<p><em>Convertidor binario a decimal</em></p>

<p>Dentro del archivo <code>bin2dec_ff_impl.cc</code> hay que indicar las librerías que se utilizarán, en este caso sólo requerimos la librería <code>math.h</code>, después de los include ya definidos agregamos:</p>

<pre><code>#include &lt;math.h&gt;
</code></pre>

<p>En la sección de <code>bin2dec_ff_impl::bin2dec_ff_impl(int vec_size)</code> se definen la cantidad de flujos de datos que manejará el bloque de procesamiento, en este caso, sólo es un flujo de entrada y uno de salida, el factor de decimación definido por la variable vec_size y además se asigna a la variable chunk el valor de vec_size, ya que vec_size representa la cantidad de bits que se requieren para convertir el número a decimal. </p>

<pre><code>bin2dec_ff_impl::bin2dec_ff_impl(int vec_size)
  : gr::sync_decimator("bin2dec_ff",
          gr::io_signature::make(1, 1, sizeof(float)),
          gr::io_signature::make(1, 1, sizeof(float)), vec_size)
{
	chunk = vec_size;
}
</code></pre>

<p>En la parte correspondiente a <code>// Do &lt;+signal processing+&gt;</code> es donde se realiza el procesamiento de datos que manipulará el bloque, para la conversión de binario a decimal se desarrolla el código de programación en C++, quedando de la siguiente manera:</p>

<pre><code>int
bin2dec_ff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    int j = 0, a = 0;
    for (int i = 0; i &lt; noutput_items * chunk; i = i + chunk){
    	out[j] = 0;
    	a = chunk - 1;
    	for (int k = 0; k &lt; chunk; k++){
    		out[j] = out[j] + (in[i + k] * pow (2,a));
    		a = a - 1;
    	}
    	j++;
    }

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>El archivo quedaría de la siguiente forma, ya con todas las modificaciones incluidas:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bin2dec_ff_impl.cc (bin2dec_ff_impl.cpp)</span> <a href="http://viktorivan.github.io/downloads/code/bin2dec_ff_impl.cpp">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cm">/* -*- c++ -*- */</span>
</span><span class="line"><span class="cm">/* </span>
</span><span class="line"><span class="cm"> * Copyright 2014 IVAN RODRIGUEZ.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class="line"><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class="line"><span class="cm"> * any later version.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class="line"><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class="line"><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class="line"><span class="cm"> * GNU General Public License for more details.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class="line"><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class="line"><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifdef HAVE_CONFIG_H</span>
</span><span class="line"><span class="cp">#include &quot;config.h&quot;</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;gnuradio/io_signature.h&gt;</span>
</span><span class="line"><span class="cp">#include &quot;bin2dec_ff_impl.h&quot;</span>
</span><span class="line"><span class="cp">#include &lt;math.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class="line">  <span class="k">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">bin2dec_ff</span><span class="o">::</span><span class="n">sptr</span>
</span><span class="line">    <span class="n">bin2dec_ff</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="n">gnuradio</span><span class="o">::</span><span class="n">get_initial_sptr</span>
</span><span class="line">        <span class="p">(</span><span class="k">new</span> <span class="n">bin2dec_ff_impl</span><span class="p">(</span><span class="n">vec_size</span><span class="p">));</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * The private constructor</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">bin2dec_ff_impl</span><span class="o">::</span><span class="n">bin2dec_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class="line">      <span class="o">:</span> <span class="n">gr</span><span class="o">::</span><span class="n">sync_decimator</span><span class="p">(</span><span class="s">&quot;bin2dec_ff&quot;</span><span class="p">,</span>
</span><span class="line">              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span>
</span><span class="line">              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">    	<span class="n">chunk</span> <span class="o">=</span> <span class="n">vec_size</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * Our virtual destructor.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">bin2dec_ff_impl</span><span class="o">::~</span><span class="n">bin2dec_ff_impl</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span>
</span><span class="line">    <span class="n">bin2dec_ff_impl</span><span class="o">::</span><span class="n">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class="line">			  <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class="line">			  <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">)</span>
</span><span class="line">   <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="n">in</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">        <span class="kt">float</span> <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">noutput_items</span> <span class="o">*</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">chunk</span><span class="p">){</span>
</span><span class="line">        	<span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        	<span class="n">a</span> <span class="o">=</span> <span class="n">chunk</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">        		<span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">in</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">pow</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">a</span><span class="p">));</span>
</span><span class="line">        		<span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        	<span class="p">}</span>
</span><span class="line">        	<span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// Tell runtime system how many output items we produced.</span>
</span><span class="line">        <span class="k">return</span> <span class="n">noutput_items</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="p">}</span> <span class="cm">/* namespace Tu_modulo */</span>
</span><span class="line"><span class="p">}</span> <span class="cm">/* namespace gr */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Convertidor decimal a binario</em></p>

<p>Para corroborar el correcto funcionamiento del bloque de convertidor binario a decimal se propone realizar un convertidor decimal a binario que realizará la operación inversa del bloque anterior.</p>

<p>El archivo donde se realiza la programación es <code>dec2bin_ff_impl.cc</code>. Como primer paso se indica la librería que utilizará el bloque de procesamiento, de la misma forma que se indicó en el bloque anterior.</p>

<pre><code>#include &lt;math.h&gt;
</code></pre>

<p>Nuevamente, en la sección de <code>dec2bin_ff_impl::dec2bin_ff_impl(int vec_size)
</code> se indica la cantidad de flujos de entrada y salida que manejará el bloque de procesamiento, así también el factor de interpolación definido por la variable vec_size y por último la variable chunk, quedando como sigue:</p>

<pre><code>dec2bin_ff_impl::dec2bin_ff_impl(int vec_size)
  : gr::sync_interpolator("dec2bin_ff",
          gr::io_signature::make(1, 1, sizeof(float)),
          gr::io_signature::make(1, 1, sizeof(float)), vec_size)
{
	chunk = vec_size;
}
</code></pre>

<p>En la sección de <code>// Do &lt;+signal processing+&gt;</code> se escribe el código que realizará la conversión decimal a binario.</p>

<pre><code>int
dec2bin_ff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    int l = 0, m = 0, a = 0, b[chunk];
    for (int i = 0; i &lt; noutput_items / chunk; i++){
    	a = in[i];
    	l = chunk - 1;
    	for (int j = 0; j &lt; chunk; j++){
    		b[j] = a % 2;
    		a = a / 2;	
    	}
    	for (int k = 0; k &lt; chunk; k++){
    		out[m] = b [l];
    		l = l - 1;
    		m++;
    	}
    }
</code></pre>

<p>El archivo completo queda de la siguiente manera:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dec2bin_ff_impl.cc (dec2bin_ff_impl.cpp)</span> <a href="http://viktorivan.github.io/downloads/code/dec2bin_ff_impl.cpp">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cm">/* -*- c++ -*- */</span>
</span><span class="line"><span class="cm">/* </span>
</span><span class="line"><span class="cm"> * Copyright 2014 IVAN RODRIGUEZ.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class="line"><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class="line"><span class="cm"> * any later version.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class="line"><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class="line"><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class="line"><span class="cm"> * GNU General Public License for more details.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class="line"><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class="line"><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifdef HAVE_CONFIG_H</span>
</span><span class="line"><span class="cp">#include &quot;config.h&quot;</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;gnuradio/io_signature.h&gt;</span>
</span><span class="line"><span class="cp">#include &quot;dec2bin_ff_impl.h&quot;</span>
</span><span class="line"><span class="cp">#include &lt;math.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class="line">  <span class="k">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">dec2bin_ff</span><span class="o">::</span><span class="n">sptr</span>
</span><span class="line">    <span class="n">dec2bin_ff</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="n">gnuradio</span><span class="o">::</span><span class="n">get_initial_sptr</span>
</span><span class="line">        <span class="p">(</span><span class="k">new</span> <span class="n">dec2bin_ff_impl</span><span class="p">(</span><span class="n">vec_size</span><span class="p">));</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * The private constructor</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">dec2bin_ff_impl</span><span class="o">::</span><span class="n">dec2bin_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class="line">      <span class="o">:</span> <span class="n">gr</span><span class="o">::</span><span class="n">sync_interpolator</span><span class="p">(</span><span class="s">&quot;dec2bin_ff&quot;</span><span class="p">,</span>
</span><span class="line">              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span>
</span><span class="line">              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">    	<span class="n">chunk</span> <span class="o">=</span> <span class="n">vec_size</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * Our virtual destructor.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">dec2bin_ff_impl</span><span class="o">::~</span><span class="n">dec2bin_ff_impl</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span>
</span><span class="line">    <span class="n">dec2bin_ff_impl</span><span class="o">::</span><span class="n">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class="line">			  <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class="line">			  <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="n">in</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">        <span class="kt">float</span> <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="n">chunk</span><span class="p">];</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">noutput_items</span> <span class="o">/</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">        	<span class="n">a</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">        	<span class="n">l</span> <span class="o">=</span> <span class="n">chunk</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">        		<span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">        		<span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>	
</span><span class="line">        	<span class="p">}</span>
</span><span class="line">        	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">        		<span class="n">out</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span> <span class="p">[</span><span class="n">l</span><span class="p">];</span>
</span><span class="line">        		<span class="n">l</span> <span class="o">=</span> <span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        		<span class="n">m</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        	<span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="c1">// Tell runtime system how many output items we produced.</span>
</span><span class="line">        <span class="k">return</span> <span class="n">noutput_items</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="p">}</span> <span class="cm">/* namespace Tu_modulo */</span>
</span><span class="line"><span class="p">}</span> <span class="cm">/* namespace gr */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Adicionalmente hay que declarar la variable <code>chunk</code> de tal forma que sea pública y poder utilizarla en las diferentes secciones del bloque de procesamiento, esto se hace modificando el archivo <code>bin2dec_ff_impl.h</code> para el convertidor binario a decimal y el archivo <code>dec2bin_ff_impl.h</code> para el convertidor decimal a binario. En la sección de <code>public</code> se agrega:</p>

<pre><code> public:
  bin2dec_ff_impl(int vec_size);
  int chunk;
  ~bin2dec_ff_impl();
</code></pre>

<p>Quedando los archivos como siguen</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bin2dec_ff_impl.h (bin2dec_ff_impl.c)</span> <a href="http://viktorivan.github.io/downloads/code/bin2dec_ff_impl.c">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* -*- c++ -*- */</span>
</span><span class="line"><span class="cm">/* </span>
</span><span class="line"><span class="cm"> * Copyright 2014 IVAN RODRIGUEZ.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class="line"><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class="line"><span class="cm"> * any later version.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class="line"><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class="line"><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class="line"><span class="cm"> * GNU General Public License for more details.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class="line"><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class="line"><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifndef INCLUDED_TU_MODULO_BIN2DEC_FF_IMPL_H</span>
</span><span class="line"><span class="cp">#define INCLUDED_TU_MODULO_BIN2DEC_FF_IMPL_H</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;Tu_modulo/bin2dec_ff.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class="line">  <span class="n">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">class</span> <span class="n">bin2dec_ff_impl</span> <span class="o">:</span> <span class="n">public</span> <span class="n">bin2dec_ff</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">     <span class="nl">private:</span>
</span><span class="line">      <span class="c1">// Nothing to declare in this block.</span>
</span><span class="line">
</span><span class="line">     <span class="nl">public:</span>
</span><span class="line">      <span class="n">bin2dec_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">);</span>
</span><span class="line">      <span class="kt">int</span> <span class="n">chunk</span><span class="p">;</span>
</span><span class="line">      <span class="o">~</span><span class="n">bin2dec_ff_impl</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Where all the action really happens</span>
</span><span class="line">      <span class="kt">int</span> <span class="nf">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class="line">	       <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class="line">	       <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="p">}</span> <span class="c1">// namespace Tu_modulo</span>
</span><span class="line"><span class="p">}</span> <span class="c1">// namespace gr</span>
</span><span class="line">
</span><span class="line"><span class="cp">#endif </span><span class="cm">/* INCLUDED_TU_MODULO_BIN2DEC_FF_IMPL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dec2bin_ff_impl.h (dec2bin_ff_impl.c)</span> <a href="http://viktorivan.github.io/downloads/code/dec2bin_ff_impl.c">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* -*- c++ -*- */</span>
</span><span class="line"><span class="cm">/* </span>
</span><span class="line"><span class="cm"> * Copyright 2014 IVAN RODRIGUEZ.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class="line"><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class="line"><span class="cm"> * any later version.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class="line"><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class="line"><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class="line"><span class="cm"> * GNU General Public License for more details.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class="line"><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class="line"><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class="line"><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifndef INCLUDED_TU_MODULO_DEC2BIN_FF_IMPL_H</span>
</span><span class="line"><span class="cp">#define INCLUDED_TU_MODULO_DEC2BIN_FF_IMPL_H</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;Tu_modulo/dec2bin_ff.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class="line">  <span class="n">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">class</span> <span class="n">dec2bin_ff_impl</span> <span class="o">:</span> <span class="n">public</span> <span class="n">dec2bin_ff</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">     <span class="nl">private:</span>
</span><span class="line">      <span class="c1">// Nothing to declare in this block.</span>
</span><span class="line">
</span><span class="line">     <span class="nl">public:</span>
</span><span class="line">      <span class="n">dec2bin_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">);</span>
</span><span class="line">      <span class="kt">int</span> <span class="n">chunk</span><span class="p">;</span>
</span><span class="line">      <span class="o">~</span><span class="n">dec2bin_ff_impl</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Where all the action really happens</span>
</span><span class="line">      <span class="kt">int</span> <span class="nf">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class="line">	       <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class="line">	       <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="p">}</span> <span class="c1">// namespace Tu_modulo</span>
</span><span class="line"><span class="p">}</span> <span class="c1">// namespace gr</span>
</span><span class="line">
</span><span class="line"><span class="cp">#endif </span><span class="cm">/* INCLUDED_TU_MODULO_DEC2BIN_FF_IMPL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Interfaz GNU Radio Companion</em></p>

<p>Los bloques dentro de GNU Radio Companion (GRC) son archivos xml que se ubican en <code>~/gr-Tu_modulo/grc</code>, para el convertidor binario a decimal se llama <code>Tu_modulo_bin2dec_ff.xml</code> y para el convertidor decimal a binario <code>Tu_modulo_dec2bin_ff.xml</code>.</p>

<p>Dentro del archivo xml hay varios parámetros que pueden ser personalizados, tal como el nombre del bloque, este parámetro se define en la línea correspondiente a <code>&lt;name&gt;</code>.</p>

<pre><code>&lt;name&gt;Binary To Decimal&lt;/name&gt;
</code></pre>

<p>En la parte de <code>&lt;param&gt;</code> se indica la variable de entrada del bloque</p>

<pre><code>  &lt;param&gt;
    &lt;name&gt;Vector size&lt;/name&gt;
    &lt;key&gt;vec_size&lt;/key&gt;
    &lt;type&gt;int&lt;/type&gt;
  &lt;/param&gt;
</code></pre>

<p>El conector de entrada del bloque de procesamiento se define en <code>&lt;sink&gt;</code></p>

<pre><code>  &lt;sink&gt;
    &lt;name&gt;in&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/sink&gt;
</code></pre>

<p>El conector de salida en <code>&lt;source&gt;</code></p>

<pre><code>  &lt;source&gt;
    &lt;name&gt;out&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/source&gt;
</code></pre>

<p>De igual manera se modifican las secciones de <code>&lt;name&gt;</code>, <code>&lt;param&gt;</code>, <code>&lt;sink&gt;</code> y <code>&lt;source&gt;</code> en el archivo <code>Tu_modulo_dec2bin_ff.xml</code> para el bloque de procesamiento del convertidor decimal a binario.</p>

<p>Los archivos quedarán finalmente de la siguiente forma:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (Tu_modulo_bin2dec_ff.xml)</span> <a href="http://viktorivan.github.io/downloads/code/Tu_modulo_bin2dec_ff.xml">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;block&gt;</span>
</span><span class="line">  <span class="nt">&lt;name&gt;</span>Binary To Decimal<span class="nt">&lt;/name&gt;</span>
</span><span class="line">  <span class="nt">&lt;key&gt;</span>Tu_modulo_bin2dec_ff<span class="nt">&lt;/key&gt;</span>
</span><span class="line">  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class="line">  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class="line">  <span class="nt">&lt;make&gt;</span>Tu_modulo.bin2dec_ff($vec_size)<span class="nt">&lt;/make&gt;</span>
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class="line"><span class="c">       Sub-nodes:</span>
</span><span class="line"><span class="c">       * name</span>
</span><span class="line"><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class="line"><span class="c">       * type --&gt;</span>
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Vector size<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>vec_size<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">  <span class="nt">&lt;sink&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/sink&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">  <span class="nt">&lt;source&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/source&gt;</span>
</span><span class="line"><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (Tu_modulo_dec2bin_ff.xml)</span> <a href="http://viktorivan.github.io/downloads/code/Tu_modulo_dec2bin_ff.xml">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;block&gt;</span>
</span><span class="line">  <span class="nt">&lt;name&gt;</span>Decimal To Binary<span class="nt">&lt;/name&gt;</span>
</span><span class="line">  <span class="nt">&lt;key&gt;</span>Tu_modulo_dec2bin_ff<span class="nt">&lt;/key&gt;</span>
</span><span class="line">  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class="line">  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class="line">  <span class="nt">&lt;make&gt;</span>Tu_modulo.dec2bin_ff($vec_size)<span class="nt">&lt;/make&gt;</span>
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class="line"><span class="c">       Sub-nodes:</span>
</span><span class="line"><span class="c">       * name</span>
</span><span class="line"><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class="line"><span class="c">       * type --&gt;</span>
</span><span class="line">  <span class="nt">&lt;param&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>Vector size<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>vec_size<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/param&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">  <span class="nt">&lt;sink&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/sink&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class="line"><span class="c">       * name (an identifier for the GUI)</span>
</span><span class="line"><span class="c">       * type</span>
</span><span class="line"><span class="c">       * vlen</span>
</span><span class="line"><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class="line">  <span class="nt">&lt;source&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class="line">  <span class="nt">&lt;/source&gt;</span>
</span><span class="line"><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Compilación de los bloques</em></p>

<p>Una vez ya realizado todos los procesos referentes al código de programación de los bloques de procesamiento se procede a integrarlos en el proyecto de GNU Radio. Esto se realiza por medio de una serie de comandos desde una terminal de linux en la raíz del proyecto. En caso de no tener una carpeta de build, se crea por medio de comandos de linux</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdir build
</span><span class="line">$ cd build</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Una vez dentro de la carpeta de build, se procede a compilar el proyecto</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cmake ../
</span><span class="line">$ make
</span><span class="line">$ sudo make install
</span><span class="line">$ sudo ldconfig</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>De esa manera queda integrado el módulo out-of-tree dentro de GNU Radio.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comunicaciones Cooperativas]]></title>
    <link href="http://viktorivan.github.io/blog/2013/10/20/comunicaciones-cooperativas/"/>
    <updated>2013-10-20T22:06:00-05:00</updated>
    <id>http://viktorivan.github.io/blog/2013/10/20/comunicaciones-cooperativas</id>
    <content type="html"><![CDATA[<p>Resumen.</p>

<p>Actualmente, las redes inalámbricas de banda ancha están en constante evolución debido al crecimiento en la demanda de aplicaciones móviles de datos, por lo que estas redes tienen que aumentar su capacidad de sistema, cobertura, datos y calidad de servicio. La implementación de estaciones de relay inalámbricos, especialmente cuando operan a half-duplex, permiten alcanzar estos objetivos sin realizar altos gastos <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Esto, aunado a la implementación de tecnologías como MIMO (Multiple Input Multiple Output) y sistemas basados en OFDM (Orthogonal Frequency Division Multiplexing) como OFDMA y SC-FDMA (Single Carrier - FDMA), permiten que el diseño de este tipo de redes puedan enfrentar los retos de compatibilidad con dispositivos de generaciones previas, minimizando así la complexidad y maximizando la eficiencia. En este artículo se analizará los diferentes tipos de protocolos de relay y escenarios, donde dispositivos de una antena pueden tener servicios exclusivos de dispositivos MIMO-OFDM.
<!-- more -->
I. Introducción.</p>

<p>MIMO es una tecnlogía que puede explotar de una manera eficiente el dominio espacial en los canales con desvanecimiento de los móviles, esto es, por medio de esta técnica se pueden tantos flujos de datos como antenas transmisoras y receptoras se dispongan en el canal, permitiendo aumentar de esta manera la capacidad de capacidad del canal inalámbrico convencional <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>La diversidad espacial consiste en tener múltiples antenas en el transmisor y/o receptor. Existen diversas configuraciones, tales como MISO, SIMO y MIMO. Con la presencia de más de una antena entre el tranmisor y receptor, se establecen diferentes canales entre cada par de antenas. Si los canales son independientes y con una correlación baja, se aprovecha la diversidad espacial.</p>

<p>Las comunicaciones cooperativas son un nuevo paradigma de las comunicaciones, ya que a partir de la naturaleza broadcast del canal inalámbrico se puede lograr que los nodos de comunicación se ayuden entre ellos. La implementación de redes de relays permite a los dispositivos sin capacidad MIMO (entiéndase dispositivos de una sola antena) aprovechar las ventajas de una transmisión en un canal MIMO a través de tecnologías como MIMO virtual, distribuido o cooperativo. En este tipo de tecnologías permite que nodos de relay fijos o móviles formen parte de un arreglo de antenas mayor, donde en conjunto presentarán una ganancia de diversidad, aunque ésta no será mayor a la ganancia de diversidad de un enlace MIMO punto a punto.</p>

<p>La forma como es procesada la señal recibida en el nodo relay, ya sea sólo amplificando y reenviando la señal recibida o incluso decodificando y reenviando la señal recibida, define el protocol de relay que es utilizado en la comunicación cooperativa. Existen tres protocolos principales, Amplifica-y-envía, Decodifica-y-envía y Comprime-y-envía, siendo el primero el de implementación mas sencillo y el último el mas complejo. Los primeros dos protocolos son los de mayor popularidad al momento de implementar estas técnicas, debido a que comprime-y-envía no ofrece grandes diferencias en ganancia y desempeño <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.   </p>

<p>II. Protocolos de Relay.</p>

<p>Las comunicaciones cooperativas generan trayectorias independientes entre el usuario y la estación base introduciendo un canal relay. El canal relay puede considerarse como un canal auxiliar del canal directo entre la fuente y el destino. El nodo relay se ubica a varias longitudes de onda de distancia de la fuente, lo que garantiza que el canal relay tenga un desvanecimiento independiente del canal directo, lo que eventualmente permitirá tener un canal MIMO de rango completo.</p>

<p>Los protocolos de comunicaciones cooperativas pueden ser clasificadas en esquemas de relay fijos y esquemas de relay adaptivos. Dentro de relay fijo, los recursos del canal son divididos entre la fuente y el relay de una manera determinística (fija). El procesamiento en el relay es distinto de acuerdo al protocolo empleado. En un protocolo de relay fijo Amplifica-y-envía, el relay simplemente escala la versión recibida y transmite una versión amplificada de ella hacia el destino. Otro posible procesamiento en el nodo relay es cuando la relay decodifica la señal recibida, la vuelve a codificar y la retransmite al destino, este tipo de relaying es conocido como protocolo de relay fijo Decodifica-y-envía.</p>

<p>El relay fijo tiene la ventaja de una implementación sencilla, pero su principal desventaja es la baja eficiencia del ancho de banda, esto se debe a que la mitad de los recursos del canal son asignados al relay para transmisión, lo cual reduce la tasa en conjunto. En caso de que el canal sea muy malo, es posible que el relay reenvie información incorrecta, afectando el desempeño del conjunto. Una manera de combatir este problema es utilizando técnicas de relay adaptivos o selectivos.</p>

<p>En relay selectivo, si la relación señal a ruido (SNR) recibida en el relay supera cierto límite, el relay realiza una operación de Decodifica-y-envía o Amplifica-y-envia en el mensaje, en caso de que el canal entre la fuente y el relay tenga un desvanecimiento severo, tal que el SNR es menor al umbral, el relay se libera, esto es, no retransmite información alguna.</p>

<p>El esquema de transmisión de un protocolo de cooperación se divide en dos fases para evitar interferencias.</p>

<p>Fase 1: Una fuente envía su información al destino y la información también es recibida por el relay al mismo tiempo.
Fase 2: El relay envía su información al destino. </p>

<p>II.1 Amplifica y envía.</p>

<p>En este protocolo, el relay amplifica la señal de la fuente y envía esta a su destino de una forma ideal para ecualizar el efecto del canal entre la fuente y el relay. El relay hace esto simplemente escalando la señal recibida por un factor que es inversamente proporcional a la potencia recibida.</p>

<p>El destino recibe dos copias de la señal x a través del enlace de la fuente y del enlace del relay. Existen diversas técnicas para combinar las dos versiones de la señal recibida. La técnica óptima que maximiza todos los SNR (SNR de la fuente al relay mas el SNR de la fuente al destino) es el MRC (Maximal Ratio Combining). El combinador MRC requiere de un detector coherente que tenga conocimiento de todos los coeficientes del canal, además, el SNR a la salida del MRC es igual a la suma de todos los SNR recibidos por ambos lados.   </p>

<p>II.2 Decodifica y envía.</p>

<p>Este protocolo consiste en que el nodo relay decodifique la señal recibida, la vuelva a codificar y entonces retransmita esta nueva señal al destino. Si la señal en el relay es incorrecta, esta puede ser reenviada al destino y su decodificación no tendría sentido.</p>

<p>La ventaja de Decodifica-y-envía sobre Amplifica-y-envía es la reducción de los efectos del ruido aditivo en el relay, esto disminuye la posibilidad de enviar señales erróneamente detectadas a su destino, ya que en caso de enviarse provocaría un error en la propagación que puede disminuir el desempeño del sistema. La información mutua entre la fuente y el destino está limitada por la información mutua del enlace mas debil entre la fuente y el destino y el canal combinado de la fuente al relay y el relay al destino.  </p>

<p>III. Conclusiones</p>

<p>Aunque en un principio no existe una mejora en la red al implementar un protocolo de cooperación cooperativa, esto debido al uso de dos fases o etapas para realizar una comunicación y la presencia de un canal half duplex, es una opción barata y sencilla para aumentar la cobertura y capacidad de una célula, ya que la instalación de una estación base o nueva célula requiere de altos costos en comparación de un grupo de nodos de relay que va a ser controlado por una sola estación base. Así mismo, los tiempos de procesamiento hoy en día son menores y cada vez con mejor eficiencia, por lo que el usuario final no notaría la presencia de protocolos de relay y si un aumento en la capacidad de canal y velocidad de transmisión con un equipo limitado en antenas físicas y procesamiento.</p>

<p>Referencias.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Hoymann, C.; Wanshi Chen; Montojo, J.; Golitschek, A.; Koutsimanis, C.; Xiaodong Shen, “Relaying operation in 3GPP LTE: challenges and solutions,” Communications Magazine, IEEE , vol.50, no.2, pp.156,162, February 2012.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Cheng-Xiang Wang; Xuemin Hong; Xiaohu Ge; Xiang Cheng; Gong Zhang; Thompson, J., “Cooperative MIMO channel models: A survey,” Communications Magazine, IEEE , vol.48, no.2, pp.80,87, February 2010.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Gerhard Kramer, Ivana Marić, and Roy D. Yates. 2006. Cooperative communications. Found. Trends Netw. 1, 3 (August 2006), 271-425.<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capa física de LTE-A]]></title>
    <link href="http://viktorivan.github.io/blog/2013/09/29/capa-fisica-de-lte-a/"/>
    <updated>2013-09-29T12:43:00-05:00</updated>
    <id>http://viktorivan.github.io/blog/2013/09/29/capa-fisica-de-lte-a</id>
    <content type="html"><![CDATA[<p>Resumen.</p>

<p>Hoy en día, la demanda de capacidad y servicios a altas tasas de transmisión en los sistemas celulares exige un mejor desempeño, así también, las limitaciones en el espectro radio-eléctrico obligan a los sistemas de comunicaciones modernos a lograr una eficiencia espectral alta. En este artículo se analizará la capa física (PHY) del estandar LTE-A (Long Term Evolution - Advanced) que el grupo de trabajo 3GPP (3rd Generation Partnership Project) propone para alcanzar los requisitos de cuarta generación (4G) propuesto por la ITU-R (International Telecommunication Union), el cuál define tasas de transmisión de hasta 1 Gbps en su enlace de bajada y 500 Mbps en su enlace de subida <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. 
<!-- more -->
I. Introducción.</p>

<p>Una de las claves para alcanzar altas tasas de transmisión es la implementación de arreglos de antenas, los cuales permiten la multicanalización espacial, conocido normalmente como MIMO (Multiple Input Multiple Output), además, pueden ser apoyadas por técnicas de relay que consiste en la transmisión y recepción de señales hacia y desde los usuarios ubicados dentro de una célula para reducir la distancia entre el transmisor y receptor y por lo tanto permitir altas tasas de transmisión <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. </p>

<p>Otra técnica que se ha implementado en redes de nueva generación es OFDM (Orthogonal Frequency Division Multiplexing), el cuál se basa en la transmisión de datos a través de subportadoras ortogonales, donde cada símbolo se transmite en una subportadora disminuyendo los efectos de multitrayectoria en el canal.  </p>

<p>LTE-A en su enlace de bajada propone una modificación al método de acceso al medio (MAC), este se conoce como OFDMA (Orthogonal Frequency Division Multiple Access) y permite asignar un número de subportadoras distintos a los usuarios móviles, esto de acuerdo a su tasa de transmisión. Además, en el enlace de subida se propone SC-FDMA (Single Carrier – Frequency Division Multiple Access), que permite a varios usuarios usar una parte de las subportadoras disponibles con un PAPR  bajo (Peak to Average Power Ratio) <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<p>Así también, se ha implementado una nueva técnica en la capa física conocida como Carrier Aggregation, el cuál permite la transmisión de datos a altas velocidades dentro de un grupo de anchos de banda angostos, los cuales, en conjunto alcanzan una mayor capacidad <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>II. Tecnologías en capa PHY y MAC.</p>

<p>II.1. Métodos de acceso al medio (OFDMA y SC-FDMA).</p>

<p>Aunque OFDMA es una técnica utilizada en un principio en redes inalámbricas fijas alrededor de 2004 en el estandar IEEE802.16d, no fue hasta 2005 que 3GPP la adoptó como una técnica para la capa física como una evolución de WCDMA (Wideband CDMA) basado en UMTS (3G). Esta modificación se incluye en el estandar como 3GPP LTE Release 8, la cual fue terminada en 2008. </p>

<p>OFDMA permite la asignación de recursos como tiempo y frecuencia a ciertos usuarios en específico, esto se logra dividiendo de manera lógica estas unidades de recursos básicos, los cuales consisten en sub-bandas de frecuencia de uno o más símbolos OFDM en el dominio del tiempo, además una sub-banda se conforma de varias subportadoras. Las unidades de recursos básicos son proyectadas a los paquetes físicos de OFDMA a través de uno de los dos esquemas de permutacion, el primero consiste en distribuir los datos a transmitir en subportadoras no contiguas usando la diversidad en frecuencia, lo que permite la reducción de la probabilidad de error por el desvanecimiento selectivo en frecuencia o por interferencia del canal. El segundo esquema, envía los datos en subportadoras contiguas, logrando diversidad de multiusuario y calendarización selectiva en frecuencia.</p>

<p>La implementación de OFDMA en la capa física de LTE-A implica algunas complicaciones, tales como el PAPR, el cuál es particularmente alto en sistemas OFDM/OFDMA, esto se debe a que la forma de onda del símbolo OFDMA en el dominio del tiempo es la superposición de ondas senoidales donde la frecuencia es n veces la subportadora mas baja, donde n son los puntos de la IFFT. Un PAPR alto necesita de amplificadores de frecuencia con una salida lineal sobre un rango de frecuencias grande. Este es un factor del bajo rendimiento de la batería y el incremento del costo de los dispositivos móviles basados en OFDMA. </p>

<p>Para disminuir el PAPR, 3GPP LTE-Advanced propone usar en el enlace de subida una tecnología conocida como SC-FDMA o DFTS-OFDM (Direct Fourier Transform Spread – OFDM), esta técnica consiste en precodificar el símbolo de datos con una transformada discreta de Fourier, como se muestra en la Figura 1, y las muestras obtenidas de la etapa de precodificación son transmitidas en paralelo en un grupo de subportadoras. La forma de onda resultante en el dominio del tiempo tiene las características de una forma de onda de una señal de portadora única, esto es, tiene un PAPR bajo aunque la forma de onda no es de una señal de portadora única <sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. </p>

<p>El transmisor SC-FDMA maneja bloques de tamaño N, los cuales contienen las muestras (valores complejos) de los símbolos modulados digitalmente, la etapa de DFT de N-puntos genera una representación de los símbolos de entrada en el dominio del tiempo. Las muestras son proyectadas en algunas de las M subportadoras disponibles de la etapa de IFFT de M-puntos, donde M&gt;N, transformando la amplitud de las subportadoras en una señal compleja en el dominio del tiempo. El valor de N depende de la cantidad de usuarios o del factor de expansión Q y la cantidad de subportadoras disponibles (N=M/Q).</p>

<p>Las muestras obtenidas de la etapa de DFT son proyectadas a la subportadora correspondiente a través de dos métodos: proyección distribuida de subportadoras y proyección localizada. En el modo distribuido (también conocido como DFDMA, Distributed Frequency Division Multiple Access), la salida del DFT es distribuida sobre las subportadoras de todo el ancho de banda disponible, esto es, en todas las subportadoras ortogonales necesarias, y las restantes se acompletan con ceros. En el modo localizado (LDFMA) la salida del DFT es asignada a subportadoras contiguas, rellenando con ceros las subportadoras mayores y/o menores en frecuencia.</p>

<p>En DFDMA, si la condición de M=Q*N se cumple, quiere decir que las subportadores ocupadas son equidistantes entre si. Esta condición es conocida como modo de entrelazado (IFDMA), su implementación es un caso especial de SC-FDMA, ya que el transmisor SC-FDMA modula la señal exclusivamente en el dominio del tiempo sin las etapas de DFT e IFFT. </p>

<p>Dependiendo del método de proyección, los símbolos modulados de SC-FDMA pueden ser diferentes en el dominio del tiempo. Para IFDMA, los símbolos modulados en el tiempo son una repetición de los símbolos de entrada originales, sólo con un factor de escalamiento de 1/Q y alguna rotación de fase. DFDMA y LFDMA tienen la misma estructura de símbolo en el tiempo y tiene copias exactas de los símbolos en el dominio del tiempo con un factor de escalamiento de 1/Q en las N posiciones de las muestras, y los valores intermedios son la suma de todos los símbolos en el tiempo con una peso complejo diferente. Por esta razón hay mas fluctuaciones y picos en la amplitud de DFDMA y LFDMA <sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>.</p>

<p>II.2. Carrier Aggregation.</p>

<p>La técnica de Carrier Aggregation (CA) o portadoras adicionales permite juntar varios componentes de portadora (CC) de LTE, cada una con un ancho de banda de 20 MHz, hasta lograr un ancho de banda en conjunto de 100 MHz (hasta 5 CC), por lo que podría observarse como un CC con un ancho de banda de 100 MHz. El objetivo de agrupar las portadoras es garantizar la compatibilidad con dispositivos LTE, los cuales utilizan un ancho de banda de 20 MHz (LTE Rel. 8).</p>

<p>Existen tres configuraciones de CA: CA contiguo, CA no cont¡guo en la misma banda y CA no contiguo en diferentes bandas. El modo de CA contiguo asigna a un usuario de LTE-A un grupo de CC como un solo CC, aunque un usuario de LTE solo puede ver a cada CC individualmente. En el caso de no tener disponibles varios CC contiguos, la configuración de CA no contiguo permite al usuario de LTE-A tener el ancho de banda que requiere para su transmisión. En caso de existir la presencia de dos usuarios LTE, es posible que los CC disponibles no sean contiguos, pero la suma de todos los CC sin asignar en la banda puede permitir la asignación del ancho de banda requerido por el usuario de LTE-A.</p>

<p>Además, en caso de que no sean suficientes los CC existentes para acompletar el ancho de banda solicitado por el usuario de LTE-A, los CC disponibles en otras bandas de frecuencia pueden ser utlizados, esta técnica es conocida como CA no contigua en bandas diferentes. En este esquema, un usuario de LTE-A puede presentar varias condiciones de canal distintas debido al uso de múltiples bandas con frecuencias diferentes, así como retardos de propagación distintos entre las bandas por estar conectado a diferentes estaciones base al mismo tiempo <sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>.</p>

<p>II.3 Virtualización.</p>

<p>El transmisor de LTE-A incluye la capacidad de incrementar la ganancia por diversidad a través de un esquema de transmisión de 8 antenas con sólo 4 antenas físicas en el dispositivo, en este caso, se agregan 4 antenas virtuales. En el caso de un arreglo de 6x6 y sólo se tienen 4 antenas físicas, es posible agregar 2 antenas virtuales. La virtualización es posible con precoding y un pequeño retardo al proyectar cada flujo de diversidad en el grupo de antenas físicas para asi lograr una antena virtual.</p>

<p>El transmisor de LTE-A para el enlace de subida es capaz de transmitir 2 TB al mismo tiempo, esto sólo es posible con un esquema MIMO de 4x4 antenas a través de virtualización, ya que el dispositivo del usuario cuenta con 2 antenas físicas para la transmisión de datos. </p>

<p>III. Estructura del transmisor. </p>

<p>La estructura del transmisor para el enlace de bajada entre la estación base y los usuarios está definida por <sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>, donde la técnica de OFDMA es el método de acceso al medio (MAC). Debido a las limitantes de los dispositivos móviles (tanto en potencia como en tamaño), el transmisor para el enlace de subida tiene a SC-FDMA como técnica de acceso al medio. Existen tres tipos de canales lógicos de transporte para el transporte de datos, el canal de broadcast o difusión (PBCH) utilizado para la transmisión la información básica de la configuración del sistema; el canal multicast o multidifusión (PMCH) utilizado para la transmisión de servicios, tales como TV; y el canal compartido de enlace de bajada (PDSCH), que es el canal principal de datos, utilizado para transmitir los bloques de datos conocidos como bloques de transporte (TB), estos bloques son proveídos por la capa MAC (Medium Access Control). En este estandar, es posible transmitir hasta dos TB al mismo tiempo por un usuario de LTE-A tanto en el enlace de subida como de bajada.</p>

<p>En el caso de carrier aggregation, la transmisión sobre múltiples subportadoras corresponde a múltiples y diversos canales de transporte e incluso a procesos independientes de la capa física, parecido a tener varios transmisores en el mismo dispositivo para enviar datos en diferentes bandas de frecuencia.</p>

<p>De acuerdo a <sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>, los procesos de la capa PHY son:</p>

<ol>
  <li>Inserción de CRC de 24 bits.</li>
  <li>Codificación de canal: Turbo códigos basados en entrelazado interno QPP (Permutación Polinomial Cuadrática) con terminación de trellis.</li>
  <li>Proceso ARQ híbrido de capa PHY.</li>
  <li>Entrelazado de canal.</li>
  <li>Aleatorización.</li>
  <li>Modulación digital.</li>
  <li>Precodificación DFT.</li>
  <li>Proyección a capas y precodificación.</li>
  <li>Proyeccion a antenas.</li>
</ol>

<p>III.1 Segmentación en bloques de código e inserción de CRC.</p>

<p>Al recibir un bloque de transporte (TB), este es segmentado en varios bloques de código de acuerdo al esquema de transmisión a utilizar. Existen tres esquemas de inserción de CRC, en el esquema 1, se calcula el CRC y se inserta en cada segmento independientemente. En el segundo esquema, el cálculo del CRC de los primeros segmentos de bloques de código es diferente al del último. Para los los primeros segmentos, el CRC se calcula y se inserta en cada bloque de manera independiente. Los bits de CRC insertados en el último bloque se calculan basándose en todos los bits de información del bloque de transporte. En el tercer esquema, se calcula un CRC a nivel de TB, esto es, considerando todos los bits de información del TB. Tanto el bloque de transporte como el CRC del TB es segmentado en varios bloques de código.</p>

<p>Los dos polinomios generadores cíclicos para L = 24 son conocidos como gCRC24A (D) y gCRC24B (D):</p>

<p>gCRC24A (D) = D24 + D23 + D18 + D17 + D14 + D11 + D10 + D7 + D6 + D5 + D4 + D3 + D + 1.   (1)
gCRC24B (D) = D24 + D23 + D6 + D5 + D + 1.        (2)</p>

<p>El polinomio gCRC24A es utilizado para el cálculo de CRC para el bloque de transporte de UL-SCH, DL- SCH, PCH y MCH. </p>

<p>En LTE-A se especifican un tamaño mínimo y máximo para el bloque de código, esto es para asegurar la compatibilidad con el turbo entrelazado, el tamaño mínimo es de 40 bits y el máximo de 6144 bits, si la longitud del bloque de entrada es mayor que el tamaño máximo de entrada, este bloque es segmentado.</p>

<p>III.2 Turbo codificación.</p>

<p>El turbo código utilizado es un codificador convolucional concatenado en paralelo (PCCC) con dos codificadores de 8 estados y tasa 1/2, además de un entrelazado polinomial de permutación cuadrática “libre de contención”. La función de transferencia para cada codificador está dado por:</p>

<p>G(D) = [1, g1 (D)/g0 (D)],                                   (3)</p>

<p>donde</p>

<p>g0 (D) = 1 + D2 + D3 , g1 (D) = 1 + D + D3 .       (4)</p>

<p>El turbo código de tasa 1/3 genera un flujo de bits sistemáticos, un flujo de bits de paridad del primer codificador convolucional y un flujo de bits de paridad del segundo codificador convolucional.</p>

<p>La función del entrelazado en el segundo codificador convolucional es repartir los bits de información de tal manera que al presentarse un error, los dos códigos se vean afectados de una manera distinta permitiendo que los datos puedan ser recuperados todavía. La relación entre el índice de salida i y el índice de entrada Π(i) satisface la siguiente forma cuadrática: </p>

<p>Π(i) = f1 · i + f2 · i2 mod K.                                 (5)</p>

<p>Donde K es el número de bits de entrada del entrelazado QPP. Los valores comunes de f1 y f2 son el máximo comun divisor de f1 y K y debe ser entre 1 y cualquier factor primo de K divido entre f2.</p>

<p>III.3 Proceso ARQ híbrido de capa física.</p>

<p>Los bits de entrada del bloque de entrelazado son los bits del flujo sistemático, primera paridad y segunda paridad. El entrelazado se logra escribiendo a lo largo de los renglones en una matriz rectangular de 32 columnas, se permutan las columnas de la matriz y por último la lectura de la matriz es por renglones. La permutación entre columnas para la matriz se basa en un patrón de bit en reversa, esto es, para la columna 0001, el bit en reversa es 1000.</p>

<p>Un entrelazado adicional se realiza sólo entre los bits de paridad 1 y paridad 2, los bits sistemáticos no son entrelazados, esto es para garantizar un cantidad igual de bits de paridad 1 y paridad 2 en la transmisión.</p>

<p>III.4 Entrelazado de canal.</p>

<p>Este sub-bloque consiste en un entrelazado sencillo donde los bits se guardan en una matriz rectangular renglón por renglón y se leen columna por columna.</p>

<p>III.5 Aleatorización.</p>

<p>Los bits de código entregados por la etapa anterior es multiplicado (operación or-exclusiva) por una secuencia aleatoria a nivel de bit el cuál consiste en el indentificador único de la célula. El uso de diferentes secuencias de aleatorización de las células vecinas permite que la señal interferente después del des-aleatorizarla sea variada, asegurando la completa utilización de la ganancia por procesamiento obtenida del código de canal. </p>

<p>III.6 Modulación digital.</p>

<p>El conjunto de esquemas de modulación incluye QPSK, 16-QAM y 64-QAM, los cuales tienen dos, cuatro y seis bits por símbolo digital respectivamente.</p>

<p>III.7 Precodificación DFT.</p>

<p>Los símbolos modulados son agrupados en bloques de M símbolos para el bloque de DFT de tamaño M, donde M corresponde a el número de subportadoras asignadas para la transmisión. </p>

<p>El tamaño de la DFT debe ser una constante múltiplo de 12, desde 12 hasta 204, donde la DFT puede ser implementada como una combinación de procesos de FFT de complejidad baja radix-2, radix-3 y radix-5. Los tamaños de la DFT que no son permitidos son 60, 84, 120, 132, 156, 168, 180 y 204.</p>

<p>III.8 Proyección de capas y precodificación.</p>

<p>Los símbolos complejos son proyectadas en uno, dos o cuatro capas de manera secuencuial, esto es, en el caso de dos capas los símbolos impares son proyectadas a la primera capa y los símbolos pares son proyectadas en la segunda capa. En el modo sencillo, los símbolos son proyectados a una capa; en el modo de diversidad, los símbolos son proyectados en dos y cuatro capas, dependiendo de la cantidad de antenas a utilizar; en modo de multicanalización espacial, los símbolos son proyectados en dos, tres o cuatro capas, en este caso el número de capas siempre es igual o menos al número de antenas utilzadas. </p>

<p>Existen tres tipos de precodificación: multicanalización espacial, diversidad en la transmisión y transmisión de una antena. Dentro de multicanalización espacial hay dos esquemas: precodificación con retardo largo de diversidad de retardo cíclico (CDD), también conocido como multicanalización espacial de lazo abierto y precodificación sin CDD también conocido como multicanalización espacial de lazo cerrado. </p>

<p>Para la transmisión sobre un puerto de antena no se realiza procesamiento alguno sobre los símbolos, para la diversidad en la transmisión se utiliza un esquema espacio-frecuencia de Alamouti para dos y cuatro antenas, para la multicanalización espacial se utiliza un libro de códigos configurado por el eNodeB y el dispositivo del usuario cuando es requerido.</p>

<p>III.9 Proyección hacia las antenas.</p>

<p>El esquema del transmisor se basa en un transmisor OFDM convencional. Una ranura se conforma por 7 símbolos OFDM con una duración de 0.5 ms, una subtrama se conforma por dos ranuras, esto corresponde a un TTI (Transmission Time Interval) con una duración de 1 ms. Una trama de radio dura 10 ms, por lo que ésta se conforma por 10 subtramas o 10 TTI con una duración de 10 ms. El espacio entre las subportadoras OFDM es de 15 KHz, donde 12 subportadoras forman un bloque de recursos (RB). El RB puede contener desde 6 hasta 100 bloques. Existen dos tipos de prefijos cíclicos para los 7 símbolos OFDM, el prefijo normal de longitud 160 x Ts (para el primer símbolo) y otro de 144 x Ts (para el resto de los símbolos OFDM); y el prefijo extendido de 512 x Ts (para todos los símbolos OFDM), donde Ts = 1/(2048/15 KHz) el cuál es el espacio entre las subportadoras. El ancho de banda del sistema es entre 1.08 MHz (6 RB) y 19.8 MHz (110 RB).</p>

<p>IV. Modos de transmisión.</p>

<p>LTE y LTE-A han incluido el concepto de capas, esto consiste en asignar los bloques de transporte a la antena correspondiente para su transmisión; esta demás mencionar que la cantidad de símbolos modulados es el mismo e igual a la suma de los símbolos a transmitir por cada antena. Existen varios modos de transmisión en LTE-A que indican la manera en cómo uno o dos bloques transportes, después de la modulación digital, son proyectados y procesados hacia las diferentes antenas del dispositivo.  </p>

<p>Los modos de transmisión son:</p>

<ol>
  <li>Modo de transmisión 1: Transmisión de una antena. </li>
  <li>Modo de transmisión 2: Diversidad en la transmisión.</li>
  <li>Modo de transmisión 3: Precodificación de lazo abierto basado en libro de códigos para el caso de más de una capa, diversidad en la transmisión en caso de transmisión de grado uno.</li>
  <li>Modo de transmisión 4: Precodificación de lazo cerrado basado en libro de códigos.</li>
  <li>Modo de transmisión 5: Versión MIMO multiusuario del modo de transmisión 4.</li>
  <li>Modo de transmisión 6: Caso especial de precodificación de lazo cerrado basado en libro de códigos limitado a transmisión de una capa.</li>
  <li>Modo de transmisión 7: Precodificación Release-8 no basado en libro de códigos para una capa de transmisión. </li>
  <li>Modo de transmisión 8: Precodificación Release-9 no basado en libro de códigos hasta dos capas de transmisión. </li>
  <li>Modo de transmisión 9: Precodificación Release-10 no basado en libro de códigos hasta 8 capas.</li>
</ol>

<p>Estos modos de transmisión sólo son para el envío de DL-SCH.</p>

<p>En el modo de diversidad en la transmisión, tanto el transmisor como el receptor usan todas las antenas para disminuir los efectos de desvanecimiento por multitrayectoria. Este esquema se basa en códigos de bloque espacio-frecuencia de Alamouti y maneja dos y cuantro antenas.</p>

<p>Cuando se utiliza el modo de diversidad en la tansmisión, sólo se puede transmitir un TB por usuario, esto es porque los símbolos son enviados bajo el esquema de Alamouti siendo las subportadoras adyacentes.</p>

<p>En el modo de multicanalización espacial, tanto en lazo abierto como cerrado, LTE-A permite que cada antena tenga un flujo de datos independiente. Cabe mencionar que este modo no esta estandarizado por 3GPP LTE Advanced Rel 10, permitiendo la libre implementación de cualquier algoritmo para multicanalización espacial.</p>

<p>El procedimiento básico para la precodificación basada en libro de códigos consiste en proyectar los símbolos modulados correspondientes a uno o dos bloques de transporte a múltiples capas. La cantidad de capas varia desde una hasta al cantidad de antenas presentes en el dispositivo. La multicanalización espacial de lazo abierto abierta está orientado a usuarios de movilidad alta, donde el transmisor no tiene conocimiento del canal. El esquema de precodificación utilizado en este modo se basa en CDD (Cyclic Delay Diversity), donde una serie definida de matrices precodificadas son aplicadas sobre cada RE (Resource Element); como resultado, se obtiene diversidad en el dominio de la frecuencia debido al retardo aplicado en cada RE, incluso si el canal del RE no lo necesita, como es en el caso de desvanecimiento plano <sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>. </p>

<p>El caudal eficaz máximo posible por LTE-A se obtiene en el modo de multicanalización espacial de lazo cerrado, pero esta técnica requiere de la información del estado del canal en el transmisor (CSIT) y el usuario debe tener una movilidad de baja a media así como el canal un SNR de medio a alto.</p>

<p>Cuando el canal es perfectamente conocido por el transmisor, el esquema de multicanalización óptimo es la precodificación por descomposición de valores singulares (SVD) <sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup>, el cual descompone espacialmente el canal MIMO en varios canales virtuales ortogonales entre sí.</p>

<p>VI. Conclusiones.</p>

<p>Este artículo es una revisión de las diferentes etapas que conforman la capa PHY del estandar LTE-A, donde la implementación de SC-FDMA en los dispositivos móviles permite un gran ahorro en la carga de la batería; así también, este estandar permite el uso de un símbolo OFDM por varios usuarios de manera simultánea, a través de OFDMA y SC-FDMA para el enlace de bajada y subida respectivamente. La técnica de Carrier Aggregation (CA) ofrece a los dispositivos móviles un mayor ancho de banda (hasta 100 MHz) agrupando varios componentes de portadora (CC). Y la implementación de las antenas virtuales (por precodificación y un pequeño retardo CCD) permiten incrementar los modos de transmisión hasta en arreglos de antenas de 8x8, lo cuál permite la libre implementación de varias técnicas de diversidad en los dominios espacial, frecuencia y tiempo.</p>

<p>VII. Referencias.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Stefan Parkvall, Erik Dahlman, “LTE-Advanced – Evolving LTE towards IMT-Advanced” in Vehicular Technology Conference, 2008. VTC 2008-Fall. IEEE 68th.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Jolly Parikh, Anuradha Basu, “LTE Advanced: The 4G Mobile Broadband Technology” in International Journal of Computer Applications, Volume 13-No. 5, January 2011.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Shirish Nagaraj, Sanjeev Garg, Frank Liang, “Lab Performance Analysis of a 4G LTE Prototype” in Wireless Communications and Networking Conference, 2009. WCNC 2009. IEEE.<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>Guangxiang Yuan, Xiang Zhang, “Carrier Aggregation for LTE-Advanced Mobile Communication Systems”, Communications Magazine, February 2010.<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>Andreas Maeder, Nader Zein, “OFDMA in the Field: Current and Future Challenges” ACM SIGCOMM Computer Communication Review , Volume 40, Number 5, October 2010.<a href="#fnref:5" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p>Hyung G. Myung, “Introduction to Single Carrier FDMA”, 15th European Signal Processing Conference (EUSIPCO 2007), Poznan, Poland, September 3-7, 2007. <a href="#fnref:6" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:7">
      <p>Ian F. Akyildiz, David M. Gutierrez-Estevez, “The evolution to 4G cellular systems: LTE-Advanced”, Physical Communication 3, pages 217-244, 2010.<a href="#fnref:7" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:8">
      <p>3GPP TS 36.211 V8.0.0 (2007-09).<a href="#fnref:8" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:9">
      <p>3GPP TS 36.300 version 9.4.0 Release 9 , ETSI, 2010.<a href="#fnref:9" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:10">
      <p>CDD precoding for 4Tx antennas. Technical Report R1-072019, 3GPP, 2007. <a href="#fnref:10" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:11">
      <p>A. Goldsmith. Wireless Communications. Cambridge University Press, 2005. <a href="#fnref:11" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
