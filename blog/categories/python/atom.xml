<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Iván Rodríguez]]></title>
  <link href="http://viktorivan.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://viktorivan.github.io/"/>
  <updated>2015-11-09T16:29:56-06:00</updated>
  <id>http://viktorivan.github.io/</id>
  <author>
    <name><![CDATA[Iván Rodríguez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bloques de procesamiento de señal de GNU Radio en Python]]></title>
    <link href="http://viktorivan.github.io/blog/2015/11/02/bloques-de-procesamiento-de-senal-de-gnu-radio-en-python/"/>
    <updated>2015-11-02T09:10:09-06:00</updated>
    <id>http://viktorivan.github.io/blog/2015/11/02/bloques-de-procesamiento-de-senal-de-gnu-radio-en-python</id>
    <content type="html"><![CDATA[<p><em>Introducción.</em></p>

<p>Debido a la popularidad de <a href="https://www.python.org">Python</a> para el procesamiento digital de señales en el ámbito científico a través de <a href="http://www.scipy.org/">SciPy</a>, el proyecto de <a href="http://www.gnuradio.org">GNU Radio</a> permite el desarrollo de bloques de procesamiento de señales que pueden ser escritos en lenguaje de programación Python y usar estas librerías sin ningún problema. Este tipo de módulos son conocidos como <code>out-of-tree</code>, ya que, aunque los módulos serán integrados dentro del catálogo de bloques de GNU Radio no se van a integrar al proyecto para su distribución conjunta, sino individual.</p>

<!-- more -->

<p><em>Procedimiento.</em></p>

<p>Para crear un módulo <code>out-of-tree</code> se ejecuta desde una terminal de linux el siguiente comando</p>

<p><code>
$ gr_modtool create
Name of the new module:Tu_modulo
Creating out-of-tree module in ./gr-Tu_modulo... Done. 
Use 'gr_modtool add' to add a new block to this currently empty module. 
</code></p>

<p>El nombre que se indique para el módulo es con el que va a aparecer en el catálogo de GNU Radio, en este caso Tu_modulo.</p>

<p>Para crear los bloques que integrarán el módulo se utiliza la herramienta <code>gr_modtool</code> en la carpeta raíz del proyecto. En este caso se creará un bloque que realizará la función de un convertidor binario a decimal para los tipos de datos float basado en Python.</p>

<p><code>
$ cd gr-Tu_modulo
$ gr_modtool add
GNU Radio module name identified: Tu_modulo 
('sink', 'source', 'sync', 'decimator', 'interpolator', 'general', 'tagged_stream', 'hier', 'noblock')
Enter block type: decimator 
Language (python/cpp): python
Language: Python
Enter name of block/code (without module name prefix): bin2dec_py_ff
Block/code identifier: bin2dec_py_ff
Enter valid argument list, including default arguments: vec_size
Add Python QA code? [Y/n] 
Adding file 'python/bin2dec_py_ff.py'...
Adding file 'python/qa_bin2dec_py_ff.py'...
Editing python/CMakeLists.txt...
Adding file 'grc/prueba_bin2dec_py_ff.xml'...
Editing grc/CMakeLists.txt...
</code>
y a su vez, se desarrollará un bloque que realice la operación inversa, esto es, un convertidor decimal a binario.</p>

<p><code>
$ gr_modtool add 
GNU Radio module name identified: Tu_modulo 
('sink', 'source', 'sync', 'decimator', 'interpolator', 'general', 'tagged_stream', 'hier', 'noblock')
Enter block type: interpolator
Language (python/cpp): python
Language: Python
Enter name of block/code (without module name prefix): dec2bin_py_ff
Block/code identifier: dec2bin_py_ff
Enter valid argument list, including default arguments: vec_size
Add Python QA code? [Y/n] 
Adding file 'python/dec2bin_py_ff.py'...
Adding file 'python/qa_dec2bin_py_ff.py'...
Editing python/CMakeLists.txt...
Adding file 'grc/prueba_dec2bin_py_ff.xml'...
Editing grc/CMakeLists.txt...
</code></p>

<p>de esta manera se han creado dos bloques que serán escritos en Python, un decimador para el convertidor binario a decimal y un interpolador para el decimal a binario.</p>

<p>Los archivos donde se realizará la programación en código Python se ubican en <code>~/gr-Tu_modulo/python</code> y se llama <code>dec2bin_py_ff.py</code> para el convertidor decimal a binario y <code>bin2dec_py_ff.py</code> para el convertidor binario a decimal.</p>

<p><em>Convertidor binario a decimal</em></p>

<p>Dentro del archivo <code>bin2dec_py_ff.py</code> se puede observar que la librería de Scipy con Numpy ha sido declarada, en caso de que se requiera alguna librería en particular sólo se agrega con la instrucción <code>include</code>.</p>

<p>En la parte de <code>class bin2dec_py_ff(gr.decim_block)</code> está la seccción donde se definen los parámetros iniciales del bloque, <code>def __init__(self, vec_size):</code>, en ella se define el tipo de datos de entrada y salida del bloque, así como el factor de decimación del bloque <code>decim=vec_size</code>. Para poder utilizar la variable <code>vec_size</code> fuera de la clase se puede utilizar <code>self.vec_size</code>, es importante notar que esta variable pertenece a la clase pero no a la función <code>__init__</code>, la variable <code>vec_size</code> representa la cantidad de bits que se requieren para convertir el número a decimal.</p>

<p><code>
class bin2dec_py_ff(gr.decim_block):
    """
    docstring for block bin2dec_py_ff
    """
    def __init__(self, vec_size):
        gr.decim_block.__init__(self,
            name="bin2dec_py_ff",
            in_sig=[numpy.float32],
            out_sig=[numpy.float32], decim=vec_size)
    self.vec_size=vec_size 
</code></p>

<p>En la parte correspondiente a <code>// Do &lt;+signal processing+&gt;</code> es donde se realiza el procesamiento de datos que manipulará el bloque, para la conversión de binario a decimal se desarrolla el código de programación en Python, quedando de la siguiente manera:</p>

<p><code>
def work(self, input_items, output_items):
	in0 = numpy.int_(input_items[0])
	out = output_items[0]
	j=0
	for i in range(self.vec_size,len(in0)+1,self.vec_size):
		out[j]= int(str("".join(str(x) for x in in0[i-self.vec_size:i])),2)
		j += 1
	return len(output_items[0])
</code></p>

<p>El archivo quedaría de la siguiente forma, ya con todas las modificaciones incluidas:</p>

<p>{% include_code bin2dec_py_ff.py %}</p>

<p><em>Convertidor decimal a binario</em></p>

<p>Para corroborar el correcto funcionamiento del bloque de convertidor binario a decimal se propone realizar un convertidor decimal a binario que realizará la operación inversa del bloque anterior.</p>

<p>El archivo donde se realiza la programación es <code>dec2bin_py_ff.py</code>. Nuevamente, en la sección de <code>class dec2bin_py_ff(gr.interp_block):</code> se indica los tipos de datos de entrada y salida que manejará el bloque de procesamiento, así también el factor de interpolación definido por la variable <code>vec_size</code> y por último la variable <code>self.vec_size</code>, quedando como sigue:</p>

<p><code>
class dec2bin_py_ff(gr.interp_block):
    """
    docstring for block dec2bin_py_ff
    """
    def __init__(self, vec_size):
        gr.interp_block.__init__(self,
            name="dec2bin_py_ff",
            in_sig=[numpy.float32],
            out_sig=[numpy.float32], interp=vec_size)
    self.vec_size=vec_size
</code></p>

<p>En la sección de <code>// Do &lt;+signal processing+&gt;</code> se escribe el código que realizará la conversión decimal a binario.</p>

<p><code>
def work(self, input_items, output_items):
    in0 = input_items[0]
    out = output_items[0]
    f=numpy.zeros([len(in0),self.vec_size])
    for i in range(0,len(in0)):
        f[i,:] = numpy.int_([str(x) for x in numpy.binary_repr(in0[i], width = self.vec_size)])*1.0
    out[:] = numpy.hstack(f)
    return len(output_items[0])
</code></p>

<p>El archivo completo queda de la siguiente manera:</p>

<p>{% include_code dec2bin_py_ff.py %}</p>

<p><em>Interfaz GNU Radio Companion</em></p>

<p>Los bloques dentro de GNU Radio Companion (GRC) son archivos xml que se ubican en <code>~/gr-Tu_modulo/grc</code>, para el convertidor binario a decimal se llama <code>Tu_modulo_bin2dec_py_ff.xml</code> y para el convertidor decimal a binario <code>Tu_modulo_dec2bin_py_ff.xml</code>.</p>

<p>Dentro del archivo xml hay varios parámetros que pueden ser personalizados, tal como el nombre del bloque, este parámetro se define en la línea correspondiente a <code>&lt;name&gt;</code>.</p>

<pre><code>&lt;name&gt;Binary To Decimal Python&lt;/name&gt;
</code></pre>

<p>En la parte de <code>&lt;param&gt;</code> se indica la variable de entrada del bloque</p>

<pre><code>  &lt;param&gt;
    &lt;name&gt;Vector size&lt;/name&gt;
    &lt;key&gt;vec_size&lt;/key&gt;
    &lt;type&gt;int&lt;/type&gt;
  &lt;/param&gt;
</code></pre>

<p>El conector de entrada del bloque de procesamiento se define en <code>&lt;sink&gt;</code></p>

<pre><code>  &lt;sink&gt;
    &lt;name&gt;in&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/sink&gt;
</code></pre>

<p>El conector de salida en <code>&lt;source&gt;</code></p>

<pre><code>  &lt;source&gt;
    &lt;name&gt;out&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/source&gt;
</code></pre>

<p>De igual manera se modifican las secciones de <code>&lt;name&gt;</code>, <code>&lt;param&gt;</code>, <code>&lt;sink&gt;</code> y <code>&lt;source&gt;</code> en el archivo <code>Tu_modulo_dec2bin_py_ff.xml</code> para el bloque de procesamiento del convertidor decimal a binario.</p>

<p>Los archivos quedarán finalmente de la siguiente forma:</p>

<p>{% include_code  Tu_modulo_bin2dec_py_ff.xml %}</p>

<p>{% include_code  Tu_modulo_dec2bin_py_ff.xml %}</p>

<p><em>Compilación de los bloques</em></p>

<p>Una vez ya realizado todos los procesos referentes al código de programación de los bloques de procesamiento se procede a integrarlos en el proyecto de GNU Radio. Esto se realiza por medio de una serie de comandos desde una terminal de linux en la raíz del proyecto. En caso de no tener una carpeta de build, se crea por medio de comandos de linux</p>

<p><code>
$ mkdir build
$ cd build
</code>
Una vez dentro de la carpeta de build, se procede a compilar el proyecto</p>

<p><code>
$ cmake ../
$ make
$ sudo make install
$ sudo ldconfig
</code>
De esa manera queda integrado el módulo out-of-tree dentro de GNU Radio.</p>

<p><em>Archivos de prueba QA</em></p>

<p>Un modo para corroborar el correcto funcionamiento del bloque de procesamiento es a través de los archivos QA que se ubican en <code>~/gr-Tu_modulo/python</code>. Estos archivos permiten hacer una comparación de los datos de salida y los datos esperados de salida de acuerdo a una secuencia de datos de entrada previamente definida. Un ejemplo para probar el convertidor binario a decimal sería:</p>

<p><code>
def test_001_t (self):
    # set up fg
    src_data = [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0]
    expected_result = [5.0, 7.0, 0.0, 1.0, 2.0]
    src = blocks.vector_source_f (src_data)
    conv = bin2dec_py_ff (3)
    snk = blocks.vector_sink_f ()
    self.tb.connect (src, conv)
    self.tb.connect (conv, snk)
    self.tb.run ()
    # check data
    result_data = snk.data ()
    self.assertFloatTuplesAlmostEqual (expected_result, result_data,2)
</code></p>

<p>Una vez modificado el archivo QA, se procede a ejecutarlo desde una terminal de Linux con el comando de <code>python</code>, cabe recordar que la terminal debe abrirse en <code>~/gr-Tu_modulo/python</code>.</p>

<p>```
$ python qa_dec2bin_py_ff.py 
.
———————————————————————-
Ran 1 test in 0.002s</p>

<p>OK</p>

<p>```</p>

<p>Si el código funciona correctamente, se nos mostrará que no hubo error al momento de ejecutar.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
</feed>
