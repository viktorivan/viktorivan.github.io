<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: itpp | Iván Rodríguez]]></title>
  <link href="http://viktorivan.github.io/blog/categories/itpp/atom.xml" rel="self"/>
  <link href="http://viktorivan.github.io/"/>
  <updated>2015-11-03T12:30:33-06:00</updated>
  <id>http://viktorivan.github.io/</id>
  <author>
    <name><![CDATA[Iván Rodríguez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Librerías externas en GNU Radio]]></title>
    <link href="http://viktorivan.github.io/blog/2014/03/19/librerias-externas-en-gnu-radio/"/>
    <updated>2014-03-19T20:04:12-06:00</updated>
    <id>http://viktorivan.github.io/blog/2014/03/19/librerias-externas-en-gnu-radio</id>
    <content type="html"><![CDATA[<p>Introducción.</p>

<p>Aunque <a href="http://www.gnuradio.org">GNU Radio</a> es un proyecto versátil conformado con una gran cantidad de herramientas que permiten realizar múltiples procesos en Software Radio, muchas veces se requiere de operaciones específicas que difícilmente serán integradas en el proyecto original. La integración de estas funciones especiales pueden ser desarrolladas por el usuario por medio de herramientas como <code>gr_modtool</code>, donde a través de código en C++ o Python se puede desarrollar cualquier función para el procesamiento digital de la señal que no este considerado dentro del proyecto de GNU Radio. </p>

<!-- more -->

<p>Lenguajes de programación como C++ y Python gozan de una popularidad entre los programadores de tal manera que se desarrollan proyectos independientes especializados que facilitan el desarrollo de programas orientados a analizar o solucionar áreas muy específicas, un caso es <a href="http://itpp.sourceforge.net">IT++</a> que es una biblioteca de clases y funciones para álgebra lineal, optimización numérica, procesamiento de señales, comunicaciones y estadística. Utilizada ampliamente tanto en la industria como en la investigación.</p>

<p><em>Integración de IT++ en módulos out-of-tree</em></p>

<p>Los módulos out-of-tree de GNU Radio utilizan la herramienta <a href="http://www.cmake.org">CMAKE</a> que es una familia de herramientas diseñadas para compilar y probar software, de esta manera se puede indicar a GNU Radio la incorporación de bibliotecas externas al proyecto out-of-tree por medio de archivos CMAKE. Estos archivos generan variables globales con la ubicación de los archivos de la biblioteca a instalar.</p>

<p>En el caso de IT++, el archivo se llama <code>FindITPP.cmake</code> y se tiene que guardar en <code>~/gr-Tu_modulo/cmake/modules</code>, quedando el archivo cmake como sigue.</p>

<p>{% include_code FindITPP.cmake %}</p>

<p>Así mismo hay que indicar a CMAKE que tiene que utilizar el nuevo archivo cmake, para ello se modifica el archivo <code>CmakeLists.txt</code> ubicado en la raíz del proyecto.</p>

<p>En la sección <code># Find gnuradio build dependencies</code> se agrega la línea</p>

<pre><code>find_package(ITPP)
</code></pre>

<p>En la parte final de la sección permite agregar un mensaje de error en caso de que la biblioteca no este instalada en el sistema.</p>

<pre><code>if(NOT ITPP_FOUND)
    message(FATAL_ERROR "IT++ Core required to compile Tu_Modulo")
endif()
</code></pre>

<p>En la sección de <code># Setup the include and linker paths</code> se agrega la línea <code>${ITPP_INCLUDE_DIRS}</code> para <code>include_directories</code> y la línea <code>${ITPP_LIBRARY_DIRS}</code> para <code>link_directories</code>, quedando como sigue:</p>

<pre><code>include_directories(
    ${CMAKE_SOURCE_DIR}/lib
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_BINARY_DIR}/lib
    ${CMAKE_BINARY_DIR}/include
    ${Boost_INCLUDE_DIRS}
    ${CPPUNIT_INCLUDE_DIRS}
    ${ITPP_INCLUDE_DIRS}
    ${GNURADIO_ALL_INCLUDE_DIRS}
)

link_directories(
    ${Boost_LIBRARY_DIRS}
    ${CPPUNIT_LIBRARY_DIRS}
    ${ITPP_LIBRARY_DIRS}
    ${GNURADIO_RUNTIME_LIBRARY_DIRS}
)
</code></pre>

<p>Finalmente el archivo <code>CMakeLists.txt</code>, con sus modificaciones incluidas, quedaría:</p>

<p>{% include_code CMakeLists.txt CMakeLists.cmake %}</p>

<p><em>Desarrollo de bloques con IT++</em></p>

<p>En este caso se desarrollarán dos bloques con funciones de IT++, el codificador y decodificador convolucional. Para ello, por medio de <code>gr_modtool</code> se requiere crear dos bloques con tres valores de entrada, uno para el polinomio, otro para la tasa de codificación y uno último para indicar la cantidad de registros que tiene el codificador.</p>

<p>Desde una terminal de linux, se ejecuta <code>gr_modtool</code></p>

<p><code>
$ gr_modtool add
GNU Radio module name identified: Tu_modulo
Enter code type: sync
Language: C++
Enter name of block/code (without module name prefix): encodconv_vff
Block/code identifier: encodconv_vff
Enter valid argument list, including default arguments: int val1, int val2, int val3
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/encodconv_vff_impl.h'...
Adding file 'lib/encodconv_vff_impl.cc'...
Adding file 'include/Tu_modulo/encodconv_vff.h'...
Editing swig/Tu_modulo_swig.i...
Adding file 'python/qa_encodconv_vff.py'...
Editing python/CMakeLists.txt...
Adding file 'grc/Tu_modulo_encodconv_vff.xml'...
Editing grc/CMakeLists.txt...
</code>
Para el decodificador, se crea un bloque con las mismas características</p>

<p><code>
$ gr_modtool add
GNU Radio module name identified: Tu_modulo
Enter code type: sync
Language: C++
Enter name of block/code (without module name prefix): decodconv_vff
Block/code identifier: decodconv_vff
Enter valid argument list, including default arguments: int val1, int val2, int val3
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/decodconv_vff_impl.h'...
Adding file 'lib/decodconv_vff_impl.cc'...
Adding file 'include/Tu_modulo/decodconv_vff.h'...
Editing swig/Tu_modulo_swig.i...
Adding file 'python/qa_decodconv_vff.py'...
Editing python/CMakeLists.txt...
Adding file 'grc/Tu_modulo_decodconv_vff.xml'...
Editing grc/CmakeLists.txt...
</code>
<em>Codificador convolucional</em></p>

<p>Dentro del archivo <code>encodconv_vff_impl.cc</code> que se ubica en <code>~/gr-Tu_modulo/lib</code> se indica que se utilizará la biblioteca de IT++ </p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>En la sección de <code>encodconv_vff_impl::encodconv_vff_impl(int val1, int val2, int val3)</code> se indican los parámetros del bloque tales como la cantidad de flujos de datos, tamaño de los paquetes de entrada y salida, así como asignar a las variables internas las variables públicas que se capturaron en el bloque de GRC. </p>

<pre><code>encodconv_vff_impl::encodconv_vff_impl(int val1, int val2, int val3)
  : gr::sync_block("encodconv_vff",
          gr::io_signature::make(1, 1, sizeof(float) * val3),
          gr::io_signature::make(1, 1, sizeof(float) * val3 * sizeof(val1)))
{
	polsize = sizeof(val1);
	cl = val2;
	pz = val3;
  
	for (int i = 0; i &lt; 0x100; i++){
		polynom[i] = i;
	}
	
	memcpy(polynom, (char*)&amp;val1, sizeof(val1));
	
	// -- Channel code parameters --

	itpp::ivec generator(polsize);

	for (int i = 0; i &lt; polsize; i++){
		generator[i] = polynom[i];
	}

	code.set_generator_polynomials(generator, cl);	
}
</code></pre>

<p>Como se puede observar, varias funciones de IT++ se han utilizado como parte del código del bloque de procesamiento, para llamar cualquier otra función solo se indica con el formato <code>itpp::función</code>, de esta manera, el compilador reconocerá que la función forma parte de la biblioteca de IT++.</p>

<p>En la sección de procesamiento de la señal <code>// Do &lt;+signal processing+&gt;</code> se realizará la codificación convolucional de los paquetes de entrada de acuerdo a los parámetros previamente definidos, por lo que el código final queda como sigue:</p>

<pre><code>int
encodconv_vff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    itpp::bvec tempin(pz * sizeof(float));
	itpp::bvec tempout(pz * polsize * sizeof(float));
  
	for (int j = 0; j &lt; (pz * sizeof(float)); j++){
		tempin[j] = in[j];
	}	

	code.encode_tailbite(tempin, tempout);

	for (int k = 0; k &lt; (pz * polsize * sizeof(float)); k++){
		out[k] = tempout[k];
	}

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>La operación de codificación es realizada por el comando <code>code.encode_tailbite(tempin, tempout);
</code>, disminuyendo así la cantidad de líneas para desarrollar un codificador convolucional.</p>

<p>La versión final del código es</p>

<p>{% include_code encodconv_vff_impl.cc encodconv_vff_impl.cpp %}</p>

<p><em>Decodificador convolucional</em></p>

<p>De manera similar al codificador convolucional, es necesario modificar el archivo <code>decodconv_vff_impl.cc</code>, en una primera instancia se agrega la línea donde se indica que se utilizará la biblioteca de IT++.</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>En la sección de <code>decodconv_vff_impl::decodconv_vff_impl(int val1, int val2, int val3)</code> se indican los parámetros del bloque,</p>

<pre><code>decodconv_vff_impl::decodconv_vff_impl(int val1, int val2, int val3)
  : gr::sync_block("decodconv_vff",
          gr::io_signature::make(1, 1, sizeof(float) * val3 * sizeof(val1)),
          gr::io_signature::make(1, 1, sizeof(float) * val3))
{
	polsize = sizeof(val1);
	cl = val2;
	pz = val3;
  
	for (int i = 0; i &lt; 0x100; i++){
		polynom[i] = i;
	}

	memcpy(polynom, (char*)&amp;val1, sizeof(val1));
	
	// -- Channel code parameters --

	itpp::ivec generator(polsize);

	for (int i = 0; i &lt; polsize; i++){
		generator[i] = polynom[i];
	}

	code.set_generator_polynomials(generator, cl);
}
</code></pre>

<p>De igual manera, en la sección de procesamiento de la señal del bloque de procesamiento <code>// Do &lt;+signal processing+&gt;</code> se realizará la decodificación de los paquetes de entrada de acuerdo a los parámetros previamente definidos utilizando la biblioteca de IT++, </p>

<pre><code>int
decodconv_vff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

itpp::bvec tempbin(pz * polsize * sizeof(float));
itpp::bvec tempout(pz * sizeof(float));
itpp::vec tempin(pz * polsize * sizeof(float));

	for (int j = 0; j &lt; (pz  * polsize * sizeof(float)); j++){
		tempbin[j] = in[j];
	}

	tempin = to_vec(tempbin);
	tempin = -(tempin * 2 - 1);

	code.decode_tailbite(tempin, tempout);

	for (int k = 0; k &lt; (pz * sizeof(float)); k++){
		out[k] = tempout[k];
	}

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>En este bloque la operación de decodificación es realizada por el comando <code>code.decode_tailbite(tempin, tempout);</code> </p>

<p>El código final del bloque de procesamiento es</p>

<p>{% include_code decodconv_vff_impl.cc decodconv_vff_impl.cpp %}</p>

<p><em>Definiendo las variables públicas en los archivos de cabecera</em></p>

<p>Para poder utilizar libremente las clases y variables de IT++ dentro de los archivos cc de GNU Radio se requiere modificar los archivos de cabecera h de los bloques de procesamiento. Para el codificador convolucional el archivo es <code>encodconv_vff_impl.h</code> y para el decodificador es <code>decodconv_vff_impl.h</code>. </p>

<p>Dentro del archivo <code>encodconv_vff_impl.h</code> se indica la biblioteca de IT++</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>en la sección de <code>public</code> se indican las variables a utilizar</p>

<pre><code> public:
  encodconv_vff_impl(int val1, int val2, int val3);
  unsigned char polynom [0x100];
  int polsize;
  int cl;
  int pz;
  itpp::Convolutional_Code code;
  
  ~encodconv_vff_impl();
</code></pre>

<p>El archivo h del bloque de procesamiento del codificador convolucional queda como sigue</p>

<p>{% include_code encodconv_vff_impl.h encodconv_vff_impl.c %}</p>

<p>De igual manera en el archivo de cabecera del decodificador <code>decodconv_vff_impl.h</code> se indica la biblioteca de IT++</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>y en la sección de <code>public</code> las variables requeridas para el procesamiento de la señal,
     public:
      decodconv_vff_impl(int val1, int val2, int val3);
      unsigned char polynom [0x100];
      int polsize;
      int cl;
      int pz;
      itpp::Convolutional_Code code;</p>

<pre><code>  ~decodconv_vff_impl();
</code></pre>

<p>El archivo de cabecera, en su versión final queda,</p>

<p>{% include_code decodconv_vff_impl.h decodconv_vff_impl.c %}</p>

<p><em>Interfaz gráfica de GRC</em></p>

<p>Los bloques de procesamiento mostrados en GNU Radio Companion son archivos xml que se ubican en <code>~/gr-Tu_modulo/grc</code>, para el codificador convolucional es <code>Tu_modulo_encodconv_vff.xml</code> y para el decodificador <code>Tu_modulo_decodconv_vff.xml</code>.</p>

<p>Los parámetros a modificar son <code>&lt;name&gt;</code>, <code>&lt;param&gt;</code>, <code>&lt;sink&gt;</code> y <code>&lt;source&gt;</code>, los bloques del decodificador y codificador convolucional quedan como sigue,</p>

<p>{% include_code Tu_modulo_encodconv_vff.xml %}</p>

<p>{% include_code Tu_modulo_decodconv_vff.xml %}</p>

<p><em>Compilación de los bloques</em></p>

<p>Una vez ya realizado todos los procesos referentes al código de programación de los bloques de procesamiento se procede a integrarlos en el proyecto de GNU Radio. Esto se realiza por medio de una serie de comandos desde una terminal de linux en la raíz del proyecto. En caso de no tener una carpeta de build, se crea por medio de comandos de linux</p>

<p><code>
$ mkdir build
$ cd build
</code>
Una vez dentro de la carpeta de build, se procede a compilar el proyecto</p>

<p><code>
$ cmake ../
$ make
$ sudo make install
$ sudo ldconfig
</code>
De esa manera queda integrado el módulo out-of-tree dentro de GNU Radio.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
</feed>
