<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: out-of-tree | Iván Rodríguez]]></title>
  <link href="http://viktorivan.github.io/blog/categories/out-of-tree/atom.xml" rel="self"/>
  <link href="http://viktorivan.github.io/"/>
  <updated>2015-10-23T10:39:33-05:00</updated>
  <id>http://viktorivan.github.io/</id>
  <author>
    <name><![CDATA[Iván Rodríguez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bloques de procesamiento de señales en GNU Radio]]></title>
    <link href="http://viktorivan.github.io/blog/2014/03/19/bloques-de-procesamiento-de-senales-en-gnu-radio/"/>
    <updated>2014-03-19T13:06:58-06:00</updated>
    <id>http://viktorivan.github.io/blog/2014/03/19/bloques-de-procesamiento-de-senales-en-gnu-radio</id>
    <content type="html"><![CDATA[<p>Introducción.</p>

<p>El proyecto de <a href="http://www.gnuradio.org">GNU Radio</a> permite el desarrollo de bloques de procesamiento de señales que pueden ser escritos tanto en lenguaje de programación Python o C++. Este tipo de módulos son conocidos como <code>out-of-tree</code>, ya que, aunque los módulos serán integrados dentro del catálogo de bloques de GNU Radio no se van a integrar al proyecto para su distribución.</p>

<!-- more -->

<p>Procedimiento.</p>

<p>Para crear un módulo out-of-tree se ejecuta desde una terminal de linux el siguiente comando</p>

<p><code>
$ gr_modtool create
Name of the new module:Tu_modulo
Creating out-of-tree module in ./gr-Tu_modulo... Done. 
Use 'gr_modtool add' to add a new block to this currently empty module. 
</code></p>

<p>El nombre que se indique para el módulo es con el que va a aparecer en el catálogo de GNU Radio.</p>

<p>Para crear los bloques que integrarán el módulo se utiliza la herramienta <code>gr_modtool</code> en la carpeta raíz del proyecto. En este caso se creará un bloque que realizará la función de un convertidor binario a decimal para los tipos de datos float.</p>

<p><code>
$ cd gr-Tu_modulo
$ gr_modtool add
GNU Radio module name identified: Tu_modulo 
Enter code type: decimator 
Language: C++ 
Enter name of block/code (without module name prefix): bin2dec_ff 
Block/code identifier: bin2dec_ff 
Enter valid argument list, including default arguments: int vec_size 
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/bin2dec_ff_impl.h'... 
Adding file 'lib/bin2dec_ff_impl.cc'... 
Adding file 'include/Tu_modulo/bin2dec_ff.h'... 
Editing swig/Tu_modulo_swig.i... 
Adding file 'python/qa_bin2dec_ff.py'... 
Editing python/CMakeLists.txt... 
Adding file 'grc/Tu_modulo_bin2dec_ff.xml'... 
Editing grc/CMakeLists.txt...
</code>
y a su vez, se desarrollará un bloque que realice la operación inversa, esto es, un convertidor decimal a binario.</p>

<p><code>
$ gr_modtool add 
GNU Radio module name identified: Tu_modulo 
Enter code type: interpolator 
Language: C++ 
Enter name of block/code (without module name prefix): dec2bin_ff 
Block/code identifier: dec2bin_ff 
Enter valid argument list, including default arguments: int vec_size 
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/dec2bin_ff_impl.h'... 
Adding file 'lib/dec2bin_ff_impl.cc'... 
Adding file 'include/Tu_modulo/dec2bin_ff.h'... 
Editing swig/Tu_modulo_swig.i... 
Adding file 'python/qa_dec2bin_ff.py'... 
Editing python/CMakeLists.txt... 
Adding file 'grc/Tu_modulo_dec2bin_ff.xml'... 
Editing grc/CmakeLists.txt...
</code></p>

<p>de esta manera se han creado dos bloques, un decimador para el convertidor binario a decimal y un interpolador para el decimal a binario.</p>

<p>Los archivos donde se realizará la programación en código c++ se ubican en <code>~/gr-Tu_modulo/lib</code> y se llama <code>dec2bin_ff_impl.cc</code> para el convertidor decimal a binario y <code>bin2dec_ff_impl.cc</code> para el convertidor binario a decimal.</p>

<p><em>Convertidor binario a decimal</em></p>

<p>Dentro del archivo <code>bin2dec_ff_impl.cc</code> hay que indicar las librerías que se utilizarán, en este caso sólo requerimos la librería <code>math.h</code>, después de los include ya definidos agregamos:</p>

<pre><code>#include &lt;math.h&gt;
</code></pre>

<p>En la sección de <code>bin2dec_ff_impl::bin2dec_ff_impl(int vec_size)</code> se definen la cantidad de flujos de datos que manejará el bloque de procesamiento, en este caso, sólo es un flujo de entrada y uno de salida, el factor de decimación definido por la variable vec_size y además se asigna a la variable chunk el valor de vec_size, ya que vec_size representa la cantidad de bits que se requieren para convertir el número a decimal. </p>

<pre><code>bin2dec_ff_impl::bin2dec_ff_impl(int vec_size)
  : gr::sync_decimator("bin2dec_ff",
          gr::io_signature::make(1, 1, sizeof(float)),
          gr::io_signature::make(1, 1, sizeof(float)), vec_size)
{
	chunk = vec_size;
}
</code></pre>

<p>En la parte correspondiente a <code>// Do &lt;+signal processing+&gt;</code> es donde se realiza el procesamiento de datos que manipulará el bloque, para la conversión de binario a decimal se desarrolla el código de programación en c++, quedando de la siguiente manera:</p>

<pre><code>int
bin2dec_ff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    int j = 0, a = 0;
    for (int i = 0; i &lt; noutput_items * chunk; i = i + chunk){
    	out[j] = 0;
    	a = chunk - 1;
    	for (int k = 0; k &lt; chunk; k++){
    		out[j] = out[j] + (in[i + k] * pow (2,a));
    		a = a - 1;
    	}
    	j++;
    }

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>El archivo quedaría de la siguiente forma, ya con todas las modificaciones incluidas:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bin2dec_ff_impl.cc (bin2dec_ff_impl.cpp)</span> <a href='/downloads/code/bin2dec_ff_impl.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef HAVE_CONFIG_H</span>
</span><span class='line'><span class="cp">#include &quot;config.h&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;gnuradio/io_signature.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;bin2dec_ff_impl.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bin2dec_ff</span><span class="o">::</span><span class="n">sptr</span>
</span><span class='line'>    <span class="n">bin2dec_ff</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">gnuradio</span><span class="o">::</span><span class="n">get_initial_sptr</span>
</span><span class='line'>        <span class="p">(</span><span class="k">new</span> <span class="n">bin2dec_ff_impl</span><span class="p">(</span><span class="n">vec_size</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * The private constructor</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">bin2dec_ff_impl</span><span class="o">::</span><span class="n">bin2dec_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">gr</span><span class="o">::</span><span class="n">sync_decimator</span><span class="p">(</span><span class="s">&quot;bin2dec_ff&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    	<span class="n">chunk</span> <span class="o">=</span> <span class="n">vec_size</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Our virtual destructor.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">bin2dec_ff_impl</span><span class="o">::~</span><span class="n">bin2dec_ff_impl</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span>
</span><span class='line'>    <span class="n">bin2dec_ff_impl</span><span class="o">::</span><span class="n">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="n">in</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">float</span> <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">noutput_items</span> <span class="o">*</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">chunk</span><span class="p">){</span>
</span><span class='line'>        	<span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        	<span class="n">a</span> <span class="o">=</span> <span class="n">chunk</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        		<span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">in</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">pow</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">a</span><span class="p">));</span>
</span><span class='line'>        		<span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        	<span class="p">}</span>
</span><span class='line'>        	<span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Tell runtime system how many output items we produced.</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">noutput_items</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="cm">/* namespace Tu_modulo */</span>
</span><span class='line'><span class="p">}</span> <span class="cm">/* namespace gr */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Convertidor decimal a binario</em></p>

<p>Para corroborar el correcto funcionamiento del bloque de convertidor binario a decimal se propone realizar un convertidor decimal a binario que realizará la operación inversa del bloque anterior.</p>

<p>El archivo donde se realiza la programación es <code>dec2bin_ff_impl.cc</code>. Como primer paso se indica la librería que utilizará el bloque de procesamiento, de la misma forma que se indicó en el bloque anterior.</p>

<pre><code>#include &lt;math.h&gt;
</code></pre>

<p>Nuevamente, en la sección de <code>dec2bin_ff_impl::dec2bin_ff_impl(int vec_size)
</code> se indica la cantidad de flujos de entrada y salida que manejará el bloque de procesamiento, así también el factor de interpolación definido por la variable vec_size y por último la variabe chunk, quedando como sigue:</p>

<pre><code>dec2bin_ff_impl::dec2bin_ff_impl(int vec_size)
  : gr::sync_interpolator("dec2bin_ff",
          gr::io_signature::make(1, 1, sizeof(float)),
          gr::io_signature::make(1, 1, sizeof(float)), vec_size)
{
	chunk = vec_size;
}
</code></pre>

<p>En la sección de <code>// Do &lt;+signal processing+&gt;</code> se escribe el código que realizará la conversión decimal a binario.</p>

<pre><code>int
dec2bin_ff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    int l = 0, m = 0, a = 0, b[chunk];
    for (int i = 0; i &lt; noutput_items / chunk; i++){
    	a = in[i];
    	l = chunk - 1;
    	for (int j = 0; j &lt; chunk; j++){
    		b[j] = a % 2;
    		a = a / 2;	
    	}
    	for (int k = 0; k &lt; chunk; k++){
    		out[m] = b [l];
    		l = l - 1;
    		m++;
    	}
    }
</code></pre>

<p>El archivo completo queda de la siguiente manera:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>dec2bin_ff_impl.cc (dec2bin_ff_impl.cpp)</span> <a href='/downloads/code/dec2bin_ff_impl.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef HAVE_CONFIG_H</span>
</span><span class='line'><span class="cp">#include &quot;config.h&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;gnuradio/io_signature.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;dec2bin_ff_impl.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dec2bin_ff</span><span class="o">::</span><span class="n">sptr</span>
</span><span class='line'>    <span class="n">dec2bin_ff</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">gnuradio</span><span class="o">::</span><span class="n">get_initial_sptr</span>
</span><span class='line'>        <span class="p">(</span><span class="k">new</span> <span class="n">dec2bin_ff_impl</span><span class="p">(</span><span class="n">vec_size</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * The private constructor</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">dec2bin_ff_impl</span><span class="o">::</span><span class="n">dec2bin_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">gr</span><span class="o">::</span><span class="n">sync_interpolator</span><span class="p">(</span><span class="s">&quot;dec2bin_ff&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    	<span class="n">chunk</span> <span class="o">=</span> <span class="n">vec_size</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Our virtual destructor.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">dec2bin_ff_impl</span><span class="o">::~</span><span class="n">dec2bin_ff_impl</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span>
</span><span class='line'>    <span class="n">dec2bin_ff_impl</span><span class="o">::</span><span class="n">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="n">in</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">float</span> <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="n">chunk</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">noutput_items</span> <span class="o">/</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        	<span class="n">a</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        	<span class="n">l</span> <span class="o">=</span> <span class="n">chunk</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        		<span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        		<span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>	
</span><span class='line'>        	<span class="p">}</span>
</span><span class='line'>        	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        		<span class="n">out</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span> <span class="p">[</span><span class="n">l</span><span class="p">];</span>
</span><span class='line'>        		<span class="n">l</span> <span class="o">=</span> <span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        		<span class="n">m</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        	<span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// Tell runtime system how many output items we produced.</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">noutput_items</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="cm">/* namespace Tu_modulo */</span>
</span><span class='line'><span class="p">}</span> <span class="cm">/* namespace gr */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Adicionalmente hay que declarar la variable <code>chunk</code> de tal forma que sea pública y poder utilizarla en las diferentes secciones del bloque de procesamiento, esto se hace modificando el archivo <code>bin2dec_ff_impl.h</code> para el convertidor binario a decimal y el archivo <code>dec2bin_ff_impl.h</code> para el convertidor decimal a binario. En la sección de <code>public</code> se agrega:</p>

<pre><code> public:
  bin2dec_ff_impl(int vec_size);
  int chunk;
  ~bin2dec_ff_impl();
</code></pre>

<p>Quedando los archivos como siguen</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bin2dec_ff_impl.h (bin2dec_ff_impl.c)</span> <a href='/downloads/code/bin2dec_ff_impl.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef INCLUDED_TU_MODULO_BIN2DEC_FF_IMPL_H</span>
</span><span class='line'><span class="cp">#define INCLUDED_TU_MODULO_BIN2DEC_FF_IMPL_H</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;Tu_modulo/bin2dec_ff.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">class</span> <span class="n">bin2dec_ff_impl</span> <span class="o">:</span> <span class="n">public</span> <span class="n">bin2dec_ff</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>     <span class="nl">private:</span>
</span><span class='line'>      <span class="c1">// Nothing to declare in this block.</span>
</span><span class='line'>
</span><span class='line'>     <span class="nl">public:</span>
</span><span class='line'>      <span class="n">bin2dec_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">chunk</span><span class="p">;</span>
</span><span class='line'>      <span class="o">~</span><span class="n">bin2dec_ff_impl</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Where all the action really happens</span>
</span><span class='line'>      <span class="kt">int</span> <span class="nf">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="c1">// namespace Tu_modulo</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// namespace gr</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* INCLUDED_TU_MODULO_BIN2DEC_FF_IMPL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>dec2bin_ff_impl.h (dec2bin_ff_impl.c)</span> <a href='/downloads/code/dec2bin_ff_impl.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef INCLUDED_TU_MODULO_DEC2BIN_FF_IMPL_H</span>
</span><span class='line'><span class="cp">#define INCLUDED_TU_MODULO_DEC2BIN_FF_IMPL_H</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;Tu_modulo/dec2bin_ff.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">class</span> <span class="n">dec2bin_ff_impl</span> <span class="o">:</span> <span class="n">public</span> <span class="n">dec2bin_ff</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>     <span class="nl">private:</span>
</span><span class='line'>      <span class="c1">// Nothing to declare in this block.</span>
</span><span class='line'>
</span><span class='line'>     <span class="nl">public:</span>
</span><span class='line'>      <span class="n">dec2bin_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">chunk</span><span class="p">;</span>
</span><span class='line'>      <span class="o">~</span><span class="n">dec2bin_ff_impl</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Where all the action really happens</span>
</span><span class='line'>      <span class="kt">int</span> <span class="nf">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="c1">// namespace Tu_modulo</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// namespace gr</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* INCLUDED_TU_MODULO_DEC2BIN_FF_IMPL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Interfaz GNU Radio Companion</em></p>

<p>Los bloques dentro de GNU Radio Companion (GRC) son archivos xml que se ubican en <code>~/gr-Tu_modulo/grc</code>, para el convertidor binario a decimal se llama <code>Tu_modulo_bin2dec_ff.xml</code> y para el convertidor decimal a binario <code>Tu_modulo_dec2bin_ff.xml</code>.</p>

<p>Dentro del archivo xml hay varios parámetros que pueden ser personalizados, tal como el nombre del bloque, este parámetro se define en la línea correspondiente a <code>&lt;name&gt;</code>.</p>

<pre><code>&lt;name&gt;Binary To Decimal&lt;/name&gt;
</code></pre>

<p>En la parte de <code>&lt;param&gt;</code> se indica la variable de entrada del bloque</p>

<pre><code>  &lt;param&gt;
    &lt;name&gt;Vector size&lt;/name&gt;
    &lt;key&gt;vec_size&lt;/key&gt;
    &lt;type&gt;int&lt;/type&gt;
  &lt;/param&gt;
</code></pre>

<p>El conector de entrada del bloque de procesamiento se define en <code>&lt;sink&gt;</code></p>

<pre><code>  &lt;sink&gt;
    &lt;name&gt;in&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/sink&gt;
</code></pre>

<p>El conector de salida en <code>&lt;source&gt;</code></p>

<pre><code>  &lt;source&gt;
    &lt;name&gt;out&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/source&gt;
</code></pre>

<p>De igual manera se modifican las secciones de <code>&lt;name&gt;</code>, <code>&lt;param&gt;</code>, <code>&lt;sink&gt;</code> y <code>&lt;source&gt;</code> en el archivo <code>Tu_modulo_dec2bin_ff.xml</code> para el bloque de procesamiento del convertidor decimal a binario.</p>

<p>Los archivos quedarán finalmente de la siguiente forma:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Tu_modulo_bin2dec_ff.xml)</span> <a href='/downloads/code/Tu_modulo_bin2dec_ff.xml'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;block&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Binary To Decimal<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Tu_modulo_bin2dec_ff<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class='line'>  <span class="nt">&lt;make&gt;</span>Tu_modulo.bin2dec_ff($vec_size)<span class="nt">&lt;/make&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class='line'><span class="c">       Sub-nodes:</span>
</span><span class='line'><span class="c">       * name</span>
</span><span class='line'><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class='line'><span class="c">       * type --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Vector size<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>vec_size<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sink&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/sink&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/source&gt;</span>
</span><span class='line'><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Tu_modulo_dec2bin_ff.xml)</span> <a href='/downloads/code/Tu_modulo_dec2bin_ff.xml'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;block&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Decimal To Binary<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Tu_modulo_dec2bin_ff<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class='line'>  <span class="nt">&lt;make&gt;</span>Tu_modulo.dec2bin_ff($vec_size)<span class="nt">&lt;/make&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class='line'><span class="c">       Sub-nodes:</span>
</span><span class='line'><span class="c">       * name</span>
</span><span class='line'><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class='line'><span class="c">       * type --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Vector size<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>vec_size<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sink&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/sink&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/source&gt;</span>
</span><span class='line'><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Compilación de los bloques</em></p>

<p>Una vez ya realizado todos los procesos referentes al código de programación de los bloques de procesamiento se procede a integrarlos en el proyecto de GNU Radio. Esto se realiza por medio de una serie de comandos desde una terminal de linux en la raíz del proyecto. En caso de no tener una carpeta de build, se crea por medio de comandos de linux</p>

<p><code>
$ mkdir build
$ cd build
</code>
Una vez dentro de la carpeta de build, se procede a compilar el proyecto</p>

<p><code>
$ cmake ../
$ make
$ sudo make install
$ sudo ldconfig
</code>
De esa manera queda integrado el módulo out-of-tree dentro de GNU Radio.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
</feed>
