<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sdr | Iván Rodríguez]]></title>
  <link href="http://viktorivan.github.io/blog/categories/sdr/atom.xml" rel="self"/>
  <link href="http://viktorivan.github.io/"/>
  <updated>2015-10-26T09:42:02-06:00</updated>
  <id>http://viktorivan.github.io/</id>
  <author>
    <name><![CDATA[Iván Rodríguez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Librerías externas en GNU Radio]]></title>
    <link href="http://viktorivan.github.io/blog/2014/03/19/librerias-externas-en-gnu-radio/"/>
    <updated>2014-03-19T20:04:12-06:00</updated>
    <id>http://viktorivan.github.io/blog/2014/03/19/librerias-externas-en-gnu-radio</id>
    <content type="html"><![CDATA[<p>Introducción.</p>

<p>Aunque <a href="http://www.gnuradio.org">GNU Radio</a> es un proyecto versátil conformado con una gran cantidad de herramientas que permiten realizar múltiples procesos en Software Radio, muchas veces se requiere de operaciones específicas que difícilmente serán integradas en el proyecto original. La integración de estas funciones especiales pueden ser desarrolladas por el usuario por medio de herramientas como <code>gr_modtool</code>, donde a través de código en C++ o Python se puede desarrollar cualquier función para el procesamiento digital de la señal que no este considerado dentro del proyecto de GNU Radio. </p>

<!-- more -->

<p>Lenguajes de programación como C++ y Python gozan de una popularidad entre los programadores de tal manera que se desarrollan proyectos independientes especializados que facilitan el desarrollo de programas orientados a analizar o solucionar áreas muy específicas, un caso es <a href="http://itpp.sourceforge.net">IT++</a> que es una biblioteca de clases y funciones para álgebra lineal, optimización numérica, procesamiento de señales, comunicaciones y estadística. Utilizada ampliamente tanto en la industria como en la investigación.</p>

<p><em>Integración de IT++ en módulos out-of-tree</em></p>

<p>Los módulos out-of-tree de GNU Radio utilizan la herramienta <a href="http://www.cmake.org">CMAKE</a> que es una familia de herramientas diseñadas para compilar y probar software, de esta manera se puede indicar a GNU Radio la incorporación de bibliotecas externas al proyecto out-of-tree por medio de archivos CMAKE. Estos archivos generan variables globales con la ubicación de los archivos de la biblioteca a instalar.</p>

<p>En el caso de IT++, el archivo se llama <code>FindITPP.cmake</code> y se tiene que guardar en <code>~/gr-Tu_modulo/cmake/modules</code>, quedando el archivo cmake como sigue.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (FindITPP.cmake)</span> <a href='/downloads/code/FindITPP.cmake'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="nb">INCLUDE</span><span class="p">(</span><span class="s">FindPkgConfig</span><span class="p">)</span>
</span><span class='line'><span class="nb">PKG_CHECK_MODULES</span><span class="p">(</span><span class="s">PC_ITPP</span> <span class="s">QUIET</span> <span class="s">gnuradio-core</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">FIND_PATH</span><span class="p">(</span>
</span><span class='line'>    <span class="s">ITPP_INCLUDE_DIRS</span>
</span><span class='line'>    <span class="s">NAMES</span> <span class="s">itpp/itbase.h</span>
</span><span class='line'>    <span class="s">HINTS</span> <span class="err">$</span><span class="s">ENV{ITPP_DIR}/include</span>
</span><span class='line'>        <span class="o">${</span><span class="nv">PC_ITPP_INCLUDE_DIR</span><span class="o">}</span>
</span><span class='line'>    <span class="s">PATHS</span> <span class="s">/usr/local/include</span>
</span><span class='line'>          <span class="s">/usr/include</span>
</span><span class='line'>	  <span class="s">/usr/pkgs64/include</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">FIND_LIBRARY</span><span class="p">(</span>
</span><span class='line'>    <span class="s">ITPP_LIBRARIES</span>
</span><span class='line'>    <span class="s">NAMES</span> <span class="s">itpp</span>
</span><span class='line'>    <span class="s">HINTS</span> <span class="err">$</span><span class="s">ENV{ITPP_DIR}/lib</span>
</span><span class='line'>        <span class="o">${</span><span class="nv">PC_ITPP_LIBDIR</span><span class="o">}</span>
</span><span class='line'>    <span class="s">PATHS</span> <span class="s">/usr/local/lib</span>
</span><span class='line'>          <span class="s">/usr/local/lib64</span>
</span><span class='line'>          <span class="s">/usr/lib</span>
</span><span class='line'>          <span class="s">/usr/lib64</span>
</span><span class='line'>	  <span class="s">/usr/pkgs64/lib</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">INCLUDE</span><span class="p">(</span><span class="s">FindPackageHandleStandardArgs</span><span class="p">)</span>
</span><span class='line'><span class="nb">FIND_PACKAGE_HANDLE_STANDARD_ARGS</span><span class="p">(</span><span class="s">ITPP</span> <span class="s">DEFAULT_MSG</span> <span class="s">ITPP_LIBRARIES</span> <span class="s">ITPP_INCLUDE_DIRS</span><span class="p">)</span>
</span><span class='line'><span class="nb">MARK_AS_ADVANCED</span><span class="p">(</span><span class="s">ITPP_LIBRARIES</span> <span class="s">ITPP_INCLUDE_DIRS</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Así mismo hay que indicar a CMAKE que tiene que utilizar el nuevo archivo cmake, para ello se modifica el archivo <code>CmakeLists.txt</code> ubicado en la raíz del proyecto.</p>

<p>En la sección <code># Find gnuradio build dependencies</code> se agrega la línea</p>

<pre><code>find_package(ITPP)
</code></pre>

<p>En la parte final de la sección permite agregar un mensaje de error en caso de que la biblioteca no este instalada en el sistema.</p>

<pre><code>if(NOT ITPP_FOUND)
    message(FATAL_ERROR "IT++ Core required to compile Tu_Modulo")
endif()
</code></pre>

<p>En la sección de <code># Setup the include and linker paths</code> se agrega la línea <code>${ITPP_INCLUDE_DIRS}</code> para <code>include_directories</code> y la línea <code>${ITPP_LIBRARY_DIRS}</code> para <code>link_directories</code>, quedando como sigue:</p>

<pre><code>include_directories(
    ${CMAKE_SOURCE_DIR}/lib
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_BINARY_DIR}/lib
    ${CMAKE_BINARY_DIR}/include
    ${Boost_INCLUDE_DIRS}
    ${CPPUNIT_INCLUDE_DIRS}
    ${ITPP_INCLUDE_DIRS}
    ${GNURADIO_ALL_INCLUDE_DIRS}
)

link_directories(
    ${Boost_LIBRARY_DIRS}
    ${CPPUNIT_LIBRARY_DIRS}
    ${ITPP_LIBRARY_DIRS}
    ${GNURADIO_RUNTIME_LIBRARY_DIRS}
)
</code></pre>

<p>Finalmente el archivo <code>CMakeLists.txt</code>, con sus modificaciones incluidas, quedaría:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CMakeLists.txt (CMakeLists.cmake)</span> <a href='/downloads/code/CMakeLists.cmake'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="c"># Copyright 2011,2012 Free Software Foundation, Inc.</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="c"># This file is part of GNU Radio</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="c"># GNU Radio is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="c"># any later version.</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="c"># GNU Radio is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with GNU Radio; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="c"># the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="c"># Boston, MA 02110-1301, USA.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="c"># Project setup</span>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">2.6</span><span class="p">)</span>
</span><span class='line'><span class="nb">project</span><span class="p">(</span><span class="s">gr-Tu_modulo</span> <span class="s">CXX</span> <span class="s">C</span><span class="p">)</span>
</span><span class='line'><span class="nb">enable_testing</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#select the release build type by default to get optimization flags</span>
</span><span class='line'><span class="nb">if</span><span class="p">(</span><span class="s">NOT</span> <span class="s">CMAKE_BUILD_TYPE</span><span class="p">)</span>
</span><span class='line'>   <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_BUILD_TYPE</span> <span class="s2">&quot;Release&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="nb">message</span><span class="p">(</span><span class="s">STATUS</span> <span class="s2">&quot;Build type not specified: defaulting to release.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">endif</span><span class="p">(</span><span class="s">NOT</span> <span class="s">CMAKE_BUILD_TYPE</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_BUILD_TYPE</span> <span class="o">${</span><span class="nv">CMAKE_BUILD_TYPE</span><span class="o">}</span> <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">list</span><span class="p">(</span><span class="s">APPEND</span> <span class="s">CMAKE_MODULE_PATH</span> <span class="o">${</span><span class="nv">CMAKE_SOURCE_DIR</span><span class="o">}</span><span class="s">/cmake/Modules</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="c"># Compiler specific setup</span>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="nb">if</span><span class="p">(</span><span class="s">CMAKE_COMPILER_IS_GNUCXX</span> <span class="s">AND</span> <span class="s">NOT</span> <span class="s">WIN32</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#http://gcc.gnu.org/wiki/Visibility</span>
</span><span class='line'>    <span class="nb">add_definitions</span><span class="p">(</span><span class="s">-fvisibility=hidden</span><span class="p">)</span>
</span><span class='line'><span class="nb">endif</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="c"># Find boost</span>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="nb">if</span><span class="p">(</span><span class="s">UNIX</span> <span class="s">AND</span> <span class="s">EXISTS</span> <span class="s2">&quot;/usr/lib64&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">list</span><span class="p">(</span><span class="s">APPEND</span> <span class="s">BOOST_LIBRARYDIR</span> <span class="s2">&quot;/usr/lib64&quot;</span><span class="p">)</span> <span class="c">#fedora 64-bit fix</span>
</span><span class='line'><span class="nb">endif</span><span class="p">(</span><span class="s">UNIX</span> <span class="s">AND</span> <span class="s">EXISTS</span> <span class="s2">&quot;/usr/lib64&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">Boost_ADDITIONAL_VERSIONS</span>
</span><span class='line'>    <span class="s2">&quot;1.35.0&quot;</span> <span class="s2">&quot;1.35&quot;</span> <span class="s2">&quot;1.36.0&quot;</span> <span class="s2">&quot;1.36&quot;</span> <span class="s2">&quot;1.37.0&quot;</span> <span class="s2">&quot;1.37&quot;</span> <span class="s2">&quot;1.38.0&quot;</span> <span class="s2">&quot;1.38&quot;</span> <span class="s2">&quot;1.39.0&quot;</span> <span class="s2">&quot;1.39&quot;</span>
</span><span class='line'>    <span class="s2">&quot;1.40.0&quot;</span> <span class="s2">&quot;1.40&quot;</span> <span class="s2">&quot;1.41.0&quot;</span> <span class="s2">&quot;1.41&quot;</span> <span class="s2">&quot;1.42.0&quot;</span> <span class="s2">&quot;1.42&quot;</span> <span class="s2">&quot;1.43.0&quot;</span> <span class="s2">&quot;1.43&quot;</span> <span class="s2">&quot;1.44.0&quot;</span> <span class="s2">&quot;1.44&quot;</span>
</span><span class='line'>    <span class="s2">&quot;1.45.0&quot;</span> <span class="s2">&quot;1.45&quot;</span> <span class="s2">&quot;1.46.0&quot;</span> <span class="s2">&quot;1.46&quot;</span> <span class="s2">&quot;1.47.0&quot;</span> <span class="s2">&quot;1.47&quot;</span> <span class="s2">&quot;1.48.0&quot;</span> <span class="s2">&quot;1.48&quot;</span> <span class="s2">&quot;1.49.0&quot;</span> <span class="s2">&quot;1.49&quot;</span>
</span><span class='line'>    <span class="s2">&quot;1.50.0&quot;</span> <span class="s2">&quot;1.50&quot;</span> <span class="s2">&quot;1.51.0&quot;</span> <span class="s2">&quot;1.51&quot;</span> <span class="s2">&quot;1.52.0&quot;</span> <span class="s2">&quot;1.52&quot;</span> <span class="s2">&quot;1.53.0&quot;</span> <span class="s2">&quot;1.53&quot;</span> <span class="s2">&quot;1.54.0&quot;</span> <span class="s2">&quot;1.54&quot;</span>
</span><span class='line'>    <span class="s2">&quot;1.55.0&quot;</span> <span class="s2">&quot;1.55&quot;</span> <span class="s2">&quot;1.56.0&quot;</span> <span class="s2">&quot;1.56&quot;</span> <span class="s2">&quot;1.57.0&quot;</span> <span class="s2">&quot;1.57&quot;</span> <span class="s2">&quot;1.58.0&quot;</span> <span class="s2">&quot;1.58&quot;</span> <span class="s2">&quot;1.59.0&quot;</span> <span class="s2">&quot;1.59&quot;</span>
</span><span class='line'>    <span class="s2">&quot;1.60.0&quot;</span> <span class="s2">&quot;1.60&quot;</span> <span class="s2">&quot;1.61.0&quot;</span> <span class="s2">&quot;1.61&quot;</span> <span class="s2">&quot;1.62.0&quot;</span> <span class="s2">&quot;1.62&quot;</span> <span class="s2">&quot;1.63.0&quot;</span> <span class="s2">&quot;1.63&quot;</span> <span class="s2">&quot;1.64.0&quot;</span> <span class="s2">&quot;1.64&quot;</span>
</span><span class='line'>    <span class="s2">&quot;1.65.0&quot;</span> <span class="s2">&quot;1.65&quot;</span> <span class="s2">&quot;1.66.0&quot;</span> <span class="s2">&quot;1.66&quot;</span> <span class="s2">&quot;1.67.0&quot;</span> <span class="s2">&quot;1.67&quot;</span> <span class="s2">&quot;1.68.0&quot;</span> <span class="s2">&quot;1.68&quot;</span> <span class="s2">&quot;1.69.0&quot;</span> <span class="s2">&quot;1.69&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="nb">find_package</span><span class="p">(</span><span class="s">Boost</span> <span class="s2">&quot;1.35&quot;</span> <span class="s">COMPONENTS</span> <span class="s">filesystem</span> <span class="s">system</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">if</span><span class="p">(</span><span class="s">NOT</span> <span class="s">Boost_FOUND</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">message</span><span class="p">(</span><span class="s">FATAL_ERROR</span> <span class="s2">&quot;Boost required to compile Tu_modulo&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">endif</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="c"># Install directories</span>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="nb">include</span><span class="p">(</span><span class="s">GrPlatform</span><span class="p">)</span> <span class="c">#define LIB_SUFFIX</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_RUNTIME_DIR</span>      <span class="s">bin</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_LIBRARY_DIR</span>      <span class="s">lib</span><span class="o">${</span><span class="nv">LIB_SUFFIX</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_INCLUDE_DIR</span>      <span class="s">include/Tu_modulo</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_DATA_DIR</span>         <span class="s">share</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_PKG_DATA_DIR</span>     <span class="o">${</span><span class="nv">GR_DATA_DIR</span><span class="o">}</span><span class="s">/</span><span class="o">${</span><span class="nv">CMAKE_PROJECT_NAME</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_DOC_DIR</span>          <span class="o">${</span><span class="nv">GR_DATA_DIR</span><span class="o">}</span><span class="s">/doc</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_PKG_DOC_DIR</span>      <span class="o">${</span><span class="nv">GR_DOC_DIR</span><span class="o">}</span><span class="s">/</span><span class="o">${</span><span class="nv">CMAKE_PROJECT_NAME</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_CONF_DIR</span>         <span class="s">etc</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_PKG_CONF_DIR</span>     <span class="o">${</span><span class="nv">GR_CONF_DIR</span><span class="o">}</span><span class="s">/</span><span class="o">${</span><span class="nv">CMAKE_PROJECT_NAME</span><span class="o">}</span><span class="s">/conf.d</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_LIBEXEC_DIR</span>      <span class="s">libexec</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_PKG_LIBEXEC_DIR</span>  <span class="o">${</span><span class="nv">GR_LIBEXEC_DIR</span><span class="o">}</span><span class="s">/</span><span class="o">${</span><span class="nv">CMAKE_PROJECT_NAME</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GRC_BLOCKS_DIR</span>      <span class="o">${</span><span class="nv">GR_PKG_DATA_DIR</span><span class="o">}</span><span class="s">/grc/blocks</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="c"># Find gnuradio build dependencies</span>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="nb">find_package</span><span class="p">(</span><span class="s">CppUnit</span><span class="p">)</span>
</span><span class='line'><span class="nb">find_package</span><span class="p">(</span><span class="s">ITPP</span><span class="p">)</span>
</span><span class='line'><span class="c"># Search for GNU Radio and its components and versions. Add any</span>
</span><span class='line'><span class="c"># components required to the list of GR_REQUIRED_COMPONENTS (in all</span>
</span><span class='line'><span class="c"># caps such as FILTER or FFT) and change the version to the minimum</span>
</span><span class='line'><span class="c"># API compatible version required.</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_REQUIRED_COMPONENTS</span> <span class="s">RUNTIME</span><span class="p">)</span>
</span><span class='line'><span class="nb">find_package</span><span class="p">(</span><span class="s">Gnuradio</span> <span class="s2">&quot;3.7.2&quot;</span> <span class="s">REQUIRED</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">if</span><span class="p">(</span><span class="s">NOT</span> <span class="s">CPPUNIT_FOUND</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">message</span><span class="p">(</span><span class="s">FATAL_ERROR</span> <span class="s2">&quot;CppUnit required to compile Tu_modulo&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">endif</span><span class="p">()</span>
</span><span class='line'><span class="nb">if</span><span class="p">(</span><span class="s">NOT</span> <span class="s">ITPP_FOUND</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">message</span><span class="p">(</span><span class="s">FATAL_ERROR</span> <span class="s2">&quot;IT++ Core required to compile Umbrella&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">endif</span><span class="p">()</span>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="c"># Setup the include and linker paths</span>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="nb">include_directories</span><span class="p">(</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">CMAKE_SOURCE_DIR</span><span class="o">}</span><span class="s">/lib</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">CMAKE_SOURCE_DIR</span><span class="o">}</span><span class="s">/include</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">CMAKE_BINARY_DIR</span><span class="o">}</span><span class="s">/lib</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">CMAKE_BINARY_DIR</span><span class="o">}</span><span class="s">/include</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">Boost_INCLUDE_DIRS</span><span class="o">}</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">CPPUNIT_INCLUDE_DIRS</span><span class="o">}</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">ITPP_INCLUDE_DIRS</span><span class="o">}</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">GNURADIO_ALL_INCLUDE_DIRS</span><span class="o">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">link_directories</span><span class="p">(</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">Boost_LIBRARY_DIRS</span><span class="o">}</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">CPPUNIT_LIBRARY_DIRS</span><span class="o">}</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">ITPP_LIBRARY_DIRS</span><span class="o">}</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">GNURADIO_RUNTIME_LIBRARY_DIRS</span><span class="o">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Set component parameters</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_TU_MODULO_INCLUDE_DIRS</span> <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/include</span> <span class="s">CACHE</span> <span class="s">INTERNAL</span> <span class="s2">&quot;&quot;</span> <span class="s">FORCE</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">GR_TU_MODULO_SWIG_INCLUDE_DIRS</span> <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/swig</span> <span class="s">CACHE</span> <span class="s">INTERNAL</span> <span class="s2">&quot;&quot;</span> <span class="s">FORCE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="c"># Create uninstall target</span>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="nb">configure_file</span><span class="p">(</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">CMAKE_SOURCE_DIR</span><span class="o">}</span><span class="s">/cmake/cmake_uninstall.cmake.in</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">CMAKE_CURRENT_BINARY_DIR</span><span class="o">}</span><span class="s">/cmake_uninstall.cmake</span>
</span><span class='line'><span class="s">@ONLY</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">add_custom_target</span><span class="p">(</span><span class="s">uninstall</span>
</span><span class='line'>    <span class="o">${</span><span class="nv">CMAKE_COMMAND</span><span class="o">}</span> <span class="s">-P</span> <span class="o">${</span><span class="nv">CMAKE_CURRENT_BINARY_DIR</span><span class="o">}</span><span class="s">/cmake_uninstall.cmake</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="c"># Add subdirectories</span>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">include/Tu_modulo</span><span class="p">)</span>
</span><span class='line'><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">lib</span><span class="p">)</span>
</span><span class='line'><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">swig</span><span class="p">)</span>
</span><span class='line'><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">python</span><span class="p">)</span>
</span><span class='line'><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">grc</span><span class="p">)</span>
</span><span class='line'><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">apps</span><span class="p">)</span>
</span><span class='line'><span class="nb">add_subdirectory</span><span class="p">(</span><span class="s">docs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="c"># Install cmake search helper for this library</span>
</span><span class='line'><span class="c">########################################################################</span>
</span><span class='line'><span class="nb">install</span><span class="p">(</span><span class="s">FILES</span> <span class="s">cmake/Modules/Tu_moduloConfig.cmake</span>
</span><span class='line'>    <span class="s">DESTINATION</span> <span class="s">lib/cmake/Tu_modulo</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Desarrollo de bloques con IT++</em></p>

<p>En este caso se desarrollarán dos bloques con funciones de IT++, el codificador y decodificador convolucional. Para ello, por medio de <code>gr_modtool</code> se requiere crear dos bloques con tres valores de entrada, uno para el polinomio, otro para la tasa de codificación y uno último para indicar la cantidad de registros que tiene el codificador.</p>

<p>Desde una terminal de linux, se ejecuta <code>gr_modtool</code></p>

<p><code>
$ gr_modtool add
GNU Radio module name identified: Tu_modulo
Enter code type: sync
Language: C++
Enter name of block/code (without module name prefix): encodconv_vff
Block/code identifier: encodconv_vff
Enter valid argument list, including default arguments: int val1, int val2, int val3
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/encodconv_vff_impl.h'...
Adding file 'lib/encodconv_vff_impl.cc'...
Adding file 'include/Tu_modulo/encodconv_vff.h'...
Editing swig/Tu_modulo_swig.i...
Adding file 'python/qa_encodconv_vff.py'...
Editing python/CMakeLists.txt...
Adding file 'grc/Tu_modulo_encodconv_vff.xml'...
Editing grc/CMakeLists.txt...
</code>
Para el decodificador, se crea un bloque con las mismas características</p>

<p><code>
$ gr_modtool add
GNU Radio module name identified: Tu_modulo
Enter code type: sync
Language: C++
Enter name of block/code (without module name prefix): decodconv_vff
Block/code identifier: decodconv_vff
Enter valid argument list, including default arguments: int val1, int val2, int val3
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/decodconv_vff_impl.h'...
Adding file 'lib/decodconv_vff_impl.cc'...
Adding file 'include/Tu_modulo/decodconv_vff.h'...
Editing swig/Tu_modulo_swig.i...
Adding file 'python/qa_decodconv_vff.py'...
Editing python/CMakeLists.txt...
Adding file 'grc/Tu_modulo_decodconv_vff.xml'...
Editing grc/CmakeLists.txt...
</code>
<em>Codificador convolucional</em></p>

<p>Dentro del archivo <code>encodconv_vff_impl.cc</code> que se ubica en <code>~/gr-Tu_modulo/lib</code> se indica que se utilizará la biblioteca de IT++ </p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>En la sección de <code>encodconv_vff_impl::encodconv_vff_impl(int val1, int val2, int val3)</code> se indican los parámetros del bloque tales como la cantidad de flujos de datos, tamaño de los paquetes de entrada y salida, así como asignar a las variables internas las variables públicas que se capturaron en el bloque de GRC. </p>

<pre><code>encodconv_vff_impl::encodconv_vff_impl(int val1, int val2, int val3)
  : gr::sync_block("encodconv_vff",
          gr::io_signature::make(1, 1, sizeof(float) * val3),
          gr::io_signature::make(1, 1, sizeof(float) * val3 * sizeof(val1)))
{
	polsize = sizeof(val1);
	cl = val2;
	pz = val3;
  
	for (int i = 0; i &lt; 0x100; i++){
		polynom[i] = i;
	}
	
	memcpy(polynom, (char*)&amp;val1, sizeof(val1));
	
	// -- Channel code parameters --

	itpp::ivec generator(polsize);

	for (int i = 0; i &lt; polsize; i++){
		generator[i] = polynom[i];
	}

	code.set_generator_polynomials(generator, cl);	
}
</code></pre>

<p>Como se puede observar, varias funciones de IT++ se han utilizado como parte del código del bloque de procesamiento, para llamar cualquier otra función solo se indica con el formato <code>itpp::función</code>, de esta manera, el compilador reconocerá que la función forma parte de la biblioteca de IT++.</p>

<p>En la sección de procesamiento de la señal <code>// Do &lt;+signal processing+&gt;</code> se realizará la codificación convolucional de los paquetes de entrada de acuerdo a los parámetros previamente definidos, por lo que el código final queda como sigue:</p>

<pre><code>int
encodconv_vff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    itpp::bvec tempin(pz * sizeof(float));
	itpp::bvec tempout(pz * polsize * sizeof(float));
  
	for (int j = 0; j &lt; (pz * sizeof(float)); j++){
		tempin[j] = in[j];
	}	

	code.encode_tailbite(tempin, tempout);

	for (int k = 0; k &lt; (pz * polsize * sizeof(float)); k++){
		out[k] = tempout[k];
	}

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>La operación de codificación es realizada por el comando <code>code.encode_tailbite(tempin, tempout);
</code>, disminuyendo así la cantidad de líneas para desarrollar un codificador convolucional.</p>

<p>La versión final del código es</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>encodconv_vff_impl.cc (encodconv_vff_impl.cpp)</span> <a href='/downloads/code/encodconv_vff_impl.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef HAVE_CONFIG_H</span>
</span><span class='line'><span class="cp">#include &quot;config.h&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;gnuradio/io_signature.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;encodconv_vff_impl.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;itpp/itcomm.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">encodconv_vff</span><span class="o">::</span><span class="n">sptr</span>
</span><span class='line'>    <span class="n">encodconv_vff</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">gnuradio</span><span class="o">::</span><span class="n">get_initial_sptr</span>
</span><span class='line'>        <span class="p">(</span><span class="k">new</span> <span class="n">encodconv_vff_impl</span><span class="p">(</span><span class="n">val1</span><span class="p">,</span> <span class="n">val2</span><span class="p">,</span> <span class="n">val3</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * The private constructor</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">encodconv_vff_impl</span><span class="o">::</span><span class="n">encodconv_vff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">gr</span><span class="o">::</span><span class="n">sync_block</span><span class="p">(</span><span class="s">&quot;encodconv_vff&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">val3</span><span class="p">),</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">val3</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    	<span class="n">polsize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">);</span>
</span><span class='line'>		<span class="n">cl</span> <span class="o">=</span> <span class="n">val2</span><span class="p">;</span>
</span><span class='line'>		<span class="n">pz</span> <span class="o">=</span> <span class="n">val3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>			<span class="n">polynom</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">memcpy</span><span class="p">(</span><span class="n">polynom</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">val1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">));</span>
</span><span class='line'>		
</span><span class='line'>		<span class="c1">// -- Channel code parameters --</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">itpp</span><span class="o">::</span><span class="n">ivec</span> <span class="n">generator</span><span class="p">(</span><span class="n">polsize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">polsize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>			<span class="n">generator</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">polynom</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">code</span><span class="p">.</span><span class="n">set_generator_polynomials</span><span class="p">(</span><span class="n">generator</span><span class="p">,</span> <span class="n">cl</span><span class="p">);</span>	
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Our virtual destructor.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">encodconv_vff_impl</span><span class="o">::~</span><span class="n">encodconv_vff_impl</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span>
</span><span class='line'>    <span class="n">encodconv_vff_impl</span><span class="o">::</span><span class="n">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="n">in</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">float</span> <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">itpp</span><span class="o">::</span><span class="n">bvec</span> <span class="n">tempin</span><span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span><span class='line'>		<span class="n">itpp</span><span class="o">::</span><span class="n">bvec</span> <span class="n">tempout</span><span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="n">polsize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>			<span class="n">tempin</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>		<span class="p">}</span>	
</span><span class='line'>
</span><span class='line'>		<span class="n">code</span><span class="p">.</span><span class="n">encode_tailbite</span><span class="p">(</span><span class="n">tempin</span><span class="p">,</span> <span class="n">tempout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="n">polsize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>			<span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempout</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Tell runtime system how many output items we produced.</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">noutput_items</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="cm">/* namespace Tu_modulo */</span>
</span><span class='line'><span class="p">}</span> <span class="cm">/* namespace gr */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Decodificador convolucional</em></p>

<p>De manera similar al codificador convolucional, es necesario modificar el archivo <code>decodconv_vff_impl.cc</code>, en una primera instancia se agrega la línea donde se indica que se utilizará la biblioteca de IT++.</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>En la sección de <code>decodconv_vff_impl::decodconv_vff_impl(int val1, int val2, int val3)</code> se indican los parámetros del bloque,</p>

<pre><code>decodconv_vff_impl::decodconv_vff_impl(int val1, int val2, int val3)
  : gr::sync_block("decodconv_vff",
          gr::io_signature::make(1, 1, sizeof(float) * val3 * sizeof(val1)),
          gr::io_signature::make(1, 1, sizeof(float) * val3))
{
	polsize = sizeof(val1);
	cl = val2;
	pz = val3;
  
	for (int i = 0; i &lt; 0x100; i++){
		polynom[i] = i;
	}

	memcpy(polynom, (char*)&amp;val1, sizeof(val1));
	
	// -- Channel code parameters --

	itpp::ivec generator(polsize);

	for (int i = 0; i &lt; polsize; i++){
		generator[i] = polynom[i];
	}

	code.set_generator_polynomials(generator, cl);
}
</code></pre>

<p>De igual manera, en la sección de procesamiento de la señal del bloque de procesamiento <code>// Do &lt;+signal processing+&gt;</code> se realizará la decodificación de los paquetes de entrada de acuerdo a los parámetros previamente definidos utilizando la biblioteca de IT++, </p>

<pre><code>int
decodconv_vff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

itpp::bvec tempbin(pz * polsize * sizeof(float));
itpp::bvec tempout(pz * sizeof(float));
itpp::vec tempin(pz * polsize * sizeof(float));

	for (int j = 0; j &lt; (pz  * polsize * sizeof(float)); j++){
		tempbin[j] = in[j];
	}

	tempin = to_vec(tempbin);
	tempin = -(tempin * 2 - 1);

	code.decode_tailbite(tempin, tempout);

	for (int k = 0; k &lt; (pz * sizeof(float)); k++){
		out[k] = tempout[k];
	}

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>En este bloque la operación de decodificación es realizada por el comando <code>code.decode_tailbite(tempin, tempout);</code> </p>

<p>El código final del bloque de procesamiento es</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>decodconv_vff_impl.cc (decodconv_vff_impl.cpp)</span> <a href='/downloads/code/decodconv_vff_impl.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef HAVE_CONFIG_H</span>
</span><span class='line'><span class="cp">#include &quot;config.h&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;gnuradio/io_signature.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;decodconv_vff_impl.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;itpp/itcomm.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">decodconv_vff</span><span class="o">::</span><span class="n">sptr</span>
</span><span class='line'>    <span class="n">decodconv_vff</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">gnuradio</span><span class="o">::</span><span class="n">get_initial_sptr</span>
</span><span class='line'>        <span class="p">(</span><span class="k">new</span> <span class="n">decodconv_vff_impl</span><span class="p">(</span><span class="n">val1</span><span class="p">,</span> <span class="n">val2</span><span class="p">,</span> <span class="n">val3</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * The private constructor</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">decodconv_vff_impl</span><span class="o">::</span><span class="n">decodconv_vff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">gr</span><span class="o">::</span><span class="n">sync_block</span><span class="p">(</span><span class="s">&quot;decodconv_vff&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">val3</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">)),</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">val3</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    	<span class="n">polsize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">);</span>
</span><span class='line'>		<span class="n">cl</span> <span class="o">=</span> <span class="n">val2</span><span class="p">;</span>
</span><span class='line'>		<span class="n">pz</span> <span class="o">=</span> <span class="n">val3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>			<span class="n">polynom</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">memcpy</span><span class="p">(</span><span class="n">polynom</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">val1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">val1</span><span class="p">));</span>
</span><span class='line'>		
</span><span class='line'>		<span class="c1">// -- Channel code parameters --</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">itpp</span><span class="o">::</span><span class="n">ivec</span> <span class="n">generator</span><span class="p">(</span><span class="n">polsize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">polsize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>			<span class="n">generator</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">polynom</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">code</span><span class="p">.</span><span class="n">set_generator_polynomials</span><span class="p">(</span><span class="n">generator</span><span class="p">,</span> <span class="n">cl</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Our virtual destructor.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">decodconv_vff_impl</span><span class="o">::~</span><span class="n">decodconv_vff_impl</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span>
</span><span class='line'>    <span class="n">decodconv_vff_impl</span><span class="o">::</span><span class="n">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="n">in</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">float</span> <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">itpp</span><span class="o">::</span><span class="n">bvec</span> <span class="n">tempbin</span><span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="n">polsize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span><span class='line'>	<span class="n">itpp</span><span class="o">::</span><span class="n">bvec</span> <span class="n">tempout</span><span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span><span class='line'>	<span class="n">itpp</span><span class="o">::</span><span class="n">vec</span> <span class="n">tempin</span><span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="n">polsize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">pz</span>  <span class="o">*</span> <span class="n">polsize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>			<span class="n">tempbin</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">tempin</span> <span class="o">=</span> <span class="n">to_vec</span><span class="p">(</span><span class="n">tempbin</span><span class="p">);</span>
</span><span class='line'>		<span class="n">tempin</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">tempin</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">code</span><span class="p">.</span><span class="n">decode_tailbite</span><span class="p">(</span><span class="n">tempin</span><span class="p">,</span> <span class="n">tempout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">pz</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>			<span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempout</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Tell runtime system how many output items we produced.</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">noutput_items</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="cm">/* namespace Tu_modulo */</span>
</span><span class='line'><span class="p">}</span> <span class="cm">/* namespace gr */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Definiendo las variables públicas en los archivos de cabecera</em></p>

<p>Para poder utilizar libremente las clases y variables de IT++ dentro de los archivos cc de GNU Radio se requiere modificar los archivos de cabecera h de los bloques de procesamiento. Para el codificador convolucional el archivo es <code>encodconv_vff_impl.h</code> y para el decodificador es <code>decodconv_vff_impl.h</code>. </p>

<p>Dentro del archivo <code>encodconv_vff_impl.h</code> se indica la biblioteca de IT++</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>en la sección de <code>public</code> se indican las variables a utilizar</p>

<pre><code> public:
  encodconv_vff_impl(int val1, int val2, int val3);
  unsigned char polynom [0x100];
  int polsize;
  int cl;
  int pz;
  itpp::Convolutional_Code code;
  
  ~encodconv_vff_impl();
</code></pre>

<p>El archivo h del bloque de procesamiento del codificador convolucional queda como sigue</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>encodconv_vff_impl.h (encodconv_vff_impl.c)</span> <a href='/downloads/code/encodconv_vff_impl.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef INCLUDED_TU_MODULO_ENCODCONV_VFF_IMPL_H</span>
</span><span class='line'><span class="cp">#define INCLUDED_TU_MODULO_ENCODCONV_VFF_IMPL_H</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;Tu_modulo/encodconv_vff.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;itpp/itcomm.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">class</span> <span class="n">encodconv_vff_impl</span> <span class="o">:</span> <span class="n">public</span> <span class="n">encodconv_vff</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>     <span class="nl">private:</span>
</span><span class='line'>      <span class="c1">// Nothing to declare in this block.</span>
</span><span class='line'>
</span><span class='line'>     <span class="nl">public:</span>
</span><span class='line'>      <span class="n">encodconv_vff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">polynom</span> <span class="p">[</span><span class="mh">0x100</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">polsize</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">cl</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">pz</span><span class="p">;</span>
</span><span class='line'>      <span class="n">itpp</span><span class="o">::</span><span class="n">Convolutional_Code</span> <span class="n">code</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">~</span><span class="n">encodconv_vff_impl</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Where all the action really happens</span>
</span><span class='line'>      <span class="kt">int</span> <span class="nf">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="c1">// namespace Tu_modulo</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// namespace gr</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* INCLUDED_TU_MODULO_ENCODCONV_VFF_IMPL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>De igual manera en el archivo de cabecera del decodificador <code>decodconv_vff_impl.h</code> se indica la biblioteca de IT++</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>y en la sección de <code>public</code> las variables requeridas para el procesamiento de la señal,
     public:
      decodconv_vff_impl(int val1, int val2, int val3);
      unsigned char polynom [0x100];
      int polsize;
      int cl;
      int pz;
      itpp::Convolutional_Code code;</p>

<pre><code>  ~decodconv_vff_impl();
</code></pre>

<p>El archivo de cabecera, en su versión final queda,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>decodconv_vff_impl.h (decodconv_vff_impl.c)</span> <a href='/downloads/code/decodconv_vff_impl.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef INCLUDED_TU_MODULO_DECODCONV_VFF_IMPL_H</span>
</span><span class='line'><span class="cp">#define INCLUDED_TU_MODULO_DECODCONV_VFF_IMPL_H</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;Tu_modulo/decodconv_vff.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;itpp/itcomm.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">class</span> <span class="n">decodconv_vff_impl</span> <span class="o">:</span> <span class="n">public</span> <span class="n">decodconv_vff</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>     <span class="nl">private:</span>
</span><span class='line'>      <span class="c1">// Nothing to declare in this block.</span>
</span><span class='line'>
</span><span class='line'>     <span class="nl">public:</span>
</span><span class='line'>      <span class="n">decodconv_vff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">val1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val3</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">polynom</span> <span class="p">[</span><span class="mh">0x100</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">polsize</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">cl</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">pz</span><span class="p">;</span>
</span><span class='line'>      <span class="n">itpp</span><span class="o">::</span><span class="n">Convolutional_Code</span> <span class="n">code</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">~</span><span class="n">decodconv_vff_impl</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">// Where all the action really happens</span>
</span><span class='line'>      <span class="kt">int</span> <span class="nf">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="c1">// namespace Tu_modulo</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// namespace gr</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* INCLUDED_TU_MODULO_DECODCONV_VFF_IMPL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Interfaz gráfica de GRC</em></p>

<p>Los bloques de procesamiento mostrados en GNU Radio Companion son archivos xml que se ubican en <code>~/gr-Tu_modulo/grc</code>, para el codificador convolucional es <code>Tu_modulo_encodconv_vff.xml</code> y para el decodificador <code>Tu_modulo_decodconv_vff.xml</code>.</p>

<p>Los parámetros a modificar son <code>&lt;name&gt;</code>, <code>&lt;param&gt;</code>, <code>&lt;sink&gt;</code> y <code>&lt;source&gt;</code>, los bloques del decodificador y codificador convolucional quedan como sigue,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Tu_modulo_encodconv_vff.xml)</span> <a href='/downloads/code/Tu_modulo_encodconv_vff.xml'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;block&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Convolutional Encoder<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Tu_modulo_encodconv_vff<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class='line'>  <span class="nt">&lt;make&gt;</span>Tu_modulo.encodconv_vff($val1, $val2, $val3)<span class="nt">&lt;/make&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class='line'><span class="c">       Sub-nodes:</span>
</span><span class='line'><span class="c">       * name</span>
</span><span class='line'><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class='line'><span class="c">       * type --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Generator Polynomial<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>val1<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int_vector<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Constraint Length<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>val2<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Packet Size<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>val3<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Rate (1/N)<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>val4<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sink&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>    <span class="nt">&lt;vlen&gt;</span>$val3<span class="nt">&lt;/vlen&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/sink&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>    <span class="nt">&lt;vlen&gt;</span>$val3 * $val4<span class="nt">&lt;/vlen&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/source&gt;</span>
</span><span class='line'><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Tu_modulo_decodconv_vff.xml)</span> <a href='/downloads/code/Tu_modulo_decodconv_vff.xml'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;block&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Convolutional Decoder<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Tu_modulo_decodconv_vff<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class='line'>  <span class="nt">&lt;make&gt;</span>Tu_modulo.decodconv_vff($val1, $val2, $val3)<span class="nt">&lt;/make&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class='line'><span class="c">       Sub-nodes:</span>
</span><span class='line'><span class="c">       * name</span>
</span><span class='line'><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class='line'><span class="c">       * type --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Generator Polynomial<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>val1<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int_vector<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Constraint Length<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>val2<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Packet Size<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>val3<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Rate (1/N)<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>val4<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>    <span class="nt">&lt;vlen&gt;</span>$val3 * $val4<span class="nt">&lt;/vlen&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/sink&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>    <span class="nt">&lt;vlen&gt;</span>$val3<span class="nt">&lt;/vlen&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/source&gt;</span>
</span><span class='line'><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Compilación de los bloques</em></p>

<p>Una vez ya realizado todos los procesos referentes al código de programación de los bloques de procesamiento se procede a integrarlos en el proyecto de GNU Radio. Esto se realiza por medio de una serie de comandos desde una terminal de linux en la raíz del proyecto. En caso de no tener una carpeta de build, se crea por medio de comandos de linux</p>

<p><code>
$ mkdir build
$ cd build
</code>
Una vez dentro de la carpeta de build, se procede a compilar el proyecto</p>

<p><code>
$ cmake ../
$ make
$ sudo make install
$ sudo ldconfig
</code>
De esa manera queda integrado el módulo out-of-tree dentro de GNU Radio.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bloques de procesamiento de señales en GNU Radio]]></title>
    <link href="http://viktorivan.github.io/blog/2014/03/19/bloques-de-procesamiento-de-senales-en-gnu-radio/"/>
    <updated>2014-03-19T13:06:58-06:00</updated>
    <id>http://viktorivan.github.io/blog/2014/03/19/bloques-de-procesamiento-de-senales-en-gnu-radio</id>
    <content type="html"><![CDATA[<p>Introducción.</p>

<p>El proyecto de <a href="http://www.gnuradio.org">GNU Radio</a> permite el desarrollo de bloques de procesamiento de señales que pueden ser escritos tanto en lenguaje de programación Python o C++. Este tipo de módulos son conocidos como <code>out-of-tree</code>, ya que, aunque los módulos serán integrados dentro del catálogo de bloques de GNU Radio no se van a integrar al proyecto para su distribución.</p>

<!-- more -->

<p>Procedimiento.</p>

<p>Para crear un módulo out-of-tree se ejecuta desde una terminal de linux el siguiente comando</p>

<p><code>
$ gr_modtool create
Name of the new module:Tu_modulo
Creating out-of-tree module in ./gr-Tu_modulo... Done. 
Use 'gr_modtool add' to add a new block to this currently empty module. 
</code></p>

<p>El nombre que se indique para el módulo es con el que va a aparecer en el catálogo de GNU Radio.</p>

<p>Para crear los bloques que integrarán el módulo se utiliza la herramienta <code>gr_modtool</code> en la carpeta raíz del proyecto. En este caso se creará un bloque que realizará la función de un convertidor binario a decimal para los tipos de datos float.</p>

<p><code>
$ cd gr-Tu_modulo
$ gr_modtool add
GNU Radio module name identified: Tu_modulo 
Enter code type: decimator 
Language: C++ 
Enter name of block/code (without module name prefix): bin2dec_ff 
Block/code identifier: bin2dec_ff 
Enter valid argument list, including default arguments: int vec_size 
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/bin2dec_ff_impl.h'... 
Adding file 'lib/bin2dec_ff_impl.cc'... 
Adding file 'include/Tu_modulo/bin2dec_ff.h'... 
Editing swig/Tu_modulo_swig.i... 
Adding file 'python/qa_bin2dec_ff.py'... 
Editing python/CMakeLists.txt... 
Adding file 'grc/Tu_modulo_bin2dec_ff.xml'... 
Editing grc/CMakeLists.txt...
</code>
y a su vez, se desarrollará un bloque que realice la operación inversa, esto es, un convertidor decimal a binario.</p>

<p><code>
$ gr_modtool add 
GNU Radio module name identified: Tu_modulo 
Enter code type: interpolator 
Language: C++ 
Enter name of block/code (without module name prefix): dec2bin_ff 
Block/code identifier: dec2bin_ff 
Enter valid argument list, including default arguments: int vec_size 
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/dec2bin_ff_impl.h'... 
Adding file 'lib/dec2bin_ff_impl.cc'... 
Adding file 'include/Tu_modulo/dec2bin_ff.h'... 
Editing swig/Tu_modulo_swig.i... 
Adding file 'python/qa_dec2bin_ff.py'... 
Editing python/CMakeLists.txt... 
Adding file 'grc/Tu_modulo_dec2bin_ff.xml'... 
Editing grc/CmakeLists.txt...
</code></p>

<p>de esta manera se han creado dos bloques, un decimador para el convertidor binario a decimal y un interpolador para el decimal a binario.</p>

<p>Los archivos donde se realizará la programación en código c++ se ubican en <code>~/gr-Tu_modulo/lib</code> y se llama <code>dec2bin_ff_impl.cc</code> para el convertidor decimal a binario y <code>bin2dec_ff_impl.cc</code> para el convertidor binario a decimal.</p>

<p><em>Convertidor binario a decimal</em></p>

<p>Dentro del archivo <code>bin2dec_ff_impl.cc</code> hay que indicar las librerías que se utilizarán, en este caso sólo requerimos la librería <code>math.h</code>, después de los include ya definidos agregamos:</p>

<pre><code>#include &lt;math.h&gt;
</code></pre>

<p>En la sección de <code>bin2dec_ff_impl::bin2dec_ff_impl(int vec_size)</code> se definen la cantidad de flujos de datos que manejará el bloque de procesamiento, en este caso, sólo es un flujo de entrada y uno de salida, el factor de decimación definido por la variable vec_size y además se asigna a la variable chunk el valor de vec_size, ya que vec_size representa la cantidad de bits que se requieren para convertir el número a decimal. </p>

<pre><code>bin2dec_ff_impl::bin2dec_ff_impl(int vec_size)
  : gr::sync_decimator("bin2dec_ff",
          gr::io_signature::make(1, 1, sizeof(float)),
          gr::io_signature::make(1, 1, sizeof(float)), vec_size)
{
	chunk = vec_size;
}
</code></pre>

<p>En la parte correspondiente a <code>// Do &lt;+signal processing+&gt;</code> es donde se realiza el procesamiento de datos que manipulará el bloque, para la conversión de binario a decimal se desarrolla el código de programación en c++, quedando de la siguiente manera:</p>

<pre><code>int
bin2dec_ff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    int j = 0, a = 0;
    for (int i = 0; i &lt; noutput_items * chunk; i = i + chunk){
    	out[j] = 0;
    	a = chunk - 1;
    	for (int k = 0; k &lt; chunk; k++){
    		out[j] = out[j] + (in[i + k] * pow (2,a));
    		a = a - 1;
    	}
    	j++;
    }

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>El archivo quedaría de la siguiente forma, ya con todas las modificaciones incluidas:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bin2dec_ff_impl.cc (bin2dec_ff_impl.cpp)</span> <a href='/downloads/code/bin2dec_ff_impl.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef HAVE_CONFIG_H</span>
</span><span class='line'><span class="cp">#include &quot;config.h&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;gnuradio/io_signature.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;bin2dec_ff_impl.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bin2dec_ff</span><span class="o">::</span><span class="n">sptr</span>
</span><span class='line'>    <span class="n">bin2dec_ff</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">gnuradio</span><span class="o">::</span><span class="n">get_initial_sptr</span>
</span><span class='line'>        <span class="p">(</span><span class="k">new</span> <span class="n">bin2dec_ff_impl</span><span class="p">(</span><span class="n">vec_size</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * The private constructor</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">bin2dec_ff_impl</span><span class="o">::</span><span class="n">bin2dec_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">gr</span><span class="o">::</span><span class="n">sync_decimator</span><span class="p">(</span><span class="s">&quot;bin2dec_ff&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    	<span class="n">chunk</span> <span class="o">=</span> <span class="n">vec_size</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Our virtual destructor.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">bin2dec_ff_impl</span><span class="o">::~</span><span class="n">bin2dec_ff_impl</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span>
</span><span class='line'>    <span class="n">bin2dec_ff_impl</span><span class="o">::</span><span class="n">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="n">in</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">float</span> <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">noutput_items</span> <span class="o">*</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">chunk</span><span class="p">){</span>
</span><span class='line'>        	<span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        	<span class="n">a</span> <span class="o">=</span> <span class="n">chunk</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        		<span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">in</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">pow</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">a</span><span class="p">));</span>
</span><span class='line'>        		<span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        	<span class="p">}</span>
</span><span class='line'>        	<span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Tell runtime system how many output items we produced.</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">noutput_items</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="cm">/* namespace Tu_modulo */</span>
</span><span class='line'><span class="p">}</span> <span class="cm">/* namespace gr */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Convertidor decimal a binario</em></p>

<p>Para corroborar el correcto funcionamiento del bloque de convertidor binario a decimal se propone realizar un convertidor decimal a binario que realizará la operación inversa del bloque anterior.</p>

<p>El archivo donde se realiza la programación es <code>dec2bin_ff_impl.cc</code>. Como primer paso se indica la librería que utilizará el bloque de procesamiento, de la misma forma que se indicó en el bloque anterior.</p>

<pre><code>#include &lt;math.h&gt;
</code></pre>

<p>Nuevamente, en la sección de <code>dec2bin_ff_impl::dec2bin_ff_impl(int vec_size)
</code> se indica la cantidad de flujos de entrada y salida que manejará el bloque de procesamiento, así también el factor de interpolación definido por la variable vec_size y por último la variabe chunk, quedando como sigue:</p>

<pre><code>dec2bin_ff_impl::dec2bin_ff_impl(int vec_size)
  : gr::sync_interpolator("dec2bin_ff",
          gr::io_signature::make(1, 1, sizeof(float)),
          gr::io_signature::make(1, 1, sizeof(float)), vec_size)
{
	chunk = vec_size;
}
</code></pre>

<p>En la sección de <code>// Do &lt;+signal processing+&gt;</code> se escribe el código que realizará la conversión decimal a binario.</p>

<pre><code>int
dec2bin_ff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    int l = 0, m = 0, a = 0, b[chunk];
    for (int i = 0; i &lt; noutput_items / chunk; i++){
    	a = in[i];
    	l = chunk - 1;
    	for (int j = 0; j &lt; chunk; j++){
    		b[j] = a % 2;
    		a = a / 2;	
    	}
    	for (int k = 0; k &lt; chunk; k++){
    		out[m] = b [l];
    		l = l - 1;
    		m++;
    	}
    }
</code></pre>

<p>El archivo completo queda de la siguiente manera:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>dec2bin_ff_impl.cc (dec2bin_ff_impl.cpp)</span> <a href='/downloads/code/dec2bin_ff_impl.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef HAVE_CONFIG_H</span>
</span><span class='line'><span class="cp">#include &quot;config.h&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;gnuradio/io_signature.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;dec2bin_ff_impl.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dec2bin_ff</span><span class="o">::</span><span class="n">sptr</span>
</span><span class='line'>    <span class="n">dec2bin_ff</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">gnuradio</span><span class="o">::</span><span class="n">get_initial_sptr</span>
</span><span class='line'>        <span class="p">(</span><span class="k">new</span> <span class="n">dec2bin_ff_impl</span><span class="p">(</span><span class="n">vec_size</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * The private constructor</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">dec2bin_ff_impl</span><span class="o">::</span><span class="n">dec2bin_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">gr</span><span class="o">::</span><span class="n">sync_interpolator</span><span class="p">(</span><span class="s">&quot;dec2bin_ff&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span>
</span><span class='line'>              <span class="n">gr</span><span class="o">::</span><span class="n">io_signature</span><span class="o">::</span><span class="n">make</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)),</span> <span class="n">vec_size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    	<span class="n">chunk</span> <span class="o">=</span> <span class="n">vec_size</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Our virtual destructor.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">dec2bin_ff_impl</span><span class="o">::~</span><span class="n">dec2bin_ff_impl</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span>
</span><span class='line'>    <span class="n">dec2bin_ff_impl</span><span class="o">::</span><span class="n">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>			  <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="n">in</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">float</span> <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span> <span class="n">output_items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="n">chunk</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">noutput_items</span> <span class="o">/</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        	<span class="n">a</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        	<span class="n">l</span> <span class="o">=</span> <span class="n">chunk</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        		<span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        		<span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>	
</span><span class='line'>        	<span class="p">}</span>
</span><span class='line'>        	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">chunk</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        		<span class="n">out</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span> <span class="p">[</span><span class="n">l</span><span class="p">];</span>
</span><span class='line'>        		<span class="n">l</span> <span class="o">=</span> <span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        		<span class="n">m</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        	<span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// Tell runtime system how many output items we produced.</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">noutput_items</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="cm">/* namespace Tu_modulo */</span>
</span><span class='line'><span class="p">}</span> <span class="cm">/* namespace gr */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Adicionalmente hay que declarar la variable <code>chunk</code> de tal forma que sea pública y poder utilizarla en las diferentes secciones del bloque de procesamiento, esto se hace modificando el archivo <code>bin2dec_ff_impl.h</code> para el convertidor binario a decimal y el archivo <code>dec2bin_ff_impl.h</code> para el convertidor decimal a binario. En la sección de <code>public</code> se agrega:</p>

<pre><code> public:
  bin2dec_ff_impl(int vec_size);
  int chunk;
  ~bin2dec_ff_impl();
</code></pre>

<p>Quedando los archivos como siguen</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bin2dec_ff_impl.h (bin2dec_ff_impl.c)</span> <a href='/downloads/code/bin2dec_ff_impl.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef INCLUDED_TU_MODULO_BIN2DEC_FF_IMPL_H</span>
</span><span class='line'><span class="cp">#define INCLUDED_TU_MODULO_BIN2DEC_FF_IMPL_H</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;Tu_modulo/bin2dec_ff.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">class</span> <span class="n">bin2dec_ff_impl</span> <span class="o">:</span> <span class="n">public</span> <span class="n">bin2dec_ff</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>     <span class="nl">private:</span>
</span><span class='line'>      <span class="c1">// Nothing to declare in this block.</span>
</span><span class='line'>
</span><span class='line'>     <span class="nl">public:</span>
</span><span class='line'>      <span class="n">bin2dec_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">chunk</span><span class="p">;</span>
</span><span class='line'>      <span class="o">~</span><span class="n">bin2dec_ff_impl</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Where all the action really happens</span>
</span><span class='line'>      <span class="kt">int</span> <span class="nf">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="c1">// namespace Tu_modulo</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// namespace gr</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* INCLUDED_TU_MODULO_BIN2DEC_FF_IMPL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>dec2bin_ff_impl.h (dec2bin_ff_impl.c)</span> <a href='/downloads/code/dec2bin_ff_impl.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* -*- c++ -*- */</span>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Copyright 2014 &lt;+YOU OR YOUR COMPANY+&gt;.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is free software; you can redistribute it and/or modify</span>
</span><span class='line'><span class="cm"> * it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation; either version 3, or (at your option)</span>
</span><span class='line'><span class="cm"> * any later version.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This software is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="cm"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="cm"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="cm"> * GNU General Public License for more details.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="cm"> * along with this software; see the file COPYING.  If not, write to</span>
</span><span class='line'><span class="cm"> * the Free Software Foundation, Inc., 51 Franklin Street,</span>
</span><span class='line'><span class="cm"> * Boston, MA 02110-1301, USA.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef INCLUDED_TU_MODULO_DEC2BIN_FF_IMPL_H</span>
</span><span class='line'><span class="cp">#define INCLUDED_TU_MODULO_DEC2BIN_FF_IMPL_H</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;Tu_modulo/dec2bin_ff.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">gr</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="n">Tu_modulo</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">class</span> <span class="n">dec2bin_ff_impl</span> <span class="o">:</span> <span class="n">public</span> <span class="n">dec2bin_ff</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>     <span class="nl">private:</span>
</span><span class='line'>      <span class="c1">// Nothing to declare in this block.</span>
</span><span class='line'>
</span><span class='line'>     <span class="nl">public:</span>
</span><span class='line'>      <span class="n">dec2bin_ff_impl</span><span class="p">(</span><span class="kt">int</span> <span class="n">vec_size</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">chunk</span><span class="p">;</span>
</span><span class='line'>      <span class="o">~</span><span class="n">dec2bin_ff_impl</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Where all the action really happens</span>
</span><span class='line'>      <span class="kt">int</span> <span class="nf">work</span><span class="p">(</span><span class="kt">int</span> <span class="n">noutput_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_const_void_star</span> <span class="o">&amp;</span><span class="n">input_items</span><span class="p">,</span>
</span><span class='line'>	       <span class="n">gr_vector_void_star</span> <span class="o">&amp;</span><span class="n">output_items</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="c1">// namespace Tu_modulo</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// namespace gr</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* INCLUDED_TU_MODULO_DEC2BIN_FF_IMPL_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Interfaz GNU Radio Companion</em></p>

<p>Los bloques dentro de GNU Radio Companion (GRC) son archivos xml que se ubican en <code>~/gr-Tu_modulo/grc</code>, para el convertidor binario a decimal se llama <code>Tu_modulo_bin2dec_ff.xml</code> y para el convertidor decimal a binario <code>Tu_modulo_dec2bin_ff.xml</code>.</p>

<p>Dentro del archivo xml hay varios parámetros que pueden ser personalizados, tal como el nombre del bloque, este parámetro se define en la línea correspondiente a <code>&lt;name&gt;</code>.</p>

<pre><code>&lt;name&gt;Binary To Decimal&lt;/name&gt;
</code></pre>

<p>En la parte de <code>&lt;param&gt;</code> se indica la variable de entrada del bloque</p>

<pre><code>  &lt;param&gt;
    &lt;name&gt;Vector size&lt;/name&gt;
    &lt;key&gt;vec_size&lt;/key&gt;
    &lt;type&gt;int&lt;/type&gt;
  &lt;/param&gt;
</code></pre>

<p>El conector de entrada del bloque de procesamiento se define en <code>&lt;sink&gt;</code></p>

<pre><code>  &lt;sink&gt;
    &lt;name&gt;in&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/sink&gt;
</code></pre>

<p>El conector de salida en <code>&lt;source&gt;</code></p>

<pre><code>  &lt;source&gt;
    &lt;name&gt;out&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/source&gt;
</code></pre>

<p>De igual manera se modifican las secciones de <code>&lt;name&gt;</code>, <code>&lt;param&gt;</code>, <code>&lt;sink&gt;</code> y <code>&lt;source&gt;</code> en el archivo <code>Tu_modulo_dec2bin_ff.xml</code> para el bloque de procesamiento del convertidor decimal a binario.</p>

<p>Los archivos quedarán finalmente de la siguiente forma:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Tu_modulo_bin2dec_ff.xml)</span> <a href='/downloads/code/Tu_modulo_bin2dec_ff.xml'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;block&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Binary To Decimal<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Tu_modulo_bin2dec_ff<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class='line'>  <span class="nt">&lt;make&gt;</span>Tu_modulo.bin2dec_ff($vec_size)<span class="nt">&lt;/make&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class='line'><span class="c">       Sub-nodes:</span>
</span><span class='line'><span class="c">       * name</span>
</span><span class='line'><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class='line'><span class="c">       * type --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Vector size<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>vec_size<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sink&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/sink&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/source&gt;</span>
</span><span class='line'><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Tu_modulo_dec2bin_ff.xml)</span> <a href='/downloads/code/Tu_modulo_dec2bin_ff.xml'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;block&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Decimal To Binary<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Tu_modulo_dec2bin_ff<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;category&gt;</span>Tu_modulo<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>  <span class="nt">&lt;import&gt;</span>import Tu_modulo<span class="nt">&lt;/import&gt;</span>
</span><span class='line'>  <span class="nt">&lt;make&gt;</span>Tu_modulo.dec2bin_ff($vec_size)<span class="nt">&lt;/make&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;param&#39; node for every Parameter you want settable from the GUI.</span>
</span><span class='line'><span class="c">       Sub-nodes:</span>
</span><span class='line'><span class="c">       * name</span>
</span><span class='line'><span class="c">       * key (makes the value accessible as $keyname, e.g. in the make node)</span>
</span><span class='line'><span class="c">       * type --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Vector size<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>vec_size<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>int<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/param&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;sink&#39; node per input. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sink&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>in<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/sink&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Make one &#39;source&#39; node per output. Sub-nodes:</span>
</span><span class='line'><span class="c">       * name (an identifier for the GUI)</span>
</span><span class='line'><span class="c">       * type</span>
</span><span class='line'><span class="c">       * vlen</span>
</span><span class='line'><span class="c">       * optional (set to 1 for optional inputs) --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>out<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>float<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/source&gt;</span>
</span><span class='line'><span class="nt">&lt;/block&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Compilación de los bloques</em></p>

<p>Una vez ya realizado todos los procesos referentes al código de programación de los bloques de procesamiento se procede a integrarlos en el proyecto de GNU Radio. Esto se realiza por medio de una serie de comandos desde una terminal de linux en la raíz del proyecto. En caso de no tener una carpeta de build, se crea por medio de comandos de linux</p>

<p><code>
$ mkdir build
$ cd build
</code>
Una vez dentro de la carpeta de build, se procede a compilar el proyecto</p>

<p><code>
$ cmake ../
$ make
$ sudo make install
$ sudo ldconfig
</code>
De esa manera queda integrado el módulo out-of-tree dentro de GNU Radio.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
</feed>
