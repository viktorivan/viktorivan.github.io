<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programacion | Iván Rodríguez]]></title>
  <link href="http://viktorivan.github.io/blog/categories/programacion/atom.xml" rel="self"/>
  <link href="http://viktorivan.github.io/"/>
  <updated>2014-11-19T17:23:17-08:00</updated>
  <id>http://viktorivan.github.io/</id>
  <author>
    <name><![CDATA[Iván Rodríguez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SciPy como alternativa a Matlab]]></title>
    <link href="http://viktorivan.github.io/blog/2014/06/13/scipy-como-alternativa-a-matlab/"/>
    <updated>2014-06-13T07:38:58-07:00</updated>
    <id>http://viktorivan.github.io/blog/2014/06/13/scipy-como-alternativa-a-matlab</id>
    <content type="html"><![CDATA[<p><em>Resumen</em></p>

<p>El uso de herramientas de programación como <a href="http://www.mathworks.com/">Matlab</a> permiten que el desarrollo de simulaciones se realice de una manera muy práctica, dejando que el programador sólo se enfoque a solucionar el problema y no batalle en la implementación del algoritmo. Matlab es un lenguaje de alto nivel que permite que usuarios con conocimientos básicos de programación, puedan implementar cualquier algoritmo de una manera simple y rápida, así mismo, cuenta con múltiples herramientas gráficas que ayudan en la interpretación de los resultados. Una alternativa para el uso de herramientas enfocadas a la investigación es <a href="http://www.scipy.org">SciPy</a> o <code>Python Científico</code>. SciPy es una biblioteca de <a href="http://www.python.org">Python</a> que permite realizar operaciones especializadas en un lenguaje de programación convencional, facilitando así el desarrollo de algoritmos y optimizando los tiempos de ejecución, de manera similar a Matlab.</p>

<!-- more -->


<p><em>Justificación</em></p>

<p>Una de las características principales de Matlab es el manejo de Matrices, de hecho, su nombre se deriva de la palabra <code>Laboratorio de Matrices</code>. El uso de matrices y vectores permite manejar estructuras de datos mas complejas y realizar operaciones matemáticas que en un lenguaje de programación convencional requeriría varias líneas de código, por ejemplo, una simple multiplicación de matrices, donde en Matlab se realiza por un comando A*B, en otro lenguaje tendríamos que realizar (a groso modo) un ciclo For que recorra cada renglón de la matriz A y la multiplique por la columna de la matriz B y la suma de cada multiplicación colocarla en un nuevo arreglo en la posición que le corresponde.</p>

<p>Aunque Matlab es una herramienta poderosa y popular, esta no es de libre distribución debido a que su código es propietario; por lo que es limitado a la disponibilidad y tipo de licencias con que se disponga en el centro de trabajo. Una alternativa viable puede ser el uso de herramientas de código abierto, existen diversos proyectos que son compatibles incluso a nivel de código y manejo de archivos y datos, tal es el caso de <a href="http://www.octave.org">Octave</a>, que es un proyecto donde los archivos desarrollados en Matlab funcionan sin tener que cambiar el lenguaje en que fue programado, aunque existen algunas funciones especializadas no estan implementadas en Octave.</p>

<p>Aún así, la tendencia en algunos lenguajes de programación de libre distribución es ser multipropósitos, esto se logra con la ayuda de bibliotecas especializadas; Por ejemplo, Python, a través de SciPy, puede manipular datos en forma vectorial o matricial permitiendo una implementación sencilla del algoritmo y el cálculo de las operaciones matemáticas, ya que esta incluye funciones que van desde matemáticas básica hasta avanzada.</p>

<p>SciPy o <code>Scientific Python</code> es una biblioteca de Python, que junto a Numpy y <a href="http://www.matplotlib.org">MatPlotLib</a>, proporcionan las herramientas necesarias para trabajar en el ambiente de la investigación y educación e incluso en el de desarrollo. En el caso de las telecomunicaciones, permite hacer transmisores OFDM con la ayuda de la función de transformadas de Fourier (<code>fft</code>, <code>ifft</code>), manejos de datos complejos y operaciones entre ellos (<code>absolute</code>, <code>norm</code>, <code>sum</code>) y generación de datos aleatorios con una distribución específica (<code>randn</code> para una distribución normal) o matrices de unos y ceros (<code>ones</code>, <code>zeros</code>). SciPy ofrece una <a href="http://wiki.scipy.org/NumPy_for_Matlab_Users">wiki</a> con una lista de comandos básicos de Matlab y su equivalente en SciPy.</p>

<p>MatPlotLib es una herramienta visual que permite mostrar los datos calculados en las simulaciones en diferentes tipos de gráficas, una muy utilizada en telecomunicaciones para el cálculo de BER es <code>semilogy</code>.</p>

<p>La instalación de SciPy en una distribución Linux basada en Debian/Ubuntu se realiza a través de la terminal de comandos.</p>

<pre><code>sudo apt-get install python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose python-tk 
</code></pre>

<p>Un Ejemplo de un código desarrollado en Python con SciPy se muestra a continuación:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (DFTSOFDM.py)</span> <a href='/downloads/code/DFTSOFDM.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#Programa DFTS-OFDM</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Para ejecutar se requiere de scipy y matplotlib</span>
</span><span class='line'><span class="c">#Desde una terminal ejecute: </span>
</span><span class='line'><span class="c"># sudo apt-get install python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose python-tk</span>
</span><span class='line'><span class="c">#La simulacion la puede correr desde una terminal</span>
</span><span class='line'><span class="c"># python DFTSOFDM.py</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Carga de bibliotecas</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">scipy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span>
</span><span class='line'>
</span><span class='line'><span class="n">numpy</span><span class="o">.</span><span class="n">set_printoptions</span><span class="p">(</span><span class="n">precision</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span><span class="n">suppress</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Datos de inicializacion</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Inicializando parametros de simulacion&quot;</span>
</span><span class='line'><span class="n">snr</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="n">taps</span> <span class="o">=</span> <span class="mf">1.</span>
</span><span class='line'><span class="n">itera</span> <span class="o">=</span> <span class="mf">1000.</span>
</span><span class='line'><span class="n">paq</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">snr</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">itera</span>
</span><span class='line'><span class="n">datasize</span> <span class="o">=</span> <span class="mi">768</span>
</span><span class='line'><span class="n">gx</span> <span class="o">=</span> <span class="s">&quot;04C11DB7&quot;</span>
</span><span class='line'><span class="n">polsize</span> <span class="o">=</span> <span class="mi">32</span>
</span><span class='line'><span class="n">dfts</span> <span class="o">=</span> <span class="mi">192</span>
</span><span class='line'><span class="n">ofdm</span> <span class="o">=</span> <span class="mi">2048</span>
</span><span class='line'><span class="n">cp</span> <span class="o">=</span> <span class="n">ofdm</span><span class="o">/</span><span class="mi">4</span>
</span><span class='line'><span class="n">pilot</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="n">pilot_carriers</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">61</span><span class="p">,</span><span class="o">-</span><span class="mi">31</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">61</span><span class="p">]</span>
</span><span class='line'><span class="n">dfts_carriers</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="p">((</span><span class="n">dfts</span><span class="o">+</span><span class="n">pilot</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,(</span><span class="n">dfts</span><span class="o">+</span><span class="n">pilot</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="k">if</span> <span class="n">x</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pilot_carriers</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c">### TRANSMISOR ###</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Generacion de datos aleatorios</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Generando bits de datos aleatorios&quot;</span>
</span><span class='line'><span class="n">datab</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">datasize</span><span class="o">-</span><span class="n">polsize</span><span class="p">)</span><span class="o">*</span><span class="n">paq</span><span class="p">)</span>
</span><span class='line'><span class="n">datab</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datab</span><span class="p">,(</span><span class="n">paq</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Etapa CRC</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Calculando CRC&quot;</span>
</span><span class='line'><span class="n">pol</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">bin</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">gx</span><span class="p">),</span> <span class="mi">16</span><span class="p">))[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="n">polsize</span><span class="p">)</span><span class="o">.</span><span class="n">rjust</span><span class="p">(</span><span class="n">polsize</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="s">&#39;1&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">x</span><span class="p">])</span>
</span><span class='line'><span class="n">datazeros</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">datab</span><span class="p">,</span><span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">polsize</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">numpy</span><span class="o">.</span><span class="n">int</span><span class="p">)),</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">datacrc</span> <span class="o">=</span> <span class="n">datazeros</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Calculo CRC</span>
</span><span class='line'><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datazeros</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class='line'>	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datazeros</span><span class="p">)[</span><span class="mi">1</span><span class="p">]):</span>
</span><span class='line'>		<span class="k">if</span> <span class="n">datazeros</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">i</span><span class="o">+</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datazeros</span><span class="p">)[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>			<span class="n">datazeros</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">datazeros</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">pol</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Datos con CRC</span>
</span><span class='line'><span class="n">datacrc</span> <span class="o">=</span> <span class="n">datacrc</span><span class="o">|</span><span class="n">datazeros</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Modulador 16-QAM</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Datos en el modulador digital&quot;</span>
</span><span class='line'><span class="n">dataqam</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datacrc</span><span class="p">,(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'><span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">dataqam</span> <span class="p">[:,[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">datam</span> <span class="o">=</span> <span class="n">dataqam</span><span class="p">[:,</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">dataqam</span><span class="p">[:,</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">dataqam</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">dataqam</span><span class="p">[:,</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="mi">1j</span>
</span><span class='line'>
</span><span class='line'><span class="c">#DFTS</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Aplicando DFTS&quot;</span>
</span><span class='line'><span class="n">datadfts</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datam</span><span class="p">,(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">dfts</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datadfts</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class='line'>	<span class="n">datadfts</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datadfts</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">datadfts</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datadfts</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class='line'>
</span><span class='line'><span class="c">#OFDM</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;En el transmisor OFDM&quot;</span>
</span><span class='line'><span class="c">#Generacion de ceros y pilotos</span>
</span><span class='line'><span class="n">datapilot</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="n">paq</span><span class="o">*</span><span class="n">pilot</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">,(</span><span class="n">paq</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">dataofdm</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">ofdm</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">numpy</span><span class="o">.</span><span class="n">complex</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Asignacion de portadoras</span>
</span><span class='line'><span class="n">dataofdm</span><span class="p">[:,</span><span class="n">pilot_carriers</span><span class="p">]</span> <span class="o">=</span> <span class="n">datapilot</span>
</span><span class='line'><span class="n">dataofdm</span><span class="p">[:,</span><span class="n">dfts_carriers</span><span class="p">]</span> <span class="o">=</span> <span class="n">datadfts</span>
</span><span class='line'>
</span><span class='line'><span class="c">#IFFT</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class='line'>	<span class="n">dataofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Prefijo ciclico</span>
</span><span class='line'><span class="n">dataofdm</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">dataofdm</span><span class="p">[:,</span><span class="n">ofdm</span><span class="o">-</span><span class="n">cp</span><span class="p">:</span><span class="n">ofdm</span><span class="p">],</span><span class="n">dataofdm</span><span class="p">),</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">### CANAL ###</span>
</span><span class='line'><span class="c">#Multitrayectoria</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Agregando multitrayectorias del canal&quot;</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="n">numpy</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">taps</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">taps</span><span class="p">)</span> <span class="o">+</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">taps</span><span class="p">)</span><span class="o">*</span><span class="mi">1j</span><span class="p">)</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="n">numpy</span><span class="o">.</span><span class="n">tile</span><span class="p">(</span><span class="mf">1.</span><span class="o">/</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">taps</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">])),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">taps</span><span class="p">))</span><span class="o">*</span><span class="n">h</span>
</span><span class='line'><span class="n">H</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">numpy</span><span class="o">.</span><span class="n">complex</span><span class="p">)</span>
</span><span class='line'><span class="n">datacanal</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">paq</span><span class="p">,</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="n">numpy</span><span class="o">.</span><span class="n">complex</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class='line'>	<span class="n">H</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="n">numpy</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">)</span>
</span><span class='line'>	<span class="n">datacanal</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">datacanal</span> <span class="o">=</span> <span class="n">datacanal</span><span class="o">*</span><span class="n">H</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class='line'>	<span class="n">datacanal</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">datacanal</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c">#AWGN</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Sumando AWGN a los datos&quot;</span>
</span><span class='line'><span class="n">ebno</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="p">(</span><span class="n">snr</span><span class="o">/</span><span class="mf">10.</span><span class="p">),</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">snr</span><span class="p">)[</span><span class="mi">0</span><span class="p">]),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">])))</span>
</span><span class='line'><span class="n">awgn</span> <span class="o">=</span> <span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datacanal</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="mi">1j</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="n">ebno</span><span class="p">)</span>
</span><span class='line'><span class="n">datacanal</span> <span class="o">=</span> <span class="n">datacanal</span> <span class="o">+</span> <span class="n">awgn</span>
</span><span class='line'>
</span><span class='line'><span class="c">### RECEPTOR ###</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;En el receptor OFDM&quot;</span>
</span><span class='line'><span class="c">#Remueve el prefijo ciclico</span>
</span><span class='line'><span class="n">dataiofdm</span> <span class="o">=</span> <span class="n">datacanal</span><span class="p">[:,</span><span class="n">cp</span><span class="p">:</span><span class="n">ofdm</span><span class="o">+</span><span class="n">cp</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#FFT</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class='line'>	<span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Ecualizador</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Ecualizando los datos recibidos&quot;</span>
</span><span class='line'><span class="n">dataiofdm</span> <span class="o">=</span> <span class="n">dataiofdm</span><span class="p">[:,</span><span class="n">dfts_carriers</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span><span class="o">/</span><span class="n">H</span><span class="p">[:,</span><span class="n">dfts_carriers</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c">#IDFTS</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Calculando IDFTS&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class='line'>	<span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">)[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Demodulador 16-QAM</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Demodulador digital&quot;</span>
</span><span class='line'><span class="n">datadem</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">dataiofdm</span><span class="p">,(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">datadem</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">numpy</span><span class="o">.</span><span class="n">real</span><span class="p">(</span><span class="n">datadem</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">,</span><span class="n">numpy</span><span class="o">.</span><span class="n">imag</span><span class="p">(</span><span class="n">datadem</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">,</span><span class="n">numpy</span><span class="o">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">real</span><span class="p">(</span><span class="n">datadem</span><span class="p">))</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">,</span><span class="n">numpy</span><span class="o">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">imag</span><span class="p">(</span><span class="n">datadem</span><span class="p">))</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Recepcion para calculo de CRC</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Calculo de CRC Check&quot;</span>
</span><span class='line'><span class="n">datarcrc</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">datadem</span><span class="p">,(</span><span class="n">paq</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">datarx</span> <span class="o">=</span> <span class="n">datarcrc</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Calculo de CRC</span>
</span><span class='line'><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class='line'>	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">)[</span><span class="mi">1</span><span class="p">]):</span>
</span><span class='line'>		<span class="k">if</span> <span class="n">datarcrc</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">i</span><span class="o">+</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">)[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>			<span class="n">datarcrc</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">datarcrc</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">:</span><span class="n">scipy</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">pol</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">pol</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Eliminacion del CRC y paquetes incorrectos</span>
</span><span class='line'><span class="n">datar</span> <span class="o">=</span> <span class="n">datarx</span><span class="p">[:,</span><span class="mi">0</span><span class="p">:</span><span class="n">datasize</span><span class="o">-</span><span class="n">polsize</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Contador de paquetes correctos de acuerdo al CRC</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Calculando PER&quot;</span>
</span><span class='line'><span class="n">per</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(((</span><span class="n">numpy</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">datarcrc</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">1</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">itera</span><span class="p">)),</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">itera</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Comparacion entre datab y datar y promedia errores de acuerdo a iteraciones</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Calculando BER&quot;</span>
</span><span class='line'><span class="n">ber</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">sum</span><span class="p">((</span><span class="n">numpy</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">datar</span><span class="o">-</span><span class="n">datab</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">itera</span><span class="p">))),</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">itera</span><span class="o">*</span><span class="p">(</span><span class="n">datasize</span><span class="o">-</span><span class="n">polsize</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;SNR %BER %PER&quot;</span>
</span><span class='line'><span class="k">print</span> <span class="n">numpy</span><span class="o">.</span><span class="n">vstack</span><span class="p">([</span><span class="n">snr</span><span class="p">,</span><span class="n">ber</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="n">per</span><span class="o">*</span><span class="mi">100</span><span class="p">])</span><span class="o">.</span><span class="n">T</span>
</span><span class='line'><span class="n">matplotlib</span><span class="o">.</span><span class="n">pyplot</span><span class="o">.</span><span class="n">semilogy</span><span class="p">(</span><span class="n">snr</span><span class="p">,</span><span class="n">per</span><span class="p">,</span><span class="n">snr</span><span class="p">,</span><span class="n">ber</span><span class="p">)</span>
</span><span class='line'><span class="n">matplotlib</span><span class="o">.</span><span class="n">pyplot</span><span class="o">.</span><span class="n">legend</span><span class="p">([</span><span class="s">&quot;PER&quot;</span><span class="p">,</span><span class="s">&quot;BER&quot;</span><span class="p">])</span>
</span><span class='line'><span class="n">matplotlib</span><span class="o">.</span><span class="n">pyplot</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#58;&#x76;&#105;&#x6b;&#x74;&#111;&#114;&#x69;&#x76;&#x61;&#x6e;&#x40;&#x6f;&#x70;&#x65;&#110;&#109;&#97;&#105;&#x6c;&#x62;&#111;&#120;&#46;&#x6f;&#114;&#103;">&#118;&#105;&#x6b;&#116;&#111;&#114;&#x69;&#x76;&#x61;&#x6e;&#x40;&#x6f;&#112;&#x65;&#110;&#x6d;&#97;&#x69;&#x6c;&#98;&#x6f;&#x78;&#x2e;&#x6f;&#114;&#x67;</a></p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
</feed>
