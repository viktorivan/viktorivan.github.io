<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dsp | Iván Rodríguez]]></title>
  <link href="http://viktorivan.github.io/blog/categories/dsp/atom.xml" rel="self"/>
  <link href="http://viktorivan.github.io/"/>
  <updated>2015-11-03T13:38:07-06:00</updated>
  <id>http://viktorivan.github.io/</id>
  <author>
    <name><![CDATA[Iván Rodríguez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bloques de procesamiento de señal de GNU Radio en Python]]></title>
    <link href="http://viktorivan.github.io/blog/2015/11/02/bloques-de-procesamiento-de-senal-de-gnu-radio-en-python/"/>
    <updated>2015-11-02T09:10:09-06:00</updated>
    <id>http://viktorivan.github.io/blog/2015/11/02/bloques-de-procesamiento-de-senal-de-gnu-radio-en-python</id>
    <content type="html"><![CDATA[<p><em>Introducción.</em></p>

<p>Debido a la popularidad de <a href="https://www.python.org">Python</a> para el procesamiento digital de señales en el ámbito científico a través de <a href="http://www.scipy.org/">SciPy</a>, el proyecto de <a href="http://www.gnuradio.org">GNU Radio</a> permite el desarrollo de bloques de procesamiento de señales que pueden ser escritos en lenguaje de programación Python y usar estas librerías sin ningún problema. Este tipo de módulos son conocidos como <code>out-of-tree</code>, ya que, aunque los módulos serán integrados dentro del catálogo de bloques de GNU Radio no se van a integrar al proyecto para su distribución conjunta, sino individual.</p>

<!-- more -->

<p><em>Procedimiento.</em></p>

<p>Para crear un módulo <code>out-of-tree</code> se ejecuta desde una terminal de linux el siguiente comando</p>

<p><code>
$ gr_modtool create
Name of the new module:Tu_modulo
Creating out-of-tree module in ./gr-Tu_modulo... Done. 
Use 'gr_modtool add' to add a new block to this currently empty module. 
</code></p>

<p>El nombre que se indique para el módulo es con el que va a aparecer en el catálogo de GNU Radio, en este caso Tu_modulo.</p>

<p>Para crear los bloques que integrarán el módulo se utiliza la herramienta <code>gr_modtool</code> en la carpeta raíz del proyecto. En este caso se creará un bloque que realizará la función de un convertidor binario a decimal para los tipos de datos float basado en Python.</p>

<p><code>
$ cd gr-Tu_modulo
$ gr_modtool add
GNU Radio module name identified: Tu_modulo 
('sink', 'source', 'sync', 'decimator', 'interpolator', 'general', 'tagged_stream', 'hier', 'noblock')
Enter block type: decimator 
Language (python/cpp): python
Language: Python
Enter name of block/code (without module name prefix): bin2dec_py_ff
Block/code identifier: bin2dec_py_ff
Enter valid argument list, including default arguments: vec_size
Add Python QA code? [Y/n] 
Adding file 'python/bin2dec_py_ff.py'...
Adding file 'python/qa_bin2dec_py_ff.py'...
Editing python/CMakeLists.txt...
Adding file 'grc/prueba_bin2dec_py_ff.xml'...
Editing grc/CMakeLists.txt...
</code>
y a su vez, se desarrollará un bloque que realice la operación inversa, esto es, un convertidor decimal a binario.</p>

<p><code>
$ gr_modtool add 
GNU Radio module name identified: Tu_modulo 
('sink', 'source', 'sync', 'decimator', 'interpolator', 'general', 'tagged_stream', 'hier', 'noblock')
Enter block type: interpolator
Language (python/cpp): python
Language: Python
Enter name of block/code (without module name prefix): dec2bin_py_ff
Block/code identifier: dec2bin_py_ff
Enter valid argument list, including default arguments: vec_size
Add Python QA code? [Y/n] 
Adding file 'python/dec2bin_py_ff.py'...
Adding file 'python/qa_dec2bin_py_ff.py'...
Editing python/CMakeLists.txt...
Adding file 'grc/prueba_dec2bin_py_ff.xml'...
Editing grc/CMakeLists.txt...
</code></p>

<p>de esta manera se han creado dos bloques que serán escritos en Python, un decimador para el convertidor binario a decimal y un interpolador para el decimal a binario.</p>

<p>Los archivos donde se realizará la programación en código Python se ubican en <code>~/gr-Tu_modulo/python</code> y se llama <code>dec2bin_py_ff.py</code> para el convertidor decimal a binario y <code>bin2dec_py_ff.py</code> para el convertidor binario a decimal.</p>

<p><em>Convertidor binario a decimal</em></p>

<p>Dentro del archivo <code>bin2dec_py_ff.py</code> se puede observar que la librería de Scipy con Numpy ha sido declarada, en caso de que se requiera alguna librería en particular sólo se agrega con la instrucción <code>include</code>.</p>

<p>En la parte de <code>class bin2dec_py_ff(gr.decim_block)</code> está la seccción donde se definen los parámetros iniciales del bloque, <code>def __init__(self, vec_size):</code>, en ella se define el tipo de datos de entrada y salida del bloque, así como el factor de decimación del bloque <code>decim=vec_size</code>. Para poder utilizar la variable <code>vec_size</code> fuera de la clase se puede utilizar <code>self.vec_size</code>, es importante notar que esta variable pertenece a la clase pero no a la función <code>__init__</code>, la variable <code>vec_size</code> representa la cantidad de bits que se requieren para convertir el número a decimal.</p>

<p><code>
class bin2dec_py_ff(gr.decim_block):
    """
    docstring for block bin2dec_py_ff
    """
    def __init__(self, vec_size):
        gr.decim_block.__init__(self,
            name="bin2dec_py_ff",
            in_sig=[numpy.float32],
            out_sig=[numpy.float32], decim=vec_size)
    self.vec_size=vec_size 
</code></p>

<p>En la parte correspondiente a <code>// Do &lt;+signal processing+&gt;</code> es donde se realiza el procesamiento de datos que manipulará el bloque, para la conversión de binario a decimal se desarrolla el código de programación en Python, quedando de la siguiente manera:</p>

<p><code>
def work(self, input_items, output_items):
	in0 = numpy.int_(input_items[0])
	out = output_items[0]
	j=0
	for i in range(self.vec_size,len(in0)+1,self.vec_size):
		out[j]= int(str("".join(str(x) for x in in0[i-self.vec_size:i])),2)
		j += 1
	return len(output_items[0])
</code></p>

<p>El archivo quedaría de la siguiente forma, ya con todas las modificaciones incluidas:</p>

<p>{% include_code bin2dec_py_ff.py %}</p>

<p><em>Convertidor decimal a binario</em></p>

<p>Para corroborar el correcto funcionamiento del bloque de convertidor binario a decimal se propone realizar un convertidor decimal a binario que realizará la operación inversa del bloque anterior.</p>

<p>El archivo donde se realiza la programación es <code>dec2bin_py_ff.py</code>. Nuevamente, en la sección de <code>class dec2bin_py_ff(gr.interp_block):</code> se indica los tipos de datos de entrada y salida que manejará el bloque de procesamiento, así también el factor de interpolación definido por la variable <code>vec_size</code> y por último la variable <code>self.vec_size</code>, quedando como sigue:</p>

<p><code>
class dec2bin_py_ff(gr.interp_block):
    """
    docstring for block dec2bin_py_ff
    """
    def __init__(self, vec_size):
        gr.interp_block.__init__(self,
            name="dec2bin_py_ff",
            in_sig=[numpy.float32],
            out_sig=[numpy.float32], interp=vec_size)
    self.vec_size=vec_size
</code></p>

<p>En la sección de <code>// Do &lt;+signal processing+&gt;</code> se escribe el código que realizará la conversión decimal a binario.</p>

<p><code>
def work(self, input_items, output_items):
    in0 = input_items[0]
    out = output_items[0]
    f=numpy.zeros([len(in0),self.vec_size])
    for i in range(0,len(in0)):
        f[i,:] = numpy.int_([str(x) for x in numpy.binary_repr(in0[i], width = self.vec_size)])*1.0
    out[:] = numpy.hstack(f)
    return len(output_items[0])
</code></p>

<p>El archivo completo queda de la siguiente manera:</p>

<p>{% include_code dec2bin_py_ff.py %}</p>

<p><em>Interfaz GNU Radio Companion</em></p>

<p>Los bloques dentro de GNU Radio Companion (GRC) son archivos xml que se ubican en <code>~/gr-Tu_modulo/grc</code>, para el convertidor binario a decimal se llama <code>Tu_modulo_bin2dec_py_ff.xml</code> y para el convertidor decimal a binario <code>Tu_modulo_dec2bin_py_ff.xml</code>.</p>

<p>Dentro del archivo xml hay varios parámetros que pueden ser personalizados, tal como el nombre del bloque, este parámetro se define en la línea correspondiente a <code>&lt;name&gt;</code>.</p>

<pre><code>&lt;name&gt;Binary To Decimal Python&lt;/name&gt;
</code></pre>

<p>En la parte de <code>&lt;param&gt;</code> se indica la variable de entrada del bloque</p>

<pre><code>  &lt;param&gt;
    &lt;name&gt;Vector size&lt;/name&gt;
    &lt;key&gt;vec_size&lt;/key&gt;
    &lt;type&gt;int&lt;/type&gt;
  &lt;/param&gt;
</code></pre>

<p>El conector de entrada del bloque de procesamiento se define en <code>&lt;sink&gt;</code></p>

<pre><code>  &lt;sink&gt;
    &lt;name&gt;in&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/sink&gt;
</code></pre>

<p>El conector de salida en <code>&lt;source&gt;</code></p>

<pre><code>  &lt;source&gt;
    &lt;name&gt;out&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/source&gt;
</code></pre>

<p>De igual manera se modifican las secciones de <code>&lt;name&gt;</code>, <code>&lt;param&gt;</code>, <code>&lt;sink&gt;</code> y <code>&lt;source&gt;</code> en el archivo <code>Tu_modulo_dec2bin_py_ff.xml</code> para el bloque de procesamiento del convertidor decimal a binario.</p>

<p>Los archivos quedarán finalmente de la siguiente forma:</p>

<p>{% include_code  Tu_modulo_bin2dec_py_ff.xml %}</p>

<p>{% include_code  Tu_modulo_dec2bin_py_ff.xml %}</p>

<p><em>Compilación de los bloques</em></p>

<p>Una vez ya realizado todos los procesos referentes al código de programación de los bloques de procesamiento se procede a integrarlos en el proyecto de GNU Radio. Esto se realiza por medio de una serie de comandos desde una terminal de linux en la raíz del proyecto. En caso de no tener una carpeta de build, se crea por medio de comandos de linux</p>

<p><code>
$ mkdir build
$ cd build
</code>
Una vez dentro de la carpeta de build, se procede a compilar el proyecto</p>

<p><code>
$ cmake ../
$ make
$ sudo make install
$ sudo ldconfig
</code>
De esa manera queda integrado el módulo out-of-tree dentro de GNU Radio.</p>

<p><em>Archivos de prueba QA</em></p>

<p>Un modo para corroborar el correcto funcionamiento del bloque de procesamiento es a través de los archivos QA que se ubican en <code>~/gr-Tu_modulo/python</code>. Estos archivos permiten hacer una comparación de los datos de salida y los datos esperados de salida de acuerdo a una secuencia de datos de entrada previamente definida. Un ejemplo para probar el convertidor binario a decimal sería:</p>

<p><code>
def test_001_t (self):
    # set up fg
    src_data = [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0]
    expected_result = [5.0, 7.0, 0.0, 1.0, 2.0]
    src = blocks.vector_source_f (src_data)
    conv = bin2dec_py_ff (3)
    snk = blocks.vector_sink_f ()
    self.tb.connect (src, conv)
    self.tb.connect (conv, snk)
    self.tb.run ()
    # check data
    result_data = snk.data ()
    self.assertFloatTuplesAlmostEqual (expected_result, result_data,2)
</code></p>

<p>Una vez modificado el archivo QA, se procede a ejecutarlo desde una terminal de Linux con el comando de <code>python</code>, cabe recordar que la terminal debe abrirse en <code>~/gr-Tu_modulo/python</code>.</p>

<p>```
$ python qa_dec2bin_py_ff.py 
.
———————————————————————-
Ran 1 test in 0.002s</p>

<p>OK</p>

<p>```</p>

<p>Si el código funciona correctamente, se nos mostrará que no hubo error al momento de ejecutar.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Librerías externas en GNU Radio]]></title>
    <link href="http://viktorivan.github.io/blog/2014/03/19/librerias-externas-en-gnu-radio/"/>
    <updated>2014-03-19T20:04:12-06:00</updated>
    <id>http://viktorivan.github.io/blog/2014/03/19/librerias-externas-en-gnu-radio</id>
    <content type="html"><![CDATA[<p>Introducción.</p>

<p>Aunque <a href="http://www.gnuradio.org">GNU Radio</a> es un proyecto versátil conformado con una gran cantidad de herramientas que permiten realizar múltiples procesos en Software Radio, muchas veces se requiere de operaciones específicas que difícilmente serán integradas en el proyecto original. La integración de estas funciones especiales pueden ser desarrolladas por el usuario por medio de herramientas como <code>gr_modtool</code>, donde a través de código en C++ o Python se puede desarrollar cualquier función para el procesamiento digital de la señal que no este considerado dentro del proyecto de GNU Radio. </p>

<!-- more -->

<p>Lenguajes de programación como C++ y Python gozan de una popularidad entre los programadores de tal manera que se desarrollan proyectos independientes especializados que facilitan el desarrollo de programas orientados a analizar o solucionar áreas muy específicas, un caso es <a href="http://itpp.sourceforge.net">IT++</a> que es una biblioteca de clases y funciones para álgebra lineal, optimización numérica, procesamiento de señales, comunicaciones y estadística. Utilizada ampliamente tanto en la industria como en la investigación.</p>

<p><em>Integración de IT++ en módulos out-of-tree</em></p>

<p>Los módulos out-of-tree de GNU Radio utilizan la herramienta <a href="http://www.cmake.org">CMAKE</a> que es una familia de herramientas diseñadas para compilar y probar software, de esta manera se puede indicar a GNU Radio la incorporación de bibliotecas externas al proyecto out-of-tree por medio de archivos CMAKE. Estos archivos generan variables globales con la ubicación de los archivos de la biblioteca a instalar.</p>

<p>En el caso de IT++, el archivo se llama <code>FindITPP.cmake</code> y se tiene que guardar en <code>~/gr-Tu_modulo/cmake/modules</code>, quedando el archivo cmake como sigue.</p>

<p>{% include_code FindITPP.cmake %}</p>

<p>Así mismo hay que indicar a CMAKE que tiene que utilizar el nuevo archivo cmake, para ello se modifica el archivo <code>CmakeLists.txt</code> ubicado en la raíz del proyecto.</p>

<p>En la sección <code># Find gnuradio build dependencies</code> se agrega la línea</p>

<pre><code>find_package(ITPP)
</code></pre>

<p>En la parte final de la sección permite agregar un mensaje de error en caso de que la biblioteca no este instalada en el sistema.</p>

<pre><code>if(NOT ITPP_FOUND)
    message(FATAL_ERROR "IT++ Core required to compile Tu_Modulo")
endif()
</code></pre>

<p>En la sección de <code># Setup the include and linker paths</code> se agrega la línea <code>${ITPP_INCLUDE_DIRS}</code> para <code>include_directories</code> y la línea <code>${ITPP_LIBRARY_DIRS}</code> para <code>link_directories</code>, quedando como sigue:</p>

<pre><code>include_directories(
    ${CMAKE_SOURCE_DIR}/lib
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_BINARY_DIR}/lib
    ${CMAKE_BINARY_DIR}/include
    ${Boost_INCLUDE_DIRS}
    ${CPPUNIT_INCLUDE_DIRS}
    ${ITPP_INCLUDE_DIRS}
    ${GNURADIO_ALL_INCLUDE_DIRS}
)

link_directories(
    ${Boost_LIBRARY_DIRS}
    ${CPPUNIT_LIBRARY_DIRS}
    ${ITPP_LIBRARY_DIRS}
    ${GNURADIO_RUNTIME_LIBRARY_DIRS}
)
</code></pre>

<p>Finalmente el archivo <code>CMakeLists.txt</code>, con sus modificaciones incluidas, quedaría:</p>

<p>{% include_code CMakeLists.txt CMakeLists.cmake %}</p>

<p><em>Desarrollo de bloques con IT++</em></p>

<p>En este caso se desarrollarán dos bloques con funciones de IT++, el codificador y decodificador convolucional. Para ello, por medio de <code>gr_modtool</code> se requiere crear dos bloques con tres valores de entrada, uno para el polinomio, otro para la tasa de codificación y uno último para indicar la cantidad de registros que tiene el codificador.</p>

<p>Desde una terminal de linux, se ejecuta <code>gr_modtool</code></p>

<p><code>
$ gr_modtool add
GNU Radio module name identified: Tu_modulo
Enter code type: sync
Language: C++
Enter name of block/code (without module name prefix): encodconv_vff
Block/code identifier: encodconv_vff
Enter valid argument list, including default arguments: int val1, int val2, int val3
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/encodconv_vff_impl.h'...
Adding file 'lib/encodconv_vff_impl.cc'...
Adding file 'include/Tu_modulo/encodconv_vff.h'...
Editing swig/Tu_modulo_swig.i...
Adding file 'python/qa_encodconv_vff.py'...
Editing python/CMakeLists.txt...
Adding file 'grc/Tu_modulo_encodconv_vff.xml'...
Editing grc/CMakeLists.txt...
</code>
Para el decodificador, se crea un bloque con las mismas características</p>

<p><code>
$ gr_modtool add
GNU Radio module name identified: Tu_modulo
Enter code type: sync
Language: C++
Enter name of block/code (without module name prefix): decodconv_vff
Block/code identifier: decodconv_vff
Enter valid argument list, including default arguments: int val1, int val2, int val3
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/decodconv_vff_impl.h'...
Adding file 'lib/decodconv_vff_impl.cc'...
Adding file 'include/Tu_modulo/decodconv_vff.h'...
Editing swig/Tu_modulo_swig.i...
Adding file 'python/qa_decodconv_vff.py'...
Editing python/CMakeLists.txt...
Adding file 'grc/Tu_modulo_decodconv_vff.xml'...
Editing grc/CmakeLists.txt...
</code>
<em>Codificador convolucional</em></p>

<p>Dentro del archivo <code>encodconv_vff_impl.cc</code> que se ubica en <code>~/gr-Tu_modulo/lib</code> se indica que se utilizará la biblioteca de IT++ </p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>En la sección de <code>encodconv_vff_impl::encodconv_vff_impl(int val1, int val2, int val3)</code> se indican los parámetros del bloque tales como la cantidad de flujos de datos, tamaño de los paquetes de entrada y salida, así como asignar a las variables internas las variables públicas que se capturaron en el bloque de GRC. </p>

<pre><code>encodconv_vff_impl::encodconv_vff_impl(int val1, int val2, int val3)
  : gr::sync_block("encodconv_vff",
          gr::io_signature::make(1, 1, sizeof(float) * val3),
          gr::io_signature::make(1, 1, sizeof(float) * val3 * sizeof(val1)))
{
	polsize = sizeof(val1);
	cl = val2;
	pz = val3;
  
	for (int i = 0; i &lt; 0x100; i++){
		polynom[i] = i;
	}
	
	memcpy(polynom, (char*)&amp;val1, sizeof(val1));
	
	// -- Channel code parameters --

	itpp::ivec generator(polsize);

	for (int i = 0; i &lt; polsize; i++){
		generator[i] = polynom[i];
	}

	code.set_generator_polynomials(generator, cl);	
}
</code></pre>

<p>Como se puede observar, varias funciones de IT++ se han utilizado como parte del código del bloque de procesamiento, para llamar cualquier otra función solo se indica con el formato <code>itpp::función</code>, de esta manera, el compilador reconocerá que la función forma parte de la biblioteca de IT++.</p>

<p>En la sección de procesamiento de la señal <code>// Do &lt;+signal processing+&gt;</code> se realizará la codificación convolucional de los paquetes de entrada de acuerdo a los parámetros previamente definidos, por lo que el código final queda como sigue:</p>

<pre><code>int
encodconv_vff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    itpp::bvec tempin(pz * sizeof(float));
	itpp::bvec tempout(pz * polsize * sizeof(float));
  
	for (int j = 0; j &lt; (pz * sizeof(float)); j++){
		tempin[j] = in[j];
	}	

	code.encode_tailbite(tempin, tempout);

	for (int k = 0; k &lt; (pz * polsize * sizeof(float)); k++){
		out[k] = tempout[k];
	}

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>La operación de codificación es realizada por el comando <code>code.encode_tailbite(tempin, tempout);
</code>, disminuyendo así la cantidad de líneas para desarrollar un codificador convolucional.</p>

<p>La versión final del código es</p>

<p>{% include_code encodconv_vff_impl.cc encodconv_vff_impl.cpp %}</p>

<p><em>Decodificador convolucional</em></p>

<p>De manera similar al codificador convolucional, es necesario modificar el archivo <code>decodconv_vff_impl.cc</code>, en una primera instancia se agrega la línea donde se indica que se utilizará la biblioteca de IT++.</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>En la sección de <code>decodconv_vff_impl::decodconv_vff_impl(int val1, int val2, int val3)</code> se indican los parámetros del bloque,</p>

<pre><code>decodconv_vff_impl::decodconv_vff_impl(int val1, int val2, int val3)
  : gr::sync_block("decodconv_vff",
          gr::io_signature::make(1, 1, sizeof(float) * val3 * sizeof(val1)),
          gr::io_signature::make(1, 1, sizeof(float) * val3))
{
	polsize = sizeof(val1);
	cl = val2;
	pz = val3;
  
	for (int i = 0; i &lt; 0x100; i++){
		polynom[i] = i;
	}

	memcpy(polynom, (char*)&amp;val1, sizeof(val1));
	
	// -- Channel code parameters --

	itpp::ivec generator(polsize);

	for (int i = 0; i &lt; polsize; i++){
		generator[i] = polynom[i];
	}

	code.set_generator_polynomials(generator, cl);
}
</code></pre>

<p>De igual manera, en la sección de procesamiento de la señal del bloque de procesamiento <code>// Do &lt;+signal processing+&gt;</code> se realizará la decodificación de los paquetes de entrada de acuerdo a los parámetros previamente definidos utilizando la biblioteca de IT++, </p>

<pre><code>int
decodconv_vff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

itpp::bvec tempbin(pz * polsize * sizeof(float));
itpp::bvec tempout(pz * sizeof(float));
itpp::vec tempin(pz * polsize * sizeof(float));

	for (int j = 0; j &lt; (pz  * polsize * sizeof(float)); j++){
		tempbin[j] = in[j];
	}

	tempin = to_vec(tempbin);
	tempin = -(tempin * 2 - 1);

	code.decode_tailbite(tempin, tempout);

	for (int k = 0; k &lt; (pz * sizeof(float)); k++){
		out[k] = tempout[k];
	}

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>En este bloque la operación de decodificación es realizada por el comando <code>code.decode_tailbite(tempin, tempout);</code> </p>

<p>El código final del bloque de procesamiento es</p>

<p>{% include_code decodconv_vff_impl.cc decodconv_vff_impl.cpp %}</p>

<p><em>Definiendo las variables públicas en los archivos de cabecera</em></p>

<p>Para poder utilizar libremente las clases y variables de IT++ dentro de los archivos cc de GNU Radio se requiere modificar los archivos de cabecera h de los bloques de procesamiento. Para el codificador convolucional el archivo es <code>encodconv_vff_impl.h</code> y para el decodificador es <code>decodconv_vff_impl.h</code>. </p>

<p>Dentro del archivo <code>encodconv_vff_impl.h</code> se indica la biblioteca de IT++</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>en la sección de <code>public</code> se indican las variables a utilizar</p>

<pre><code> public:
  encodconv_vff_impl(int val1, int val2, int val3);
  unsigned char polynom [0x100];
  int polsize;
  int cl;
  int pz;
  itpp::Convolutional_Code code;
  
  ~encodconv_vff_impl();
</code></pre>

<p>El archivo h del bloque de procesamiento del codificador convolucional queda como sigue</p>

<p>{% include_code encodconv_vff_impl.h encodconv_vff_impl.c %}</p>

<p>De igual manera en el archivo de cabecera del decodificador <code>decodconv_vff_impl.h</code> se indica la biblioteca de IT++</p>

<pre><code>#include &lt;itpp/itcomm.h&gt;
</code></pre>

<p>y en la sección de <code>public</code> las variables requeridas para el procesamiento de la señal,
     public:
      decodconv_vff_impl(int val1, int val2, int val3);
      unsigned char polynom [0x100];
      int polsize;
      int cl;
      int pz;
      itpp::Convolutional_Code code;</p>

<pre><code>  ~decodconv_vff_impl();
</code></pre>

<p>El archivo de cabecera, en su versión final queda,</p>

<p>{% include_code decodconv_vff_impl.h decodconv_vff_impl.c %}</p>

<p><em>Interfaz gráfica de GRC</em></p>

<p>Los bloques de procesamiento mostrados en GNU Radio Companion son archivos xml que se ubican en <code>~/gr-Tu_modulo/grc</code>, para el codificador convolucional es <code>Tu_modulo_encodconv_vff.xml</code> y para el decodificador <code>Tu_modulo_decodconv_vff.xml</code>.</p>

<p>Los parámetros a modificar son <code>&lt;name&gt;</code>, <code>&lt;param&gt;</code>, <code>&lt;sink&gt;</code> y <code>&lt;source&gt;</code>, los bloques del decodificador y codificador convolucional quedan como sigue,</p>

<p>{% include_code Tu_modulo_encodconv_vff.xml %}</p>

<p>{% include_code Tu_modulo_decodconv_vff.xml %}</p>

<p><em>Compilación de los bloques</em></p>

<p>Una vez ya realizado todos los procesos referentes al código de programación de los bloques de procesamiento se procede a integrarlos en el proyecto de GNU Radio. Esto se realiza por medio de una serie de comandos desde una terminal de linux en la raíz del proyecto. En caso de no tener una carpeta de build, se crea por medio de comandos de linux</p>

<p><code>
$ mkdir build
$ cd build
</code>
Una vez dentro de la carpeta de build, se procede a compilar el proyecto</p>

<p><code>
$ cmake ../
$ make
$ sudo make install
$ sudo ldconfig
</code>
De esa manera queda integrado el módulo out-of-tree dentro de GNU Radio.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bloques de procesamiento de señales en GNU Radio]]></title>
    <link href="http://viktorivan.github.io/blog/2014/03/19/bloques-de-procesamiento-de-senales-en-gnu-radio/"/>
    <updated>2014-03-19T13:06:58-06:00</updated>
    <id>http://viktorivan.github.io/blog/2014/03/19/bloques-de-procesamiento-de-senales-en-gnu-radio</id>
    <content type="html"><![CDATA[<p>Introducción.</p>

<p>El proyecto de <a href="http://www.gnuradio.org">GNU Radio</a> permite el desarrollo de bloques de procesamiento de señales que pueden ser escritos tanto en lenguaje de programación Python o C++. Este tipo de módulos son conocidos como <code>out-of-tree</code>, ya que, aunque los módulos serán integrados dentro del catálogo de bloques de GNU Radio no se van a integrar al proyecto para su distribución.</p>

<!-- more -->

<p>Procedimiento.</p>

<p>Para crear un módulo out-of-tree se ejecuta desde una terminal de linux el siguiente comando</p>

<p><code>
$ gr_modtool create
Name of the new module:Tu_modulo
Creating out-of-tree module in ./gr-Tu_modulo... Done. 
Use 'gr_modtool add' to add a new block to this currently empty module. 
</code></p>

<p>El nombre que se indique para el módulo es con el que va a aparecer en el catálogo de GNU Radio.</p>

<p>Para crear los bloques que integrarán el módulo se utiliza la herramienta <code>gr_modtool</code> en la carpeta raíz del proyecto. En este caso se creará un bloque que realizará la función de un convertidor binario a decimal para los tipos de datos float.</p>

<p><code>
$ cd gr-Tu_modulo
$ gr_modtool add
GNU Radio module name identified: Tu_modulo 
Enter code type: decimator 
Language: C++ 
Enter name of block/code (without module name prefix): bin2dec_ff 
Block/code identifier: bin2dec_ff 
Enter valid argument list, including default arguments: int vec_size 
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/bin2dec_ff_impl.h'... 
Adding file 'lib/bin2dec_ff_impl.cc'... 
Adding file 'include/Tu_modulo/bin2dec_ff.h'... 
Editing swig/Tu_modulo_swig.i... 
Adding file 'python/qa_bin2dec_ff.py'... 
Editing python/CMakeLists.txt... 
Adding file 'grc/Tu_modulo_bin2dec_ff.xml'... 
Editing grc/CMakeLists.txt...
</code>
y a su vez, se desarrollará un bloque que realice la operación inversa, esto es, un convertidor decimal a binario.</p>

<p><code>
$ gr_modtool add 
GNU Radio module name identified: Tu_modulo 
Enter code type: interpolator 
Language: C++ 
Enter name of block/code (without module name prefix): dec2bin_ff 
Block/code identifier: dec2bin_ff 
Enter valid argument list, including default arguments: int vec_size 
Add Python QA code? [Y/n] 
Add C++ QA code? [y/N] 
Adding file 'lib/dec2bin_ff_impl.h'... 
Adding file 'lib/dec2bin_ff_impl.cc'... 
Adding file 'include/Tu_modulo/dec2bin_ff.h'... 
Editing swig/Tu_modulo_swig.i... 
Adding file 'python/qa_dec2bin_ff.py'... 
Editing python/CMakeLists.txt... 
Adding file 'grc/Tu_modulo_dec2bin_ff.xml'... 
Editing grc/CmakeLists.txt...
</code></p>

<p>de esta manera se han creado dos bloques, un decimador para el convertidor binario a decimal y un interpolador para el decimal a binario.</p>

<p>Los archivos donde se realizará la programación en código c++ se ubican en <code>~/gr-Tu_modulo/lib</code> y se llama <code>dec2bin_ff_impl.cc</code> para el convertidor decimal a binario y <code>bin2dec_ff_impl.cc</code> para el convertidor binario a decimal.</p>

<p><em>Convertidor binario a decimal</em></p>

<p>Dentro del archivo <code>bin2dec_ff_impl.cc</code> hay que indicar las librerías que se utilizarán, en este caso sólo requerimos la librería <code>math.h</code>, después de los include ya definidos agregamos:</p>

<pre><code>#include &lt;math.h&gt;
</code></pre>

<p>En la sección de <code>bin2dec_ff_impl::bin2dec_ff_impl(int vec_size)</code> se definen la cantidad de flujos de datos que manejará el bloque de procesamiento, en este caso, sólo es un flujo de entrada y uno de salida, el factor de decimación definido por la variable vec_size y además se asigna a la variable chunk el valor de vec_size, ya que vec_size representa la cantidad de bits que se requieren para convertir el número a decimal. </p>

<pre><code>bin2dec_ff_impl::bin2dec_ff_impl(int vec_size)
  : gr::sync_decimator("bin2dec_ff",
          gr::io_signature::make(1, 1, sizeof(float)),
          gr::io_signature::make(1, 1, sizeof(float)), vec_size)
{
	chunk = vec_size;
}
</code></pre>

<p>En la parte correspondiente a <code>// Do &lt;+signal processing+&gt;</code> es donde se realiza el procesamiento de datos que manipulará el bloque, para la conversión de binario a decimal se desarrolla el código de programación en C++, quedando de la siguiente manera:</p>

<pre><code>int
bin2dec_ff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    int j = 0, a = 0;
    for (int i = 0; i &lt; noutput_items * chunk; i = i + chunk){
    	out[j] = 0;
    	a = chunk - 1;
    	for (int k = 0; k &lt; chunk; k++){
    		out[j] = out[j] + (in[i + k] * pow (2,a));
    		a = a - 1;
    	}
    	j++;
    }

    // Tell runtime system how many output items we produced.
    return noutput_items;
}
</code></pre>

<p>El archivo quedaría de la siguiente forma, ya con todas las modificaciones incluidas:</p>

<p>{% include_code bin2dec_ff_impl.cc bin2dec_ff_impl.cpp %}</p>

<p><em>Convertidor decimal a binario</em></p>

<p>Para corroborar el correcto funcionamiento del bloque de convertidor binario a decimal se propone realizar un convertidor decimal a binario que realizará la operación inversa del bloque anterior.</p>

<p>El archivo donde se realiza la programación es <code>dec2bin_ff_impl.cc</code>. Como primer paso se indica la librería que utilizará el bloque de procesamiento, de la misma forma que se indicó en el bloque anterior.</p>

<pre><code>#include &lt;math.h&gt;
</code></pre>

<p>Nuevamente, en la sección de <code>dec2bin_ff_impl::dec2bin_ff_impl(int vec_size)
</code> se indica la cantidad de flujos de entrada y salida que manejará el bloque de procesamiento, así también el factor de interpolación definido por la variable vec_size y por último la variable chunk, quedando como sigue:</p>

<pre><code>dec2bin_ff_impl::dec2bin_ff_impl(int vec_size)
  : gr::sync_interpolator("dec2bin_ff",
          gr::io_signature::make(1, 1, sizeof(float)),
          gr::io_signature::make(1, 1, sizeof(float)), vec_size)
{
	chunk = vec_size;
}
</code></pre>

<p>En la sección de <code>// Do &lt;+signal processing+&gt;</code> se escribe el código que realizará la conversión decimal a binario.</p>

<pre><code>int
dec2bin_ff_impl::work(int noutput_items,
		  gr_vector_const_void_star &amp;input_items,
		  gr_vector_void_star &amp;output_items)
{
    const float *in = (const float *) input_items[0];
    float *out = (float *) output_items[0];

    int l = 0, m = 0, a = 0, b[chunk];
    for (int i = 0; i &lt; noutput_items / chunk; i++){
    	a = in[i];
    	l = chunk - 1;
    	for (int j = 0; j &lt; chunk; j++){
    		b[j] = a % 2;
    		a = a / 2;	
    	}
    	for (int k = 0; k &lt; chunk; k++){
    		out[m] = b [l];
    		l = l - 1;
    		m++;
    	}
    }
</code></pre>

<p>El archivo completo queda de la siguiente manera:</p>

<p>{% include_code dec2bin_ff_impl.cc dec2bin_ff_impl.cpp %}</p>

<p>Adicionalmente hay que declarar la variable <code>chunk</code> de tal forma que sea pública y poder utilizarla en las diferentes secciones del bloque de procesamiento, esto se hace modificando el archivo <code>bin2dec_ff_impl.h</code> para el convertidor binario a decimal y el archivo <code>dec2bin_ff_impl.h</code> para el convertidor decimal a binario. En la sección de <code>public</code> se agrega:</p>

<pre><code> public:
  bin2dec_ff_impl(int vec_size);
  int chunk;
  ~bin2dec_ff_impl();
</code></pre>

<p>Quedando los archivos como siguen</p>

<p>{% include_code bin2dec_ff_impl.h bin2dec_ff_impl.c %}</p>

<p>{% include_code dec2bin_ff_impl.h dec2bin_ff_impl.c %}</p>

<p><em>Interfaz GNU Radio Companion</em></p>

<p>Los bloques dentro de GNU Radio Companion (GRC) son archivos xml que se ubican en <code>~/gr-Tu_modulo/grc</code>, para el convertidor binario a decimal se llama <code>Tu_modulo_bin2dec_ff.xml</code> y para el convertidor decimal a binario <code>Tu_modulo_dec2bin_ff.xml</code>.</p>

<p>Dentro del archivo xml hay varios parámetros que pueden ser personalizados, tal como el nombre del bloque, este parámetro se define en la línea correspondiente a <code>&lt;name&gt;</code>.</p>

<pre><code>&lt;name&gt;Binary To Decimal&lt;/name&gt;
</code></pre>

<p>En la parte de <code>&lt;param&gt;</code> se indica la variable de entrada del bloque</p>

<pre><code>  &lt;param&gt;
    &lt;name&gt;Vector size&lt;/name&gt;
    &lt;key&gt;vec_size&lt;/key&gt;
    &lt;type&gt;int&lt;/type&gt;
  &lt;/param&gt;
</code></pre>

<p>El conector de entrada del bloque de procesamiento se define en <code>&lt;sink&gt;</code></p>

<pre><code>  &lt;sink&gt;
    &lt;name&gt;in&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/sink&gt;
</code></pre>

<p>El conector de salida en <code>&lt;source&gt;</code></p>

<pre><code>  &lt;source&gt;
    &lt;name&gt;out&lt;/name&gt;
    &lt;type&gt;float&lt;/type&gt;
  &lt;/source&gt;
</code></pre>

<p>De igual manera se modifican las secciones de <code>&lt;name&gt;</code>, <code>&lt;param&gt;</code>, <code>&lt;sink&gt;</code> y <code>&lt;source&gt;</code> en el archivo <code>Tu_modulo_dec2bin_ff.xml</code> para el bloque de procesamiento del convertidor decimal a binario.</p>

<p>Los archivos quedarán finalmente de la siguiente forma:</p>

<p>{% include_code  Tu_modulo_bin2dec_ff.xml %}</p>

<p>{% include_code  Tu_modulo_dec2bin_ff.xml %}</p>

<p><em>Compilación de los bloques</em></p>

<p>Una vez ya realizado todos los procesos referentes al código de programación de los bloques de procesamiento se procede a integrarlos en el proyecto de GNU Radio. Esto se realiza por medio de una serie de comandos desde una terminal de linux en la raíz del proyecto. En caso de no tener una carpeta de build, se crea por medio de comandos de linux</p>

<p><code>
$ mkdir build
$ cd build
</code>
Una vez dentro de la carpeta de build, se procede a compilar el proyecto</p>

<p><code>
$ cmake ../
$ make
$ sudo make install
$ sudo ldconfig
</code>
De esa manera queda integrado el módulo out-of-tree dentro de GNU Radio.</p>

<p>viktorivan@openmailbox.org</p>

<p>@viktor_ivan</p>
]]></content>
  </entry>
  
</feed>
